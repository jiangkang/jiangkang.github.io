<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter-自定义闪屏页/SplashScreen</title>
      <link href="/2020/06/19/flutter/flutter-zi-ding-yi-shan-ping-ye-splashscreen/"/>
      <url>/2020/06/19/flutter/flutter-zi-ding-yi-shan-ping-ye-splashscreen/</url>
      
        <content type="html"><![CDATA[<h2 id="Splash-Screen"><a href="#Splash-Screen" class="headerlink" title="Splash Screen?"></a>Splash Screen?</h2><p>对于Android应用来说,Splash Screen最熟悉不过了.比如为了让启动的时候app不现实白屏,或者为了弄个开屏广告用来盈利,都会用到Splash Screen.</p><p><img src="https://oss.jiangkang.tech/jk/splash.gif" alt="splash"></p><h2 id="Flutter中如何自定义Splash页面"><a href="#Flutter中如何自定义Splash页面" class="headerlink" title="Flutter中如何自定义Splash页面"></a>Flutter中如何自定义Splash页面</h2><p>这里先说一个Android中最基础的:</p><h3 id="设置启动主题-并设置一个windowBackground"><a href="#设置启动主题-并设置一个windowBackground" class="headerlink" title="设置启动主题,并设置一个windowBackground"></a>设置启动主题,并设置一个windowBackground</h3><p>至于怎么设置主题,太简单了没什么好说的,贴个背景资源代码:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>opacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opaque<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:color/white<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ic_launcher<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">></span></span></code></pre><p>可以看到这里用了一个白色背景和一个图片.</p><p><strong>在Flutter中,只设置这个是不够的</strong>,为什么?</p><p><strong>在MainActivity启动之后,Flutter中的UI数据加载之前</strong>这段时间里我们还得设置一个自定义的splash图或者页面,要不然很可能会导致黑屏.</p><p>这里也有很多种方法,主要说下经过源码分析之后得到的两种方案:</p><h3 id="manifest中通过meta-data设置一个splash资源"><a href="#manifest中通过meta-data设置一个splash资源" class="headerlink" title="manifest中通过meta-data设置一个splash资源"></a>manifest中通过<code>meta-data</code>设置一个splash资源</h3><pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>                <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.flutter.embedding.android.SplashScreenDrawable<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/splash_screen<span class="token punctuation">"</span></span>                <span class="token punctuation">/></span></span></code></pre><p>这个节点放到MainActivity节点下.</p><p>这样就会有在Flutter UI加载完之前显示一个过渡的图片了.</p><p>如果只是设置个图片,在实际产品中基本上没什么用,来看看正式一点的做法吧:</p><h3 id="自己实现SplashScreen接口"><a href="#自己实现SplashScreen接口" class="headerlink" title="自己实现SplashScreen接口"></a>自己实现<code>SplashScreen</code>接口</h3><p>这个接口很简单,就两个方法:</p><ul><li><code>createSplashView</code>:创建一个View用于展示Splash页面</li><li><code>transitionToFlutter</code>:过渡到Flutter</li></ul><p>代码也比较简单,我这里直接用代码手写一个Lotiie的基本布局:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jiangkang<span class="token punctuation">.</span>flutter_system<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Color<span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ColorDrawable<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Looper<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Gravity<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token keyword">import</span> com<span class="token punctuation">.</span>airbnb<span class="token punctuation">.</span>lottie<span class="token punctuation">.</span>LottieAnimationView<span class="token keyword">import</span> com<span class="token punctuation">.</span>airbnb<span class="token punctuation">.</span>lottie<span class="token punctuation">.</span>LottieDrawable<span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>SplashScreen<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * A Splash Screen based lottie animation * it will pause 1s,then enter the main page */</span><span class="token keyword">class</span> LottieSplashScreen <span class="token operator">:</span> SplashScreen<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lottieRawIds <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie1<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie2<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie3<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie4<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie5<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie6<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie7<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie8    <span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">createSplashView</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> lottieView <span class="token operator">=</span> <span class="token function">LottieAnimationView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        lottieView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            repeatMode <span class="token operator">=</span> LottieDrawable<span class="token punctuation">.</span>RESTART            repeatCount <span class="token operator">=</span> LottieDrawable<span class="token punctuation">.</span>INFINITE            <span class="token function">setAnimation</span><span class="token punctuation">(</span>lottieRawIds<span class="token punctuation">[</span><span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lottieRawIds<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">playAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>context <span class="token keyword">as</span> Activity<span class="token punctuation">)</span><span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token function">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> layoutParamsLottie <span class="token operator">=</span> FrameLayout<span class="token punctuation">.</span><span class="token function">LayoutParams</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                    gravity <span class="token operator">=</span> Gravity<span class="token punctuation">.</span>CENTER                <span class="token punctuation">}</span>        <span class="token keyword">val</span> rootView <span class="token operator">=</span> <span class="token function">FrameLayout</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        rootView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            layoutParams <span class="token operator">=</span> FrameLayout<span class="token punctuation">.</span><span class="token function">LayoutParams</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span>            <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span>            <span class="token function">addView</span><span class="token punctuation">(</span>lottieView<span class="token punctuation">,</span>layoutParamsLottie<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rootView    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">transitionToFlutter</span><span class="token punctuation">(</span>onTransitionComplete<span class="token operator">:</span> Runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span>onTransitionComplete<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在MainActivity中重写一个方法即可:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>FlutterActivity<span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>SplashScreen<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">FlutterActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">provideSplashScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SplashScreen<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">LottieSplashScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Flutter Engine在新版本中使用了新的<code>FlutterActivity</code>,这一点稍微注意一下(我这里用的就是最新的).</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Splash Screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的ANativeWindow</title>
      <link href="/2020/06/19/android/android-zhong-de-anativewindow/"/>
      <url>/2020/06/19/android/android-zhong-de-anativewindow/</url>
      
        <content type="html"><![CDATA[<h2 id="ANativeWindow是什么"><a href="#ANativeWindow是什么" class="headerlink" title="ANativeWindow是什么"></a>ANativeWindow是什么</h2><p>ANativeWindow是C/C++中定义的一个结构体,等同于Java中的<code>Surface</code>.</p><p>Android NDK中可以访问到ANativeWindow.</p><p>ANativeWindow中存放像素信息的结构是:<code>ANativeWindow_Buffer</code>:</p><pre class=" language-c++"><code class="language-c++">typedef struct ANativeWindow_Buffer {    /// The number of pixels that are shown horizontally.    int32_t width;    /// The number of pixels that are shown vertically.    int32_t height;    /// The number of *pixels* that a line in the buffer takes in    /// memory. This may be >= width.    int32_t stride;    /// The format of the buffer. One of AHardwareBuffer_Format.    int32_t format;    /// The actual bits.    void* bits;    /// Do not touch.    uint32_t reserved[6];} ANativeWindow_Buffer;</code></pre><h2 id="主要API"><a href="#主要API" class="headerlink" title="主要API"></a>主要API</h2><ul><li><p>获取与surface对应的ANativeWindow</p><pre class=" language-c++"><code class="language-c++">ANativeWindow* ANativeWindow_fromSurface(JNIEnv* env, jobject surface);</code></pre></li><li><p>保持/释放ANativeWindow对象的引用</p><pre class=" language-c++"><code class="language-c++">void ANativeWindow_acquire(ANativeWindow* window);void ANativeWindow_release(ANativeWindow* window);</code></pre></li><li><p>向buffer中写入数据并提交</p><pre class=" language-c++"><code class="language-c++">int32_t ANativeWindow_lock(ANativeWindow* window, ANativeWindow_Buffer* outBuffer,        ARect* inOutDirtyBounds);// 这之间的代码可以执行一些向buffer中写入数据的操作int32_t ANativeWindow_unlockAndPost(ANativeWindow* window);</code></pre></li><li><p>获取Window Surface的信息:宽/高/像素格式</p><pre class=" language-c++"><code class="language-c++">int32_t ANativeWindow_getWidth(ANativeWindow* window);int32_t ANativeWindow_getHeight(ANativeWindow* window);int32_t ANativeWindow_getFormat(ANativeWindow* window);</code></pre><p>像素格式定义在<code>AHARDWAREBUFFER_FORMAT_*</code></p></li><li><p>改变Window Buffer的格式和大小</p><pre class=" language-c++"><code class="language-c++">int32_t ANativeWindow_setBuffersGeometry(ANativeWindow* window,        int32_t width, int32_t height, int32_t format);</code></pre></li></ul><h2 id="一般的流程"><a href="#一般的流程" class="headerlink" title="一般的流程"></a>一般的流程</h2><ol><li>通过<code>ANativeWindow_fromSurface</code>获取与Surface对应的<code>ANativeWindow</code>对象</li><li><code>ANativeWindow_setBuffersGeometry</code>设置buffer的尺寸和格式</li><li><code>ANativeWindow_acquire</code>获取引用对象</li><li>利用<code>ANativeWindow_lock/ANativeWindow_unlockAndPost</code>与之间的绘制代码绘制图像</li><li><code>ANativeWindow_release</code>释放引用.</li></ol><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>写个简单的例子:利用ANativeWindow绘制一个灰色的背景.</p><ul><li><p>C++代码</p><pre class=" language-c++"><code class="language-c++">#include <jni.h>#include <string>#include <android/native_window.h>#include <android/native_window_jni.h>void drawColor(JNIEnv *env,jobject obj,jobject surface, jint colorARGB) {    int alpha = colorARGB >> 24 & 0xFF;    int red = colorARGB >> 16 & 0xFF;    int green = colorARGB >> 8 & 0xFF;    int blue = colorARGB & 0xFF;    int colorABGR = alpha << 24 | (blue << 16) | (green << 8) | red;    ANativeWindow *window = ANativeWindow_fromSurface(env,surface);    int32_t result = ANativeWindow_setBuffersGeometry(window,640,640,AHARDWAREBUFFER_FORMAT_R8G8B8A8_UNORM);    if (result < 0){        ANativeWindow_release(window);        window = nullptr;        return;    }    ANativeWindow_acquire(window);    ANativeWindow_Buffer buffer;    if (ANativeWindow_lock(window,&buffer, nullptr) < 0){        ANativeWindow_release(window);        window = nullptr;        return;    }    auto *line = (uint32_t *) buffer.bits;    for (int y = 0; y < buffer.height; ++y) {        for (int x = 0; x < buffer.width; ++x) {            line[x] = colorABGR;        }        line += buffer.stride;    }    if (ANativeWindow_unlockAndPost(window) < 0){        return;    }    ANativeWindow_release(window);}extern "C"JNIEXPORT void JNICALLJava_com_jiangkang_androiddemos_MainActivity_drawColor(JNIEnv *env, jobject thiz, jobject surface,                                                       jint color) {    drawColor(env,thiz,surface,color);}</code></pre></li><li><p>Activity代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Color<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Surface<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>SurfaceHolder<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>android<span class="token punctuation">.</span>synthetic<span class="token punctuation">.</span>main<span class="token punctuation">.</span>activity_main<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        surface_view<span class="token punctuation">.</span>holder<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> SurfaceHolder<span class="token punctuation">.</span><span class="token function">Callback2</span> <span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceRedrawNeeded</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceChanged</span><span class="token punctuation">(</span>                holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">,</span>                format<span class="token operator">:</span> Int<span class="token punctuation">,</span>                width<span class="token operator">:</span> Int<span class="token punctuation">,</span>                height<span class="token operator">:</span> Int            <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceDestroyed</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceCreated</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                holder<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>                    <span class="token function">drawColor</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>surface<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    external <span class="token keyword">fun</span> <span class="token function">drawColor</span><span class="token punctuation">(</span>surface<span class="token operator">:</span> Surface<span class="token punctuation">,</span> color<span class="token operator">:</span> Int<span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">init</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"native-lib"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Native层中的<code>ANativeWindow</code>对应Java层中的<code>Surface</code>,因此可以利用SurfaceView + ANativeWindow,用C++代码绘制屏幕;</li><li>在图像/视频处理中会利用到<code>ANativeWindow</code>,也可以与EGL,FFMPEG等结合使用</li><li>Flutter Engine中正是通过 <code>ANativeWindow</code>才将Dart中的UI与Android中UI联系到一起的.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANativeWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用fork方式创建进程</title>
      <link href="/2020/06/15/c/linux-shi-yong-fork-fang-shi-chuang-jian-jin-cheng/"/>
      <url>/2020/06/15/c/linux-shi-yong-fork-fang-shi-chuang-jian-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork之前\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t fpid<span class="token punctuation">;</span>    fpid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fpid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error during fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fpid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"current process is child process : pid = %d,parent pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"current process is parent process : pid = %d,parent pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译执行后输出结果:</p><pre><code>fork之前fork之后current process is parent process : pid = 71370,parent pid = 62785fork之后current process is child process : pid = 71371,parent pid = 1</code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>fork 之前,只有一个进程在执行这段代码;</p><p>fork之后,就有两个基本上一模一样的进程了,都会执行fork行之后的代码;</p><p>而且可以看到两个进程的pid不一样,这是为什么?</p><p>fork是执行一次,返回两次,可能有三种返回值:</p><ul><li>在父进程中,fork返回新创建的子进程的pid;</li><li>在子进程中,fork返回0;</li><li>如果出现错误,fork返回一个负值;</li></ul><p>两个进程的执行没有固定的顺序,得看系统进程调度策略.</p><p>fork失败可能的原因是:</p><ul><li>进程数量达到最大限制</li><li>内存不足</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fork </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UART</title>
      <link href="/2020/06/13/ying-jian/uart/"/>
      <url>/2020/06/13/ying-jian/uart/</url>
      
        <content type="html"><![CDATA[<h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><p>Universal Asynchronous Receiver/Transmitter,即通用异步收发传输器</p><p>UART是一种串行(串口),异步,收发协议.</p><p>作用:将并行数据转换成串行数据,所谓串行就是一位一位的传输.</p><p>像GPS模块,LCD显示器等就是使用UART串口通信.</p><h2 id="为何说它是通用-异步的"><a href="#为何说它是通用-异步的" class="headerlink" title="为何说它是通用,异步的?"></a>为何说它是通用,异步的?</h2><p>说它是“通用”的,是因为数据传输速度和数据字节格式都是可以配置的;</p><p>说它是“异步”的,是因为它并没有使用时钟来同步两个设备之间的数据传输.</p><p>硬件设备一般会在FIFO缓存区中收集数据,直到APP读取数据.</p><p>UART也是全双工通信,即可以同时发送和接收数据,它通常比I2C快,但是由于缺少共享时钟,因此两个设备必须协商好传输速度.</p><h2 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h2><p>有两种方式:</p><ul><li><p>3线</p><p><img src="https://oss.jiangkang.tech/jk/uart-connections.png" alt=""></p></li><li><p>5线(硬件流控制)</p><p><img src="https://oss.jiangkang.tech/jk/uart-flow-control.png" alt="&quot;uart-flow-control&quot;"></p></li></ul><p>5线的模块新增了两个端口,一个是RTS(request to send),一个是CTS(clear to send)</p><h2 id="软件通信协议"><a href="#软件通信协议" class="headerlink" title="软件通信协议"></a>软件通信协议</h2><p><img src="https://oss.jiangkang.tech/jk/uart-frame.png" alt="&quot;uart-frame&quot;"></p><ul><li><p>空闲</p><p>总线空闲的时候,处于高电平“1”</p></li><li><p>起始位</p><p>开始传输数据前,发送一个低电平“0”,表示开始传输字符的开始</p></li><li><p>数据</p><p>数据可以是5~8位,更少的位表示字符可以提升传输效率 </p></li><li><p>校验位</p><p>可选的位,即可以不设置这个位.如果设置就是奇偶校验:</p><ul><li>奇校验(odd):数据位中“1”的个数是奇数,则为“0”,否则为“1”</li><li>偶校验(even):数据位中“1”的个数是偶数,则为“0”,否则为“1”</li></ul><p>也存在仅作为标记作用的“1”位,和空的校验位“0”</p></li><li><p>停止位</p><p>数据结束标志,可以是1,1.5,2位的高电平</p></li></ul><h2 id="波特率-baud-rate"><a href="#波特率-baud-rate" class="headerlink" title="波特率(baud rate)"></a>波特率(baud rate)</h2><p>通过UART传输数据的速度叫做波特率.它表示发送/接收的速度,单位是bit/s</p><p>因为使用UART连接的两个设备并没有使用共享时钟,因此必须提升设置好波特率.</p><p>常见的波特率有 9600, 19200, 38400, 57600, 115200, 和 921600.</p><p>这个速率包括整个数据帧(起始位,数据位,校验位,停止位),因此实际有效的传输率比设置的低.</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM架构基础知识</title>
      <link href="/2020/06/12/ying-jian/arm-jia-gou-ji-chu-zhi-shi/"/>
      <url>/2020/06/12/ying-jian/arm-jia-gou-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Architecture 中文可以是体系结构,也可以是架构,我这里用架构</p><p>一些专业术语可以在本科课程/书籍《计算机体系结构》中找到.</p></blockquote><h2 id="三种配置"><a href="#三种配置" class="headerlink" title="三种配置"></a>三种配置</h2><ul><li><p>A-Profile(Applications)</p><p>性能最高,用于运行复杂的操作系统,比如Linux,Windows</p></li><li><p>R-Profile(Real-time)</p><p>用于运行对实时性有要求的系统</p></li><li><p>M-Profile(Microcontroller)</p><p>低功耗,高能效,常用于一些IOT设备</p></li></ul><p>Arm Cortex是一个Arm处理器IP产品(硬件中的知识产权核,可以类比为模块设计)的品牌.</p><p><img src="https://oss.jiangkang.tech/jk/arm.png" alt="arm"></p><h2 id="ARM架构是什么"><a href="#ARM架构是什么" class="headerlink" title="ARM架构是什么?"></a>ARM架构是什么?</h2><p>所谓Arm架构说的就是Arm处理器的功能规范,它有什么指令集,指令集都做些什么.</p><p>可以把Arm架构当作是硬件与软件间的一种协议,描述了软件可以使用哪些硬件提供的功能.</p><p>架构一般会指定下面这些内容:</p><ul><li>指令集(Instruction set)<ul><li>每个指令的功能</li><li>指令在内存中是如何表示的(指令的编码)</li></ul></li><li>寄存器集(Register set)<ul><li>有多少个寄存器</li><li>寄存器的大小</li><li>寄存器的功能</li><li>寄存器的初始化状态</li></ul></li><li>异常模型(Exception model)<ul><li>不同级别的特权</li><li>异常的类型</li><li>当从一个异常返回时会发生什么</li></ul></li><li>内存模型(Memory model)<ul><li>内存访问的顺序</li><li>缓存的运行方式,软件应该什么时候,怎么显示的维护缓存</li></ul></li><li>调试,跟踪,性能相关(Debug, trace, and profiling)<ul><li>如何设置和触发断点</li><li>trace工具可以以什么格式,捕获什么信息</li></ul></li></ul><h2 id="架构与微架构"><a href="#架构与微架构" class="headerlink" title="架构与微架构"></a>架构与微架构</h2><p>架构不会描述处理器是如何构建和工作的.</p><p>处理器的构建(实现)和设计称为微架构.微架构会告诉你一个处理器是如何工作的.</p><p>微架构包含以下内容:</p><ul><li>流水线(pipeline)的长度和布局</li><li>缓存的数量和大小</li><li>单个指令的循环计数</li><li>实现了哪些可选的特性</li></ul><p>比如Cortex-A53和Cortex-A72都是Armv8-A架构的实现.也就是说它们拥有相同的架构,不同的微架构.</p><p><img src="https://oss.jiangkang.tech/jk/cortext.png" alt="image-20200612231401573"></p><p>上面这张图描述的就是微架构.</p><p>在架构上兼容的软件可以在Cortex-A53和Cortex-A72上运行,而无需修改,因为它们实现了相同的架构.</p><h2 id="Arm架构的开发"><a href="#Arm架构的开发" class="headerlink" title="Arm架构的开发"></a>Arm架构的开发</h2><p>Arm架构是与时俱进,不断改进的,每个版本都是建立在以前的基础之上的.</p><p>比如常见的Armv8-A架构,意思是A系列的第8版架构,也可缩写成V8-A</p><p><img src="https://oss.jiangkang.tech/jk/arm%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.png" alt="image-20200612232247179"></p><p>Armv8-A架构是一个里程碑.因为它使用的是64位(同时兼容32位),而它之前的版本都是32位(v5,v6,v7).</p><h2 id="其他架构"><a href="#其他架构" class="headerlink" title="其他架构"></a>其他架构</h2><p>除了arm架构,也有其他架构:</p><p><img src="https://oss.jiangkang.tech/jk/server-arm.png" alt="image-20200612233518408"></p><p>比如用于服务端的架构.</p><h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><ul><li>Arm架构参考手册( Reference Manual ):描述架构规范</li><li>每个Arm Cortex处理器都有一个技术参考手册(Reference Manual,TRM):描述了处理器的特点,通常不会重复arm架构参考手册的内容</li><li>每个Arm Cortex处理器都有一个配置或者集成参考手册(CIM):描述了如何将处理器集成到系统中,通常这个文档只与Soc设计者相关,并且只对有IP授权的厂商可用(但是没有license也可以下载)</li></ul><p>上面这三种文档都不会告诉你如何使用处理器(这部分内容在指南中,即Guides)</p><h2 id="通用架构术语"><a href="#通用架构术语" class="headerlink" title="通用架构术语"></a>通用架构术语</h2><p>架构描述中有许多简写,也就是术语.</p><h3 id="PE-Processing-Element-处理单元"><a href="#PE-Processing-Element-处理单元" class="headerlink" title="PE(Processing Element)/处理单元"></a>PE(Processing Element)/处理单元</h3><p>PE是一个Arm架构实现的通用术语,任何有它自己的程序计数器,并且可以执行一个程序的东西都可以看作是一个PE.</p><p>同一个架构可能有多种微架构实现,比如Arm Cortex-A处理器的微架构可以是:</p><ul><li>Cortex-A8是一个单核,单线程处理器,整个处理器就是一个PE</li><li>Cortex-A53是一个多核处理器,每个核是一个单线程,每个核就是一个PE</li><li>Cortex-A53AE是一个多核处理器,每个核有两个线程,每个线程就是一个PE.</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.arm.com/" target="_blank" rel="noopener">https://developer.arm.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM架构 </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOSP的编译</title>
      <link href="/2020/06/12/android/aosp-de-bian-yi/"/>
      <url>/2020/06/12/android/aosp-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<p>aosp现在使用soong编译工具进行编译了,比之前的老版本编译要容易方便得多了.</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>配置好repo等工具</li><li>下载aosp源码</li><li>开始编译</li><li>模拟器演示或者刷写到真实设备上</li></ol><p>其实这几个步骤都没什么好说的.第一二步按照要求下载工具和源码即可,当然最好有一个科学上网的环境,不行的化用清华的镜像源也是可以的.</p><h2 id="查看分支-切换分支"><a href="#查看分支-切换分支" class="headerlink" title="查看分支/切换分支"></a>查看分支/切换分支</h2><p>在已经下载好源码之后:</p><ul><li><p>查看分支</p><pre class=" language-shell"><code class="language-shell">cd .repo/manifestsgit branch -a | cut -d / -f 3</code></pre></li><li><p>切换分支</p><pre class=" language-shell"><code class="language-shell">repo checkout xx_branch</code></pre></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>进入源码根目录,然后执行:</p><pre class=" language-shell"><code class="language-shell">. build/envsetup.sh</code></pre><pre class=" language-shell"><code class="language-shell">lunch</code></pre><p>这一步会让你选择构建的Android系统类型</p><pre class=" language-shell"><code class="language-shell">m droid</code></pre><p>大概需要编译10万个C/C++文件,耗时1~4个小时.</p><h2 id="编译时可能出现的问题"><a href="#编译时可能出现的问题" class="headerlink" title="编译时可能出现的问题"></a>编译时可能出现的问题</h2><ol><li><p>大小写敏感的磁盘格式问题</p><p>Android官方文档有格式化的办法<a href="https://source.android.google.cn/setup/build/initializing?hl=zh-cn" target="_blank" rel="noopener">构建编译环境</a></p></li><li><p>too many files</p><p>我用的是MacOS,出现这种问题是因为系统对打开的文件个数有限制.</p><p>可以在环境变量中设置最大打开文件的个数(.bash_profile,或者.zshrc之类的):</p><pre class=" language-shell"><code class="language-shell"># set the number of open files to be 1024ulimit -S -n 2048</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开机动画分析</title>
      <link href="/2020/06/12/android/android-kai-ji-dong-hua-fen-xi/"/>
      <url>/2020/06/12/android/android-kai-ji-dong-hua-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="开机动画"><a href="#开机动画" class="headerlink" title="开机动画"></a>开机动画</h2><p>系统会按照下面的顺序选择一个开机动画资源(一个zip文件,比如bootanimation.zip):</p><pre><code>/system/media/bootanimation-encrypted.zip (if getprop(&quot;vold.decrypt&quot;) = &#39;1&#39;)/system/media/bootanimation.zip/oem/media/bootanimation.zip</code></pre><p>开机动画资源的文件结构如下:</p><pre><code>desc.txt - 一个文本文件part0  \part1   \  PNG图片帧存放的文件夹...     /partN  /</code></pre><p>其中desc.txt的内容如下:</p><pre><code>1080 1920 60c 1   90 part0 #FFFFFF -1c 1   0  part1 #FFFFFF -1p 240 0  part2 #FFFFFF -1p 0   0  part3 #FFFFFF -1</code></pre><p>第一行的格式为:</p><pre><code>WIDTH HEIGHT FPS</code></pre><p>分别表示,图片宽,高,帧率.</p><p>后面几行的格式为:</p><pre><code>TYPE COUNT PAUSE PATH [#RGBHEX [CLOCK1 [CLOCK2]]]</code></pre><p><code>TYPE</code>是动画片段的类型:</p><ul><li>p表示会播放动画,直到启动完毕被中断</li><li>c表示把片段播放完就结束.</li></ul><p><code>COUNT</code>表示片段播放多少次,0表示循环播放直到启动完毕.</p><p><code>PAUSE</code>表示这部分片段播放完之后要延迟的帧数.</p><p><code>PATH</code>表示动画片段所在的文件夹</p><p><code>RGBHEX</code>表示一个背景色(可选的).</p><p><code>CLOCK1 CLOCK2</code>表示绘制的当前时间的坐标(可选的),</p><p>在片段文件夹中,有一个trim.txt的文本文件,用于指定图片尺寸和坐标:</p><pre><code>186x266+447+885186x266+447+885186x266+447+885186x266+447+885186x266+447+885</code></pre><p>格式为:<code>WxH+X+Y</code></p><p>如果想自定义开机动画,或者看一下具体的动画资源格式,可以开启个模拟器,或者找一个root的手机.</p><p>可以调用以下代码手动执行以下<code>bootanimation</code>程序,显示开机动画(需要root或者模拟器):</p><pre class=" language-shell"><code class="language-shell">adb shellsucd /system/binbootanimation</code></pre><blockquote><p>开机动画资源的格式文档在这里:<code>frameworks/base/cmds/bootanimation/FORMAT.md</code></p><p>源码路径为:<code>frameworks/base/cmds/bootanimation</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android开机动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程分析</title>
      <link href="/2020/06/12/android/android-xi-tong-qi-dong-liu-cheng-fen-xi/"/>
      <url>/2020/06/12/android/android-xi-tong-qi-dong-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Boot-ROM"><a href="#Boot-ROM" class="headerlink" title="Boot ROM"></a>Boot ROM</h2><p>当按下电源键,硬件上电之后,会从一个固定的内存区域读取程序.这个程序是烧写到硬件上的(ROM),用于将bootloader加载到RAM中,并开始执行它.</p><h2 id="bootloader"><a href="#bootloader" class="headerlink" title="bootloader"></a>bootloader</h2><p>bootloader用于告诉设备如何找到系统内核,和启动内核.</p><p>手机厂商一般会在bootloader中加上密钥锁和一些限制.</p><p>bootloader执行一般分为两个阶段:</p><ol><li>检测外部RAM内存,并加载一段bootloader代码用于第二阶段的执行</li><li>设置运行内核所需要的网络和内存等.</li></ol><p>高通芯片提供的<a href="https://github.com/littlekernel/lk" target="_blank" rel="noopener">LK</a>,就可以作为一个Android的bootloader.</p><p>常见的bootloader有:</p><ul><li>U-boot</li><li>LK</li></ul><h2 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h2><p>Android使用的linux kernel,当kernel启动时,会执行一系列的初始化操作,比如设置缓存,内存,加载驱动程序,挂载根文件系统,初始化输入输出等.</p><p>当内核启动完成之后,第一件要做的事就是在系统文件中找一个“init”,作为根进程或者第一个系统进程.</p><p>看一下linux kernel的源码,找一个arm64架构开始分析:</p><ul><li><p>入口在<code>arch/arm64/kernel/head.S</code>中</p><pre class=" language-assembly"><code class="language-assembly">    __INIT    /*     * The following callee saved general purpose registers are used on the     * primary lowlevel boot path:     *     *  Register   Scope                      Purpose     *  x21        stext() .. start_kernel()  FDT pointer passed at boot in x0     *  x23        stext() .. start_kernel()  physical misalignment/KASLR offset     *  x28        __create_page_tables()     callee preserved temp register     *  x19/x20    __primary_switch()         callee preserved temp registers     *  x24        __primary_switch() .. relocate_kernel()     *                                        current RELR displacement     */SYM_CODE_START(stext)    bl    preserve_boot_args    bl    el2_setup            // Drop to EL1, w0=cpu_boot_mode    adrp    x23, __PHYS_OFFSET    and    x23, x23, MIN_KIMG_ALIGN - 1    // KASLR offset, defaults to 0    bl    set_cpu_boot_mode_flag    bl    __create_page_tables    /*     * The following calls CPU setup code, see arch/arm64/mm/proc.S for     * details.     * On return, the CPU will be ready for the MMU to be turned on and     * the TCR will have been set.     */    mov    x0, #ARM64_CPU_BOOT_PRIMARY    bl    __cpu_setup            // initialise processor    b    __primary_switchSYM_CODE_END(stext)/* * The following fragment of code is executed with the MMU enabled. * *   x0 = __PHYS_OFFSET */SYM_FUNC_START_LOCAL(__primary_switched)    adrp    x4, init_thread_union    add    sp, x4, #THREAD_SIZE    adr_l    x5, init_task    msr    sp_el0, x5            // Save thread_info    adr_l    x8, vectors            // load VBAR_EL1 with virtual    msr    vbar_el1, x8            // vector table address    isb    stp    xzr, x30, [sp, #-16]!    mov    x29, sp    str_l    x21, __fdt_pointer, x5        // Save FDT pointer    ldr_l    x4, kimage_vaddr        // Save the offset between    sub    x4, x4, x0            // the kernel virtual and    str_l    x4, kimage_voffset, x5        // physical mappings    // Clear BSS    adr_l    x0, __bss_start    mov    x1, xzr    adr_l    x2, __bss_stop    sub    x2, x2, x0    bl    __pi_memset    dsb    ishst                // Make zero page visible to PTW#ifdef CONFIG_KASAN    bl    kasan_early_init#endif#ifdef CONFIG_RANDOMIZE_BASE    tst    x23, ~(MIN_KIMG_ALIGN - 1)    // already running randomized?    b.ne    0f    mov    x0, x21                // pass FDT address in x0    bl    kaslr_early_init        // parse FDT for KASLR options    cbz    x0, 0f                // KASLR disabled? just proceed    orr    x23, x23, x0            // record KASLR offset    ldp    x29, x30, [sp], #16        // we must enable KASLR, return    ret                    // to __primary_switch()0:#endif    add    sp, sp, #16    mov    x29, #0    mov    x30, #0    b    start_kernelSYM_FUNC_END(__primary_switched)</code></pre><p><code>_INIT</code>步骤下,执行<code>stext</code>,会执行到<code>__primary_switched</code>,然后执行到<code>start_kernel</code>,这里的<code>start_kernel</code>就是内核C代码的入口.</p><p>这个时候“0号”进程“swapper”(一个Idle进程)已经启动了(init_task.c中调用).</p></li><li><p>启动内核(C代码层面)</p><p><code>start_kernel</code>是在<code>init/main.c</code>中定义的:</p><pre class=" language-c"><code class="language-c">asmlinkage __visible <span class="token keyword">void</span> __init <span class="token function">start_kernel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></code></pre><p>这里会进行很多的初始化操作.最后会执行内核初始化操作,创建init进程:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> __ref <span class="token function">kernel_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">kernel_init_freeable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* need to finish all async __init code before freeing the memory */</span>    <span class="token function">async_synchronize_full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ftrace_free_init_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free_initmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mark_readonly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Kernel mappings are now finalized - update the userspace page-table     * to finalize PTI.     */</span>    <span class="token function">pti_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    system_state <span class="token operator">=</span> SYSTEM_RUNNING<span class="token punctuation">;</span>    <span class="token function">numa_default_policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rcu_end_inkernel_boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ramdisk_execute_command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token function">run_init_process</span><span class="token punctuation">(</span>ramdisk_execute_command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">"Failed to execute %s (error %d)\n"</span><span class="token punctuation">,</span>               ramdisk_execute_command<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * We try each of these until one succeeds.     *     * The Bourne shell can be used instead of init if we are     * trying to recover a really broken machine.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token function">run_init_process</span><span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Requested init %s failed (error %d)."</span><span class="token punctuation">,</span>              execute_command<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/sbin/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/etc/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"No working init found.  Try passing init= option to kernel. "</span>          <span class="token string">"See Linux Documentation/admin-guide/init.rst for guidance."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个时候init进程就已经起来了.</p><p>最后执行的那几个<code>try_to_run_init_process</code>会将init进程从内核态转换成用户态.(从核心线程变成了/sbin/init的普通进程)</p></li></ul><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>源码在:<code>system/core/init/main.cpp</code></p><p>进程位置:<code>/system/core/init</code></p><p>init进程是<strong>用户空间的</strong>第一个进程,也是所有进程的“祖父”进程.</p><p>init进程主要负责两件事:</p><ul><li>挂载(mount) /sys, /dev 或者/proc等文件</li><li>运行/init.rc脚本,<code>init.rc</code>负责系统的初始化设置.</li></ul><p><a href="https://android.googlesource.com/platform/system/core/+/refs/heads/master/init/" target="_blank" rel="noopener">init.rc格式说明</a></p><p>init.rc位置:<code>/system/core/rootdir/init.rc</code></p><p><code>init.rc</code>脚本会启动servicemanager,创建zygote进程(fork方式).</p><p><code>init.rc</code>中会引用<code>import /system/etc/init/hw/init.${ro.zygote}.rc</code>,这里根据架构不同,分为三个文件:</p><ul><li>init.zygote32.rc</li><li>init.zygote64.rc</li><li>init.zygote64_32.rc</li></ul><p>其中定义了zygote服务:</p><pre><code>service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    socket usap_pool_primary stream 660 root system    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasks</code></pre><p><code>servicemanager.rc</code>则定义了servicemanager服务:</p><pre><code>service servicemanager /system/bin/servicemanager    class core animation    user system    group system readproc    critical    onrestart restart healthd    onrestart restart zygote    onrestart restart audioserver    onrestart restart media    onrestart restart surfaceflinger    onrestart restart inputflinger    onrestart restart drm    onrestart restart cameraserver    onrestart restart keystore    onrestart restart gatekeeperd    onrestart restart thermalservice    writepid /dev/cpuset/system-background/tasks    shutdown critical</code></pre><h2 id="Zygote-and-VM"><a href="#Zygote-and-VM" class="headerlink" title="Zygote and VM"></a>Zygote and VM</h2><p>从上面的zygote服务定义来看,会通过app_process来创建zygote进程:</p><pre class=" language-shell"><code class="language-shell">/system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</code></pre><p>这个命令行的格式如下:</p><pre class=" language-shell"><code class="language-shell">app_process [java-options] cmd-dir start-class-name [options]</code></pre><p>可以看出来,<code>-Xzygote</code>是java-options,命令行程序位置在/system/bin下,<code>--zygote --start-system-server</code>则为传入的选项.</p><p><code>app_process64</code>实际上是一个单独的程序,源码入口在<code>frameworks/base/cmds/app_process/app_main.cpp</code></p><p>其中的main方法中会执行:</p><pre class=" language-c++"><code class="language-c++">runtime.start("com.android.internal.os.ZygoteInit", args, zygote);</code></pre><p>这个命令首先会创建一个VM,然后调用ZygoteInit.java的main方法.Zygote接收到一个请求,会通过<code>/dev/socket/zygote</code>启动一个进程,即触发<code>fork</code>调用,创建Zygote进程.</p><p>runtime实际上就是<code>AndroidRuntime</code>,源码在<code>frameworks/base/core/jni/AndroidRuntime.cpp</code>,在它的start方法中,主要处理两件事:</p><ul><li><ol><li><p>启动虚拟机</p><pre class=" language-c++"><code class="language-c++">    /* start the virtual machine */    JniInvocation jni_invocation;    jni_invocation.Init(NULL);    JNIEnv* env;    if (startVm(&mJavaVM, &env, zygote, primary_zygote) != 0) {        return;    }    onVmCreated(env);    /*     * Register android functions.     */    if (startReg(env) < 0) {        ALOGE("Unable to register all android natives\n");        return;    }</code></pre><p><code>startVM</code>中会启动Dalvik虚拟机(为什么不是ART虚拟机),并初始化JNI环境:</p><pre class=" language-c++"><code class="language-c++">  /*     * Initialize the VM.     *     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.     * If this call succeeds, the VM is ready, and we can start issuing     * JNI calls.     */    if (JNI_CreateJavaVM(pJavaVM, pEnv, &initArgs) < 0) {        ALOGE("JNI_CreateJavaVM failed\n");        return -1;    }</code></pre><p>然后就是注册系统库中的JNI方法:</p><pre class=" language-c++"><code class="language-c++">/* * 注册Android JNI方法 *//*static*/ int AndroidRuntime::startReg(JNIEnv* env){    if (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) < 0) {        env->PopLocalFrame(NULL);        return -1;    }    return 0;}// 这里就是要注册的系统JNI方法static const RegJNIRec gRegJNI[] = {    REG_JNI(register_com_android_internal_os_RuntimeInit),    REG_JNI(register_com_android_internal_os_ZygoteInit_nativeZygoteInit),    REG_JNI(register_android_os_SystemClock),    REG_JNI(register_android_util_EventLog),    REG_JNI(register_android_util_Log),    REG_JNI(register_android_util_MemoryIntArray),    REG_JNI(register_android_util_PathParser),    REG_JNI(register_android_util_StatsLog),    REG_JNI(register_android_util_StatsLogInternal),    REG_JNI(register_android_app_admin_SecurityLog),    REG_JNI(register_android_content_AssetManager),    REG_JNI(register_android_content_StringBlock),    REG_JNI(register_android_content_XmlBlock),    REG_JNI(register_android_content_res_ApkAssets),    REG_JNI(register_android_text_AndroidCharacter),    REG_JNI(register_android_text_Hyphenator),    REG_JNI(register_android_view_InputDevice),    REG_JNI(register_android_view_KeyCharacterMap),    REG_JNI(register_android_os_Process),    REG_JNI(register_android_os_SystemProperties),    REG_JNI(register_android_os_Binder),    REG_JNI(register_android_os_Parcel),    REG_JNI(register_android_os_HidlMemory),    REG_JNI(register_android_os_HidlSupport),    REG_JNI(register_android_os_HwBinder),    REG_JNI(register_android_os_HwBlob),    REG_JNI(register_android_os_HwParcel),    REG_JNI(register_android_os_HwRemoteBinder),    REG_JNI(register_android_os_NativeHandle),    REG_JNI(register_android_os_VintfObject),    REG_JNI(register_android_os_VintfRuntimeInfo),    REG_JNI(register_android_graphics_Canvas),    // This needs to be before register_android_graphics_Graphics, or the latter    // will not be able to find the jmethodID for ColorSpace.get().    REG_JNI(register_android_graphics_ColorSpace),    REG_JNI(register_android_graphics_Graphics),    REG_JNI(register_android_view_DisplayEventReceiver),    REG_JNI(register_android_view_RenderNode),    REG_JNI(register_android_view_RenderNodeAnimator),    REG_JNI(register_android_view_DisplayListCanvas),    REG_JNI(register_android_view_InputApplicationHandle),    REG_JNI(register_android_view_InputWindowHandle),    REG_JNI(register_android_view_TextureLayer),    REG_JNI(register_android_view_ThreadedRenderer),    REG_JNI(register_android_view_Surface),    REG_JNI(register_android_view_SurfaceControl),    REG_JNI(register_android_view_SurfaceSession),    REG_JNI(register_android_view_CompositionSamplingListener),    REG_JNI(register_android_view_TextureView),    REG_JNI(register_com_android_internal_view_animation_NativeInterpolatorFactoryHelper),    REG_JNI(register_com_google_android_gles_jni_EGLImpl),    REG_JNI(register_com_google_android_gles_jni_GLImpl),    REG_JNI(register_android_opengl_jni_EGL14),    REG_JNI(register_android_opengl_jni_EGL15),    REG_JNI(register_android_opengl_jni_EGLExt),    REG_JNI(register_android_opengl_jni_GLES10),    REG_JNI(register_android_opengl_jni_GLES10Ext),    REG_JNI(register_android_opengl_jni_GLES11),    REG_JNI(register_android_opengl_jni_GLES11Ext),    REG_JNI(register_android_opengl_jni_GLES20),    REG_JNI(register_android_opengl_jni_GLES30),    REG_JNI(register_android_opengl_jni_GLES31),    REG_JNI(register_android_opengl_jni_GLES31Ext),    REG_JNI(register_android_opengl_jni_GLES32),    REG_JNI(register_android_graphics_Bitmap),    REG_JNI(register_android_graphics_BitmapFactory),    REG_JNI(register_android_graphics_BitmapRegionDecoder),    REG_JNI(register_android_graphics_ByteBufferStreamAdaptor),    REG_JNI(register_android_graphics_Camera),    REG_JNI(register_android_graphics_CreateJavaOutputStreamAdaptor),    REG_JNI(register_android_graphics_CanvasProperty),    REG_JNI(register_android_graphics_ColorFilter),    REG_JNI(register_android_graphics_DrawFilter),    REG_JNI(register_android_graphics_FontFamily),    REG_JNI(register_android_graphics_GraphicBuffer),    REG_JNI(register_android_graphics_ImageDecoder),    REG_JNI(register_android_graphics_drawable_AnimatedImageDrawable),    REG_JNI(register_android_graphics_Interpolator),    REG_JNI(register_android_graphics_MaskFilter),    REG_JNI(register_android_graphics_Matrix),    REG_JNI(register_android_graphics_Movie),    REG_JNI(register_android_graphics_NinePatch),    REG_JNI(register_android_graphics_Paint),    REG_JNI(register_android_graphics_Path),    REG_JNI(register_android_graphics_PathMeasure),    REG_JNI(register_android_graphics_PathEffect),    REG_JNI(register_android_graphics_Picture),    REG_JNI(register_android_graphics_Region),    REG_JNI(register_android_graphics_Shader),    REG_JNI(register_android_graphics_SurfaceTexture),    REG_JNI(register_android_graphics_Typeface),    REG_JNI(register_android_graphics_YuvImage),    REG_JNI(register_android_graphics_drawable_AnimatedVectorDrawable),    REG_JNI(register_android_graphics_drawable_VectorDrawable),    REG_JNI(register_android_graphics_fonts_Font),    REG_JNI(register_android_graphics_fonts_FontFamily),    REG_JNI(register_android_graphics_pdf_PdfDocument),    REG_JNI(register_android_graphics_pdf_PdfEditor),    REG_JNI(register_android_graphics_pdf_PdfRenderer),    REG_JNI(register_android_graphics_text_MeasuredText),    REG_JNI(register_android_graphics_text_LineBreaker),    REG_JNI(register_android_database_CursorWindow),    REG_JNI(register_android_database_SQLiteConnection),    REG_JNI(register_android_database_SQLiteGlobal),    REG_JNI(register_android_database_SQLiteDebug),    REG_JNI(register_android_os_Debug),    REG_JNI(register_android_os_FileObserver),    REG_JNI(register_android_os_GraphicsEnvironment),    REG_JNI(register_android_os_MessageQueue),    REG_JNI(register_android_os_SELinux),    REG_JNI(register_android_os_Trace),    REG_JNI(register_android_os_UEventObserver),    REG_JNI(register_android_net_LocalSocketImpl),    REG_JNI(register_android_net_NetworkUtils),    REG_JNI(register_android_os_MemoryFile),    REG_JNI(register_android_os_SharedMemory),    REG_JNI(register_com_android_internal_os_ClassLoaderFactory),    REG_JNI(register_com_android_internal_os_Zygote),    REG_JNI(register_com_android_internal_os_ZygoteInit),    REG_JNI(register_com_android_internal_util_VirtualRefBasePtr),    REG_JNI(register_android_hardware_Camera),    REG_JNI(register_android_hardware_camera2_CameraMetadata),    REG_JNI(register_android_hardware_camera2_legacy_LegacyCameraDevice),    REG_JNI(register_android_hardware_camera2_legacy_PerfMeasurement),    REG_JNI(register_android_hardware_camera2_DngCreator),    REG_JNI(register_android_hardware_HardwareBuffer),    REG_JNI(register_android_hardware_SensorManager),    REG_JNI(register_android_hardware_SerialPort),    REG_JNI(register_android_hardware_SoundTrigger),    REG_JNI(register_android_hardware_UsbDevice),    REG_JNI(register_android_hardware_UsbDeviceConnection),    REG_JNI(register_android_hardware_UsbRequest),    REG_JNI(register_android_hardware_location_ActivityRecognitionHardware),    REG_JNI(register_android_media_AudioEffectDescriptor),    REG_JNI(register_android_media_AudioSystem),    REG_JNI(register_android_media_AudioRecord),    REG_JNI(register_android_media_AudioTrack),    REG_JNI(register_android_media_AudioAttributes),    REG_JNI(register_android_media_AudioProductStrategies),    REG_JNI(register_android_media_AudioVolumeGroups),    REG_JNI(register_android_media_AudioVolumeGroupChangeHandler),    REG_JNI(register_android_media_MicrophoneInfo),    REG_JNI(register_android_media_RemoteDisplay),    REG_JNI(register_android_media_ToneGenerator),    REG_JNI(register_android_media_midi),    REG_JNI(register_android_opengl_classes),    REG_JNI(register_android_server_NetworkManagementSocketTagger),    REG_JNI(register_android_ddm_DdmHandleNativeHeap),    REG_JNI(register_android_backup_BackupDataInput),    REG_JNI(register_android_backup_BackupDataOutput),    REG_JNI(register_android_backup_FileBackupHelperBase),    REG_JNI(register_android_backup_BackupHelperDispatcher),    REG_JNI(register_android_app_backup_FullBackup),    REG_JNI(register_android_app_Activity),    REG_JNI(register_android_app_ActivityThread),    REG_JNI(register_android_app_NativeActivity),    REG_JNI(register_android_util_jar_StrictJarFile),    REG_JNI(register_android_view_InputChannel),    REG_JNI(register_android_view_InputEventReceiver),    REG_JNI(register_android_view_InputEventSender),    REG_JNI(register_android_view_InputQueue),    REG_JNI(register_android_view_KeyEvent),    REG_JNI(register_android_view_MotionEvent),    REG_JNI(register_android_view_PointerIcon),    REG_JNI(register_android_view_VelocityTracker),    REG_JNI(register_android_content_res_ObbScanner),    REG_JNI(register_android_content_res_Configuration),    REG_JNI(register_android_animation_PropertyValuesHolder),    REG_JNI(register_android_security_Scrypt),    REG_JNI(register_com_android_internal_content_NativeLibraryHelper),    REG_JNI(register_com_android_internal_os_AtomicDirectory),    REG_JNI(register_com_android_internal_os_FuseAppLoop),    REG_JNI(register_com_android_internal_os_KernelCpuUidBpfMapReader),    REG_JNI(register_com_android_internal_os_KernelSingleUidTimeReader),};</code></pre></li><li><p>调用ZygoteInit.java的main方法,创建zygote进程,和systemserver进程.</p><p>先看AndroidRuntime.cpp中是如何调用ZygoteInit.java中的main()方法的:</p><pre class=" language-c++"><code class="language-c++">// 拿到main方法jmethodID startMeth = env->GetStaticMethodID(startClass, "main",            "([Ljava/lang/String;)V");        if (startMeth == NULL) {            ALOGE("JavaVM unable to find main() in '%s'\n", className);            /* keep going */        } else {            // 调用main方法            env->CallStaticVoidMethod(startClass, startMeth, strArray);#if 0            if (env->ExceptionCheck())                threadExitUncaughtException(env);#endif        }</code></pre><p>可以看出来同样是通过jni调用.</p><p>进入ZygoteInit.java看一下main()方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Zygote goes into its own process group.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Os<span class="token punctuation">.</span><span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ErrnoException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to setpgid(0,0)"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> Runnable caller<span class="token punctuation">;</span> zygoteServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteServer</span><span class="token punctuation">(</span>isPrimaryZygote<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>startSystemServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Runnable r <span class="token operator">=</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>abiList<span class="token punctuation">,</span> zygoteSocketName<span class="token punctuation">,</span> zygoteServer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// {@code r == null} in the parent (zygote) process, and {@code r != null} in the</span>                <span class="token comment" spellcheck="true">// child (system_server) process.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The select loop returns early in the child process after a fork and</span>            <span class="token comment" spellcheck="true">// loops forever in the zygote.</span>            caller <span class="token operator">=</span> zygoteServer<span class="token punctuation">.</span><span class="token function">runSelectLoop</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// We're in the child process and have exited the select loop. Proceed to execute the</span>        <span class="token comment" spellcheck="true">// command.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            caller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>可以看到,这里会创建ZygoteServer,进入Zygote进程,并通过zygote进程fork System Server进程:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/* Request to fork the system server process */</span>            pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkSystemServer</span><span class="token punctuation">(</span>                    parsedArgs<span class="token punctuation">.</span>mUid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGid<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mGids<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mRuntimeFlags<span class="token punctuation">,</span>                    null<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mPermittedCapabilities<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mEffectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Zygote.java</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits<span class="token punctuation">,</span> <span class="token keyword">long</span> permittedCapabilities<span class="token punctuation">,</span> <span class="token keyword">long</span> effectiveCapabilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">preFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">nativeForkSystemServer</span><span class="token punctuation">(</span>                uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span>                permittedCapabilities<span class="token punctuation">,</span> effectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the Java Language thread priority to the default value for new apps.</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">postForkCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Zygote是一个VM进程,这个时候就进入了Java世界了.System Server进程也创建了.</p></li></ol></li></ul><h2 id="System-Servers"><a href="#System-Servers" class="headerlink" title="System Servers"></a>System Servers</h2><p>既然system server是一个进程,那么通常也有一个main()方法作为入口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * The main entry point from zygote.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>主要做的工作都在<code>run</code>方法中:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 切换runtime,即dalvik 还是 art</span>  SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.dalvik.vm.lib.2"</span><span class="token punctuation">,</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">vmLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化native service</span>  System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"android_servers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化系统context.</span>  <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  创建 system service manager.</span>  mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setStartInfo</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">,</span>  mRuntimeStartElapsedTime<span class="token punctuation">,</span> mRuntimeStartUptime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 启动service</span>  <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的服务分为三种:</p><ul><li>Bootstrap Service</li><li>Core Service</li><li>Other Service</li></ul><p>每个类型的服务数量都非常之多,并且服务直接的启动顺序是有讲究的.</p><h2 id="启动完成"><a href="#启动完成" class="headerlink" title="启动完成"></a>启动完成</h2><p>在一些基础的Service启动完成之后,会执行一些Service的systemReady()方法,进一步执行app进程可以干的事.</p><p>在ActivityManagerService中,调用finishBooting()方法,也就意味着启动完成.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finishBooting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Let the ART runtime in zygote and system_server know that the boot completed.</span>        <span class="token comment" spellcheck="true">// 让zygote中的ART虚拟机 和system server进程知道启动已经完成</span>        ZYGOTE_PROCESS<span class="token punctuation">.</span><span class="token function">bootCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">bootCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 让系统Service知道已经启动完成</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startBootPhase</span><span class="token punctuation">(</span>SystemService<span class="token punctuation">.</span>PHASE_BOOT_COMPLETED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="启动Launch-App-桌面"><a href="#启动Launch-App-桌面" class="headerlink" title="启动Launch App(桌面)"></a>启动Launch App(桌面)</h2><p>ActivityManagerService启动完毕之后,会通过默认的”homeIntent”启动Launch App.</p><p>LaunchAPP启动完毕之后,会发送启动完成的广播,供应用监听.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>启动流程分为以下几个步骤:<ol><li>按下电源开关,CPU上电,开始读取固化在ROM中的一段代码,将bootloader代码载入内存,并开始执行</li><li>bootloader执行一些硬件初始化操作,并启动Linux kernel</li><li>Linux kernel 进行各种初始化之后,创建一个init进程,并转移到用户态</li><li>init进程会读取init.rc中的配置文件,启动各种服务,包括使用bootannimation程序开启开机动画,使用app_process程序创建虚拟机和Zygote进程,Zygote进程是VM中第一个进程.</li><li>Zygote会初始化JNI环境,注册一些预置的JNI方法,并创建System Server进程</li><li>System Server进程会加载”libandroid_servers.so”,会直接创建启动或者使用<code>SystemServiceManager</code>创建并启动各种服务,包括ActivityManagerService.而且这些服务都必须继承<code>SystemService</code>类.</li><li>ActivityManagerService中会发送启动完成的标记,然后启动Launch App</li><li>Launch App启动完成之后会发送启动完成的广播</li></ol></li><li>系统程序都在<code>/system/bin</code>下,包括<code>init</code>,<code>bootanimation</code>等,并不是什么很玄的东西,都只是个普通程序而已.</li><li>最无效的方式就是看各种源码分析文章(如果有人在看我写的这篇,赶紧关掉吧),自己下载个源码从入口开始分析,会让你更加清楚启动的流程.</li><li>代码本身并没有什么意义,Android源码也是人写的,而且写的还不怎么样,关键的是在阅读源码的过程中,深入了解一个嵌入式操作系统的实现方式,遇到的问题,以及解决问题的方案,毕竟一个市场成功的操作系统在设计上肯定有很多可取之处的.</li><li>不要一叶障目,也不要只见树木,不见森林,几十个G的代码可能看一辈子也不可能看完,重要的是知道关键之处如何利用现有的工具去设计实现我们想要的功能.</li><li>这篇文章只是大概的分析了下启动流程,而且很多地方不够详细,高度也不够(充斥了大量源码),希望后面自己软件功底深了之后会站在更高的层次来看这个吧.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期学习计划</title>
      <link href="/2020/05/30/ji-hua/jin-qi-xue-xi-ji-hua/"/>
      <url>/2020/05/30/ji-hua/jin-qi-xue-xi-ji-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>数据结构</li><li>基本算法</li><li>GUI设计原理与解决方案</li><li>操作系统(Linux)</li><li>图形渲染</li><li>图片编解码</li></ul><h2 id="flutter框架"><a href="#flutter框架" class="headerlink" title="flutter框架"></a>flutter框架</h2><ul><li>gn</li><li>skia</li><li>flutter engine</li><li>flutter frameworks</li><li>flutter tools</li><li>flutter 使用</li></ul><h2 id="领域知识学习"><a href="#领域知识学习" class="headerlink" title="领域知识学习"></a>领域知识学习</h2><ul><li>音视频</li><li>物联网</li><li>系统层开发</li></ul><h2 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h2><ul><li>音视频类</li><li>小说/阅读类</li><li>资讯/新闻类</li><li>通信/社交类</li></ul><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><ul><li>登陆/注册认证</li><li>分享</li><li>下载</li><li>图片编解码</li><li>网络框架</li><li>存储框架</li><li>采集/分析框架</li><li>性能监控方案</li></ul><h2 id="完成情况"><a href="#完成情况" class="headerlink" title="完成情况"></a>完成情况</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GN构建C++项目之HelloWorld</title>
      <link href="/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/"/>
      <url>/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/</url>
      
        <content type="html"><![CDATA[<p>使用Google的gn工具构建C++项目,但是官方的demo构建脚本还是不够简单,这里写一个最简单的构建结构.</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://oss.jiangkang.tech/jk/gn-tree.png" alt="目录结构"></p><h2 id="必要的几个文件"><a href="#必要的几个文件" class="headerlink" title="必要的几个文件"></a>必要的几个文件</h2><ul><li>.gn</li><li>根目录下的BUIlD.gn</li><li>BUILDCONFIG.gn</li></ul><h2 id="gn"><a href="#gn" class="headerlink" title=".gn"></a>.gn</h2><pre><code># gn help dotfilebuildconfig = &quot;//build/config/BUILDCONFIG.gn&quot;</code></pre><p>这里就指定个最简单的buildconfig文件即可.</p><h2 id="BUILD-gn"><a href="#BUILD-gn" class="headerlink" title="BUILD.gn"></a>BUILD.gn</h2><pre><code>executable(&quot;gn-demo&quot;) {    sources = [        &quot;main.cpp&quot;    ]}</code></pre><p>代表着要构建可执行文件.</p><h2 id="BUILDCONFIG-gn"><a href="#BUILDCONFIG-gn" class="headerlink" title="BUILDCONFIG.gn"></a>BUILDCONFIG.gn</h2><pre><code>set_default_toolchain(&quot;//build/config/toolchains:mac&quot;)</code></pre><p>这里指定了使用的默认工具链</p><h2 id="toolchains"><a href="#toolchains" class="headerlink" title="toolchains"></a>toolchains</h2><p>build/config/toolchains/BUILD.gn</p><pre><code>toolchain(&quot;mac&quot;) {    tool(&quot;cxx&quot;){        command = &quot;clang++ -c {{source}} -o {{output}}&quot;        outputs = [ &quot;{{source_out_dir}}/{{target_output_name}}.o&quot; ]    }    tool(&quot;link&quot;){        exe_name = &quot;{{root_out_dir}}/{{target_output_name}}{{output_extension}}&quot;        command = &quot;clang++ {{inputs}} -o $exe_name&quot;        outputs = [&quot;$exe_name&quot;]    }}</code></pre><p>写工具链的脚本,需要大致明白C++的编译流程.</p><p>其中<code>cxx</code>:代表编译C++,<code>link</code>代表链接.由于我使用的是Mac,所以这里使用clang进行编译.</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><pre class=" language-shell"><code class="language-shell">gn gen out/Debugninja -C out/Debug</code></pre><p>可执行文件就构建成功了.</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> GN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake的简单使用</title>
      <link href="/2020/05/25/c/cmake-de-jian-dan-shi-yong/"/>
      <url>/2020/05/25/c/cmake-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="构建可执行程序"><a href="#构建可执行程序" class="headerlink" title="构建可执行程序"></a>构建可执行程序</h2><pre class=" language-cmake"><code class="language-cmake">add_executable(<name> [WIN32] [MACOSX_BUNDLE]               [EXCLUDE_FROM_ALL]               [source1] [source2 ...])</code></pre><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} main.cpp)</code></pre><p>或者源码目录:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)add_executable(${PROJECT_NAME} ${DIR_SOURCES})</code></pre><h2 id="构建动态链接库-静态库"><a href="#构建动态链接库-静态库" class="headerlink" title="构建动态链接库/静态库"></a>构建动态链接库/静态库</h2><pre class=" language-cmake"><code class="language-cmake">add_library(<name> [STATIC | SHARED | MODULE]            [EXCLUDE_FROM_ALL]            [source1] [source2 ...])</code></pre><p><code>STATIC</code>:表示静态库,如<code>libname.a</code></p><p><code>SHARED</code>:表示动态链接库,如<code>libname.dylib</code></p><p><code>MODULE</code>:表示可以用类似<code>dlopen</code>得方法动态加载库,如<code>libname.so</code></p><p>构建出来的库名字会自动加上<code>lib</code>前缀,如<code>libname.a</code>,<code>libname.dylib</code>,<code>libname.so</code></p><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_library(${PROJECT_NAME} SHARED main.cpp)</code></pre><h2 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h2><pre class=" language-cmake"><code class="language-cmake">include_directories(include_dir)</code></pre><p><code>include_dir</code>为<code>.h</code>文件所在的文件夹</p><h2 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h2><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(./src DIR_SOURCES)</code></pre><p>查找把<code>./src</code>下所有源文件,并保存到变量<code>DIR_SOURCES</code>中,后面可以使用<code>${DIR_SOURCES}</code>表示.</p><p>需要注意的地方是:</p><ul><li><code>aux_source_directory</code>不会递归包含子目录,仅包含指定的目录.</li><li>当添加源文件时,如需重新编译,得重新运行cmake</li></ul><p>还可以使用<code>CMAKE_CURRENT_LIST_DIR</code>内置变量:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)</code></pre><h2 id="添加子目录"><a href="#添加子目录" class="headerlink" title="添加子目录"></a>添加子目录</h2><pre class=" language-cmake"><code class="language-cmake">add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></pre><p>除了写helloworld,一般都需要配置多个源码目录,这个时候可以使用<code>add_subdirectory</code>命令,其中<code>source_dir</code>表示子目录中CMakeList.txt所在的路径,<code>binary_dir</code>表示输出目录.</p><h2 id="查找依赖库"><a href="#查找依赖库" class="headerlink" title="查找依赖库"></a>查找依赖库</h2><ul><li><p>通过<code>link_directories</code> (极少使用)</p><pre class=" language-cmake"><code class="language-cmake">link_directories([AFTER|BEFORE] directory1 [directory2 ...])</code></pre><p>linker会在这些定义的目录里查找依赖的库.如lib文件夹下放置一个<code>libskia.so</code>库文件:</p><pre class=" language-cmake"><code class="language-cmake">link_directories(${CMAKE_CURRENT_LIST_DIR}/lib)</code></pre><p>最后链接的时候:</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre><p>这个时候,会自动到上面包含的lib文件下去寻找libskia.so(或者libskia.a,libskia.dylib)文件.</p><p><strong>使用XCode等项目生成器需要根据架构动态切换依赖库,或者库本身依赖私库等情况会使用这个命令,一般使用find_library()替换.</strong></p></li><li><p>通过<code>find_library</code></p><pre class=" language-cmake"><code class="language-cmake">find_library (<VAR> name1 [path1 path2 ...])</code></pre><p>如果库被找到,结果会被存储到变量<code>VAR</code>中.如果没有找到库文件,则结果会被存储到<code>&lt;VAR&gt;-NOTFOUND</code>.如:</p><pre class=" language-cmake"><code class="language-cmake">find_library(LIB_SKIA skia lib)if(LIB_SKIA-NOTFOUND)    message("没有找到Skia")endif(LIB_SKIA-NOTFOUND)target_link_libraries(${PROJECT_NAME} ${LIB_SKIA})</code></pre></li><li><p>通过<code>find_package</code></p><pre class=" language-cmake"><code class="language-cmake">find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]             [REQUIRED] [[COMPONENTS] [components...]]             [OPTIONAL_COMPONENTS components...]             [NO_POLICY_SCOPE])</code></pre><p>cmake中自带了一些cmake脚本,通过<code>cmake --help-module-list</code>命令即可查看.拿libpng举例:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} ${DIR_SOURCES})find_package(PNG)if(PNG_FOUND)    include_directories(${PNG_INCLUDE_DIR})    target_link_libraries(${PROJECT_NAME} ${PNG_LIBRARY})    message("找到了PNG")endif(PNG_FOUND)if(NOT PNG_FOUND)    message("没有找到PNG")endif(NOT PNG_FOUND)</code></pre><p>如果遇到已有脚本存在,但是就是无法找到的情况,无需在此浪费时间,换一种查找方法即可.</p></li></ul><h2 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h2><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(<target> ... <item>... ...)</code></pre><p>这其中item可以是下面的任何一种:</p><ul><li><p>库名(不带<code>lib</code>前缀,不带后缀)</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre></li><li><p>库文件的完整路径</p></li><li><p>表达式</p></li></ul><h2 id="自定义输出路径"><a href="#自定义输出路径" class="headerlink" title="自定义输出路径"></a>自定义输出路径</h2><ul><li><p>指定执行文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/build)</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUGCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE</code></pre></li></ul></li><li><p>指定库文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">LIBRARY_OUTPUT_PATH</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUGCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE</code></pre></li><li><p>指定Debug/Release版本后缀名</p><pre class=" language-cmake"><code class="language-cmake">set(CMAKE_DEBUG_POSTFIX "_d")set(CMAKE_RELEASE_POSTFIX "_r")</code></pre></li></ul></li></ul><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul><li><p>CMAKE_CURRENT_LIST_DIR</p><p>当前CMakeList.txt所在目录</p></li><li><p>PROJECT_NAME</p><p>项目名</p></li><li><p><code>PROJECT_SOURCE_DIR</code></p><p>源码目录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModernC++的一些特性</title>
      <link href="/2020/05/23/c/modernc-de-yi-xie-te-xing/"/>
      <url>/2020/05/23/c/modernc-de-yi-xie-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Modern-C"><a href="#Modern-C" class="headerlink" title="Modern C++"></a>Modern C++</h2><p>Modern C++指的是C++11/C++14/C++17/C++20等版本,新增和改进了C++语法,提升开发效率.</p><h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>nullptr是用来替换NULL的</p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><p>常量表达式</p><pre class=" language-c++"><code class="language-c++">constexpr int num = 1 + 2+ 3;</code></pre><h2 id="if-switch-变量声明强化"><a href="#if-switch-变量声明强化" class="headerlink" title="if/switch 变量声明强化"></a>if/switch 变量声明强化</h2><pre class=" language-c++"><code class="language-c++">    if (int i = num - 1){    }</code></pre><p>即判断条件中可以直接声明临时变量.</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class Person {public:    string name;    int age;    int sex;    const string &getName() const {        return name;    }    int getAge() const {        return age;    }    int getSex() const {        return sex;    }};void testInit() {    Person person = {"jack", 18, 1};}</code></pre><p>C++11之前的版本初始化比较麻烦,需要写一些无用代码,这之后比较灵活,可以按照上面的方式进行初始化.</p><h2 id="结构化绑定"><a href="#结构化绑定" class="headerlink" title="结构化绑定"></a>结构化绑定</h2><p>即多返回值的封包/拆包,在Python,Go,Kotlin中比较常见.</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <tuple>using namespace std;void testTuple() {    auto[x, y, z] = make_tuple(1, false, "hello");    cout << x << y << z << endl;}</code></pre><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>即类型推断,不用每个变量声明都声明类型.</p><p>需要注意的就是:<strong>auto不能用于函数传参,也不能用于推导数组类型</strong></p><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>auto只能用于变量的类型推断,decltype则对表达式类型推断做了补充.</p><pre class=" language-c++"><code class="language-c++">auto x = 1;auto y = 2;decltype(x+y) z;</code></pre><h2 id="区间for迭代"><a href="#区间for迭代" class="headerlink" title="区间for迭代"></a>区间for迭代</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <vector>#include <algorithm>int main() {    std::vector<int> vec = {1, 2, 3, 4};    if (auto itr = std::find(vec.begin(), vec.end(), 3); itr != vec.end()) *itr = 4;    for (auto element : vec)        std::cout << element << std::endl; // read only    for (auto &element : vec) {        element += 1;                      // writeable    }    for (auto element : vec)        std::cout << element << std::endl; // read only}</code></pre><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>将一切能在编译期解决的问题放在编译期解决,仅在运行时处理核心的动态服务.</p><h3 id="外部模板"><a href="#外部模板" class="headerlink" title="外部模板"></a>外部模板</h3><pre class=" language-c++"><code class="language-c++">template class std::vector<bool>;          // 强行实例化extern template class std::vector<double>; // 不在该当前编译文件中实例化模板</code></pre><p>其实就是一个实例化时机的问题.</p><h3 id="类型别名模板"><a href="#类型别名模板" class="headerlink" title="类型别名模板"></a>类型别名模板</h3><p>模板是用来生成类型的.</p><p>类型别名一般这样用:</p><pre class=" language-c++"><code class="language-c++">typedef 原名称 新名称</code></pre><p>对于复杂一点的就显得很难看,可以使用<code>using</code>:</p><pre class=" language-c++"><code class="language-c++">typedef int (*process)(void *);using NewProcess = int(*)(void *);template<typename T>using TrueDarkMagic = MagicType<std::vector<T>, std::string>;int main() {    TrueDarkMagic<bool> you;}</code></pre><h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a>委托构造</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>class Base {public:    int value1;    int value2;    Base() {        value1 = 1;    }    Base(int value) : Base() { // 委托 Base() 构造函数        value2 = value;    }};int main() {    Base b(2);    std::cout << b.value1 << std::endl;    std::cout << b.value2 << std::endl;}</code></pre><p>没什么好说的,其他语言在设计的时候就已经支持了.</p><h2 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a>继承构造</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>class Base {public:    int value1;    int value2;    Base() {        value1 = 1;    }    Base(int value) : Base() { // 委托 Base() 构造函数        value2 = value;    }};class Subclass : public Base {public:    using Base::Base; // 继承构造};int main() {    Subclass s(3);    std::cout << s.value1 << std::endl;    std::cout << s.value2 << std::endl;}</code></pre><h2 id="overide-final"><a href="#overide-final" class="headerlink" title="overide , final"></a>overide , final</h2><pre class=" language-c++"><code class="language-c++">struct Base {    virtual void foo(int);};struct SubClass: Base {    virtual void foo(int) override; // 合法    virtual void foo(float) override; // 非法, 父类没有此虚函数};</code></pre><pre class=" language-c++"><code class="language-c++">struct Base {    virtual void foo() final;};struct SubClass1 final: Base {}; // 合法struct SubClass2 : SubClass1 {}; // 非法, SubClass1 已 finalstruct SubClass3: Base {    void foo(); // 非法, foo 已 final};</code></pre><p>这两点也没什么好说的,其他语言早就支持了.</p><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><pre class=" language-c++"><code class="language-c++">[捕获列表](参数列表) mutable(可选) 异常属性 -> 返回类型 {// 函数体}</code></pre><h3 id="值捕获"><a href="#值捕获" class="headerlink" title="值捕获"></a>值捕获</h3><pre class=" language-c++"><code class="language-c++">void lambda_value_capture() {    int value = 1;    auto copy_value = [value] {        return value;    };    value = 100;    auto stored_value = copy_value();    std::cout << "stored_value = " << stored_value << std::endl;    // 这时, stored_value == 1, 而 value == 100.    // 因为 copy_value 在创建时就保存了一份 value 的拷贝}</code></pre><h3 id="引用捕获"><a href="#引用捕获" class="headerlink" title="引用捕获"></a>引用捕获</h3><pre class=" language-c++"><code class="language-c++">void lambda_reference_capture() {    int value = 1;    auto copy_value = [&value] {        return value;    };    value = 100;    auto stored_value = copy_value();    std::cout << "stored_value = " << stored_value << std::endl;    // 这时, stored_value == 100, value == 100.    // 因为 copy_value 保存的是引用}</code></pre><h3 id="范型Lambda"><a href="#范型Lambda" class="headerlink" title="范型Lambda"></a>范型Lambda</h3><pre class=" language-c++"><code class="language-c++">auto add = [](auto x, auto y) {    return x+y;};add(1, 2);add(1.1, 2.2);</code></pre><h2 id="函数对象包装器"><a href="#函数对象包装器" class="headerlink" title="函数对象包装器"></a>函数对象包装器</h2><p>如果不使用<code>std::fucntion()</code>是这样子的:</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using foo = void(int); // 定义函数类型, using 的使用见上一节中的别名语法void functional(foo f) { // 定义在参数列表中的函数类型 foo 被视为退化后的函数指针类型 foo*    f(1); // 通过函数指针调用函数}int main() {    auto f = [](int value) {        std::cout << value << std::endl;    };    functional(f); // 传递闭包对象，隐式转换为 foo* 类型的函数指针值    f(1); // lambda 表达式调用    return 0;}</code></pre><p>使用了之后是这样的:</p><pre class=" language-c++"><code class="language-c++">#include <functional>#include <iostream>int foo(int para) {    return para;}int main() {    // std::function 包装了一个返回值为 int, 参数为 int 的函数    std::function<int(int)> func = foo;    int important = 10;    std::function<int(int)> func2 = [&](int value) -> int {        return 1+value+important;    };    std::cout << func(10) << std::endl;    std::cout << func2(10) << std::endl;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Skia的编译</title>
      <link href="/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/"/>
      <url>/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/google/skia" target="_blank" rel="noopener">https://github.com/google/skia</a></p><p><a href="https://skia.googlesource.com/skia" target="_blank" rel="noopener">https://skia.googlesource.com/skia</a></p><p>这两个都可以,如果不能科学上网,建议使用github上的镜像.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Static --args='is_official_build=false'bin/gn gen out/Shared --args='is_official_build=false is_component_build=true'</code></pre><p>如果出现问题,就使用python脚本更新依赖:</p><pre class=" language-shell"><code class="language-shell">python2 tools/git-sync-deps</code></pre><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="is-official-build"><a href="#is-official-build" class="headerlink" title="is_official_build"></a>is_official_build</h3><p>如果这个属性为true,则会在你电脑上的系统环境取寻找一些依赖库,比如libjpeg,libpng等,如果你设置成true,编译过程中发现一些库不存在或者函数错误等,建议直接把is_official_build设置成false.这样就用skia项目中的源码依赖了,就不会出问题了.</p><h3 id="is-component-build"><a href="#is-component-build" class="headerlink" title="is_component_build"></a>is_component_build</h3><p>设置为true,则编译成多个小的动态链接库,比如各种so文件.如果需要使用skia,建议设置成true.</p>]]></content>
      
      
      <categories>
          
          <category> 图形渲染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> Skia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试flutter_tools</title>
      <link href="/2020/05/15/flutter/diao-shi-flutter-tools/"/>
      <url>/2020/05/15/flutter/diao-shi-flutter-tools/</url>
      
        <content type="html"><![CDATA[<p>在运行<code>flutter</code>命令的时候,比如<code>flutter run</code>,实际上执行的是<code>flutter_tools.snapshots</code>,而这个快照文件的源码入口就是<code>flutter_tools.dart</code>.</p><p>既然是普通的dart命令行程序,那么按照Dart命令行程序的调试方法进行调试即可.</p><p>建议提前下载一个flutter项目的源码.下载源码之后,按照下面的步骤就可以进行调试了:</p><h2 id="配置-Dart-SDK"><a href="#配置-Dart-SDK" class="headerlink" title="配置 Dart SDK"></a>配置 Dart SDK</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_dart_sdk.png" alt="配置Dart SDK"></p><h2 id="添加Configuration"><a href="#添加Configuration" class="headerlink" title="添加Configuration"></a>添加Configuration</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_config.png" alt="Configuration"></p><h2 id="执行调试"><a href="#执行调试" class="headerlink" title="执行调试"></a>执行调试</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_debug.png" alt="调试"></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Lock</title>
      <link href="/2020/05/15/android/java-zhong-de-lock/"/>
      <url>/2020/05/15/android/java-zhong-de-lock/</url>
      
        <content type="html"><![CDATA[<p>Java 中保证线程安全，操作同步的方法有很多种，比如：</p><ul><li>使用synchronized关键字</li><li>使用<code>Lock</code>的实现类</li></ul><p>其中synchronized属于语言级别的处理，无需我们去处理细节，而<code>Lock</code>则是一个接口，我们可以自定义Lock或者使用内置的Lock实现类，比如ReentrantLock等去精确控制同步。</p><h2 id="概念-锁分类"><a href="#概念-锁分类" class="headerlink" title="概念/锁分类"></a>概念/锁分类</h2><h3 id="悲观锁-VS-乐观锁"><a href="#悲观锁-VS-乐观锁" class="headerlink" title="悲观锁 VS 乐观锁"></a>悲观锁 VS 乐观锁</h3><p>悲观锁和乐观锁并不是特指哪个锁（比如叫做悲观锁，乐观锁的类），而是并发情形下的两种不同策略。</p><ul><li><p>悲观锁</p><p>每次线程去读数据的时候都认为会被其他线程修改，因此每次访问数据的时候都会上锁，其他线程如果想访问必须等到它释放锁；</p></li><li><p>乐观锁</p><p>每次线程去读数据的时候都认为不会被其他线程修改，因此不会上锁；如果线程想更新数据，会在更新前检查一下自己在读取和更新的这段时间里有没有其他线程修改过这个数据，如果修改过，则重新读取，再次尝试更新，否则更新，依次循环；</p></li></ul><p>总的来说，就是悲观锁阻塞事务，乐观锁回滚重试。</p><p>乐观锁比较适合用于修改比较少的情形，如果修改比较多，则冲突比较多，会降低性能，不如使用悲观锁。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>即Compare And Swap，是用于实现多线程同步的原子指令。</p><ol><li>比较：读取到一个值A，在将其更新为B之前，坚持原值是否仍为A</li><li>交换：如果是，则将A更新为B，结束，否则什么都不做；</li></ol><p>上面的两个步骤是原子性的，在CPU看来就是一个指令。</p><p>CAS利用CPU指令，在硬件层面保证了操作的原子性。</p><p>CAS整个过程中并<strong>没有加锁</strong>，乐观锁就是基于CAS实现的。</p><p>CAS的使用可以参考AtomicInteger等数字并发类。</p><p>使用CAS可以有效解决并发的效率问题，但同时也会引入ABA问题，比如一个线程将A改成B又改回A，另一个线程对其进行更新，则会忽略这个操作，会产生问题。JDK中的实现类添加了特殊的标记，用来解决这个问题。</p><p>Java中几乎全部都是悲观锁，因为乐观锁本质上不是锁，只是CAS算法循环。</p><h3 id="自旋锁、偏向锁、轻量级锁、重量级锁"><a href="#自旋锁、偏向锁、轻量级锁、重量级锁" class="headerlink" title="自旋锁、偏向锁、轻量级锁、重量级锁"></a>自旋锁、偏向锁、轻量级锁、重量级锁</h3><p>synchronized关键字处理有以下几个情形：</p><ol><li>初次执行synchronized代码块的时候，锁对象变成了<strong>偏向锁</strong>，通俗点说就是偏向于第一个获取它的线程，执行完同步块之后并不会主动释放锁，当第二次到达同步块的时候，此时线程判断持有锁的是自己，如果是正常往下执行，则由于之前没有释放锁，因此不必重新加锁，如果始终只有一个线程，偏向锁几乎没有多余的开销，性能比较好；</li><li>一旦有第二个线程加入锁竞争（当某个线程获取锁的时候发现锁已经被占用，只能等待其释放），偏向锁就升级为轻量级锁（自旋锁）。在轻量级锁状态下的继续锁竞争，没有抢到锁的线程将自旋（循环判断锁是否能被成功获取），长时间的自旋是很消耗资源的，一个线程有锁，其余线程只能空耗CPU，这种情况叫做忙等。如果多个线程用一个锁，但是没有发生锁竞争，或发生了轻微的锁竞争，synchronized使用轻量级锁，允许短时间的忙等。</li><li>忙等是有限度的，某个达到最大自旋次数的线程，会将轻量级锁升级成重量级锁。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</li></ol><p>一个锁，只能按照偏向锁 –&gt; 轻量级锁 –&gt; 重量级锁的顺序逐渐升级，不允许降级。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p><strong>允许同一个线程多次获取同一把锁</strong>，比如一个递归方法中有加锁操作，递归操作不阻塞自己，这种锁就叫做可重入锁。</p><p>Java中几乎所有的场景都只需要使用可重入锁，ReentrantLock等（以Reentraant开头的锁），以及JDK提供的所有Lock的实现类，包括synchronized都是属于可重入锁。</p><h3 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h3><p><strong>公平锁</strong>： 如果多个线程申请同一把公平锁，当锁释放的时候，先申请的线程先得到锁；</p><p><strong>非公平锁</strong>：如果多个线程申请同一把非公平锁，当锁释放的时候，后申请的线程可能先获得到锁，其顺序是随机的，或者是根据指定的优先级顺序。</p><p>对于synchronized而言，它就是一个非公平锁，而且没有办法变成公平锁。</p><h3 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h3><p>Java中并没有提供任何直接中断线程的方法，只提供了中断机制，即线程A向线程B发起中断请求，但线程B并不会立即停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略该中断。</p><p>如果线程A持有锁，线程B等待获取该锁，由于线程A持有锁的时间比较长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程请求中断B，这就是可中断锁。</p><p>Java中<strong>synchronized是不可中断锁，Lock的实现类都是可中断锁</strong>。</p><h3 id="读写锁、共享锁、互斥锁"><a href="#读写锁、共享锁、互斥锁" class="headerlink" title="读写锁、共享锁、互斥锁"></a>读写锁、共享锁、互斥锁</h3><p>读写锁其实是一对锁，即一个读锁（共享锁），一个写锁（互斥锁，排他锁）。</p><p>看看代码中的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for reading.     *     * @return the lock used for reading     */</span>    Lock <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for writing.     *     * @return the lock used for writing     */</span>    Lock <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到读写锁接口只定义两个方法，一个用来返回读锁，一个用来返回写锁。</p><p>如果读取一个值是为了更新它，加锁的时候就加写锁；</p><p>如果读取一个值只是为了展示，加锁的时候可以加读锁；</p><p>读写锁是悲观锁策略。</p><h2 id="Lock的定义"><a href="#Lock的定义" class="headerlink" title="Lock的定义"></a>Lock的定义</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取锁.     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取锁，直到当前线程被标记为中断     * {@linkplain Thread#interrupt interrupted}.     */</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果获取到了锁就返回true，否则立即返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 超时时间内获取到锁，则返回true，否则返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放锁.     */</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个绑定到该Lock对象的Condition实例     */</span>    Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再来看看它的常见实现类：</p><p><img src="https://oss.jiangkang.tech/jk/Lock.png" alt="Lock"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/71156910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71156910</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lock </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Map</title>
      <link href="/2020/05/15/android/java-zhong-de-map/"/>
      <url>/2020/05/15/android/java-zhong-de-map/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/Map.png" alt="Map"></p><h2 id="哈希表-散列表"><a href="#哈希表-散列表" class="headerlink" title="哈希表/散列表"></a>哈希表/散列表</h2><p><img src="https://oss.jiangkang.tech/jk/HashMap%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt=""></p><p>通俗的说就是，使用散列函数将key值映射到数组下标，这样就可以根据key值直接访问到元素存储位置，这种结构就叫哈希表（散列表）。</p><p>将key值映射到数组下标的函数就做散列函数，这个映射过程是一个key值压缩的过程，因而不可避免会存在两个不同的值映射到了相同的下标的情况，这种情况叫做<strong>哈希冲突</strong>。</p><p>散列函数的选取也是有套路可循的，比如除数取余法，平方取中法，数字分析法，折叠法扥等。</p><p>解决哈希冲突一般有两种方法：</p><ul><li><p>开放定址法</p><p>如果遇到冲突，则向后几步再存；</p></li><li><p>链接法（拉链法）</p><p>如果遇到冲突，则在对应位置后面添加一个链表节点。</p></li></ul><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程安全的。</p><p>查询的效率可以达到O(1)。</p><p>Java8中大部分情况是基于哈希表实现，当链表长度达到8的时候，转为红黑树实现。</p><p>不保证存取顺序；</p><p><img src="https://oss.jiangkang.tech/jk/HashMap-%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt=""></p><p>具体的看存储结构：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>看看树节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// red-black tree links</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needed to unlink next upon deletion</span>        <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>不允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程不安全的。</p><p>先来看看查找的关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">;</span> e <span class="token operator">!=</span> null <span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，就是先取key的hash值，然后对表长取余确定好数组下标。然后从数组下标处的链表开始查找。</p><p>再来看看put操作的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure the value is not null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Makes sure the key is not already in the hashtable.</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> entry <span class="token operator">!=</span> null <span class="token punctuation">;</span> entry <span class="token operator">=</span> entry<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                V old <span class="token operator">=</span> entry<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                entry<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> old<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Rehash the table if the threshold is exceeded</span>            <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab <span class="token operator">=</span> table<span class="token punctuation">;</span>            hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Creates the new entry.</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>还是通过对key做hash运算，然后取余得到数组下标，再进行遍历，如果已经存在对应的key，则替换新值；如果是新key，则添加到链表最前面。</p><p>并且可以看到value不可以为null，否则抛出异常。key也不能为null，要不然也会抛出空指针异常。</p><p>可以看到看到get/put方法都是同步的，保证了线程安全。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>双向链表与HashMap的结合。</p><p>保证插入的顺序，遍历的时候先得到的是先插入的元素。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的List</title>
      <link href="/2020/05/15/android/java-zhong-de-list/"/>
      <url>/2020/05/15/android/java-zhong-de-list/</url>
      
        <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p><img src="https://oss.jiangkang.tech/jk/UML-List.png" alt=""></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>通过动态数组存储数据的，数组默认长度为10，实际使用过程中可以通过<code>trimToSize()</code>方法剪裁到实际的list大小。</p><p>ArrayList是线程不安全的；</p><p>ArrayList由于通过数组索引定位，所以查找效率比较高，但是插入和删除操作需要移动数组元素，因此插入和删除效率比较低；</p><p>当数组元素增加的时候，会增加原来尺寸的一半进行扩容；如果还不满足，则直接用原来的长度加上添加元素的长度作为最终的长度。</p><p>实现了RandomAccess接口，可以随机访问；</p><p>无参构造函数new出来的ArrayList数组默认长度为10，在明确元素个数的时候可以指定数组长度；</p><p>操作的关键在于对数组的控制，比如扩容，复制等等。</p><h3 id="扩容关键代码"><a href="#扩容关键代码" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码"><a href="#查找关键代码" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码"><a href="#插入关键代码" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>基于链表实现的，LinkedList中持有一个size，一个头结点，一个尾结点。</p><p>每个结点包括结点值，指向前一个结点的引用，指向后一个结点的引用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>LinkedList是线程不安全的；</p><p>实现了Deque，可以用做双向队列。</p><p>插入/删除效率比较高，但是查询效率比ArrayList低。</p><p>操作的关键在于对链表的操作，比如新增，删除，查找，遍历等。</p><h3 id="插入关键代码-1"><a href="#插入关键代码-1" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Inserts element e before non-null Node succ.     */</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert succ != null;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-1"><a href="#查找关键代码-1" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>基于数组实现的List，可以扩容和裁剪。</p><p>Vector是线程安全的。</p><p>默认长度为10。</p><p>扩容方式与ArrayList不同，Vector中在构造函数里可以传入一个增量扩容大小capacityIncrement，如果不指定则默认为0；当扩容的时候，先判断这个增量扩容大小capacityIncrement，如果capacityIncrement大于0，则容量增加capacityIncrement，否则容量翻倍。</p><p>查询效率高，插入，删除效率低，由于是同步操作，比ArrayList性能低。</p><h3 id="扩容关键代码-1"><a href="#扩容关键代码-1" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码-2"><a href="#插入关键代码-2" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span>E obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index                                                     <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementCount <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>        elementCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-2"><a href="#查找关键代码-2" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre><code>public synchronized int indexOf(Object o, int index) {        if (o == null) {            for (int i = index ; i &lt; elementCount ; i++)                if (elementData[i]==null)                    return i;        } else {            for (int i = index ; i &lt; elementCount ; i++)                if (o.equals(elementData[i]))                    return i;        }        return -1;    }</code></pre><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>继承自Vector，新增了pop/push操作。</p><p>继承Vector的特性。</p><h3 id="pop-push操作关键代码"><a href="#pop-push操作关键代码" class="headerlink" title="pop/push操作关键代码"></a>pop/push操作关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">push</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addElement</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        E       obj<span class="token punctuation">;</span>        <span class="token keyword">int</span>     len <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeElementAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>基于数组实现，并利用<code>ReentrantLock</code>实现同步机制，保证线程安全。</p><p>然后利用了写时复制的思想，在修改的时候首先复制一个副本，在副本上进行修改，最后将引用设置到副本上。</p><h3 id="插入关键代码-3"><a href="#插入关键代码-3" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> len <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span>                                                    <span class="token string">", Size: "</span><span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-3"><a href="#查找关键代码-3" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">,</span>                               <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java队列</title>
      <link href="/2020/05/15/android/java-dui-lie/"/>
      <url>/2020/05/15/android/java-dui-lie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/UML-Queue.png" alt="Queue"></p><p>先来看一下Queue的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//插入成功返回true，如果容量不足，抛出异常</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//插入成功返回true，否则返回false，对于容量有限的队列，建议使用add(E e)</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则返回null</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则返回null</span>    E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些方法的区别：</p><table><thead><tr><th>操作</th><th>抛出异常</th><th>返回具体值</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td></tr><tr><td>检查(只查看)</td><td>element()</td><td>peek()</td></tr></tbody></table><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>BlockingQueue也是一个接口，继承自Queue。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞插入，等待队列有剩余容量才插入</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞获取，一直等到数列不为空才出队</span>    E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取剩余容量，但是在多线程的情况下不准</span>    <span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//移除队列中所有的元素，并添加到指定的集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从队列中最多移除maxElements个元素，并添加到指定集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> maxElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="如何理解这个“blocking”？"><a href="#如何理解这个“blocking”？" class="headerlink" title="如何理解这个“blocking”？"></a>如何理解这个“blocking”？</h3><p><strong>对于插入（入队）操作：</strong>如果是无边界的队列，则直接插入；如果是有边界的队列，则需要等待队列中又空余容量的时候才能插入。</p><p><strong>对于出队操作：</strong>当队列不为空时，才会出队。</p><p>BlockingQueue还有如下特点：</p><ul><li>线程安全</li><li>不允许null值</li></ul><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>这是基于链表的BlockingQueue实现。</p><p>这里还有一个<strong>吞吐量</strong>的概念：队列每秒可以处理的消息数量，包括两个方面，一方面是发送的数量，一方面是接收的数量。</p><p>可以在构造方法传入一个容量，用来避免队列过度扩大，如果不指定容量，默认容量就位<code>Integer.MAX_VALUE</code>。</p><p>通过<code>ReentranceLock</code>和<code>Condition</code>来保证线程安全。</p><p>先来看一下链表节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还有一些主要的fields：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** The capacity bound, or Integer.MAX_VALUE if none */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Current number of elements */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Head of linked list.     * Invariant: head.item == null     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Tail of linked list.     * Invariant: last.next == null     */</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by take, poll, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting takes */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by put, offer, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting puts */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由此知道LinkedBlockingQueue中包含了元素个数，容量边界，以及头尾节点等filed，还包含了用来保证线程安全性的takeLock，putLock，以及条件队列notEmpty和notFull。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不允许null值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 线程安全操作</span>        <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//如果队列已满，则阻塞</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 入队操作</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取当前元素个数</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果队列还未满，则唤醒其他线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert putLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert last.next == null;</span>        last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，队列不允许null值，并且通过ReentrantLock和Condition保证线程安全。</p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E x<span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>        takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>            <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert takeLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert head.item == null;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        head <span class="token operator">=</span> first<span class="token punctuation">;</span>        E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>操作和插入操作差不多。</p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于数组实现的BlockingQueue。</p><p>属于典型的有界缓冲区，有固定的容量，一旦创建，容量无法修改。</p><p>在构造方法中必须传入一个容量参数，还可以传入一个参数用来指示队列的公平性访问问题；</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>        notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，传入的fair参数实际上是用在ReentrantLock上的，用来表示用的是公平锁，还是非公平锁。</p><p>如果一个线程申请一把公平锁，那么当锁释放的时候，先申请的线程先得到锁，非常公平；</p><p>如果一个线程申请的是一把非公平锁，那么当锁释放的时候，后申请的线程可能会先得到锁，有随机性；</p><p>使用非公平锁的队列的吞吐量比使用公平锁的对垒的吞吐量要大，通常情况下都是优先使用非公平锁。</p><p>对于synchronized关键字来说，它也是一种非公平锁，而且没有任何方式可以将它变成公平锁。</p><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 队列满则阻塞</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[putIndex] == null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-1"><a href="#移除-1" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[takeIndex] != null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue也是一种BlockingQueue，但是它比较特殊，它有如下特点：</p><ul><li>并不存储任何元素，即容量为0，数据直接在配对的生产者/消费者之间传递，不会输入到缓冲队列中；</li><li>入队和出队线程必须一一匹配，要不然先到的线程会阻塞；</li><li>支持公平，非公平策略，默认为非公平策略。公平策略，基于内部的<code>TransferStack</code>结构实现，非公平策略基于内部的<code>TransferQueue</code>结构实现；</li><li>基于一种无锁算法实现</li></ul><p>从构造方法中可以看出其公平策略不同导致实现的不同：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个数据结构均是内部抽象类<code>Transfer</code>的实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 执行put和take操作         *         * @param e 如果不为空，则交由消费者处理;         *          如果为空，请求返回生产者添加的一个item.         * @param timed 是否支持超时         * @param nanos 超时时间，纳秒         * @return 如果不为空，表示值被提供或者被接收了; 如果为空,         *         则表示操作由于超时失败，或者线程调用Thread.interrupted方法         */</span>        <span class="token keyword">abstract</span> E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再来看一下它的size方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>不会存储任何元素，容量为0.</p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 入队e，如果没有另一个线程接收（出队），则阻塞</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-2"><a href="#移除-2" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 出队，如果没有另一个线程入队，则阻塞</span>    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E e <span class="token operator">=</span> transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>基于数组（平衡二叉堆，优先堆）实现，元素是有序的，你需要实现Comparable，以方便元素进行比较，如果不实现，则按照自然顺序，如果队列不为空，则第一个元素为最小的元素。</p><p>这是一个无界的队列，默认容量大小为11，添加元素的时候会进行扩容。</p><p>总结一下特点吧：</p><ul><li>基于数组实现，因而可以自由扩容，属于无界队列</li><li>有序（根据优先级，而优先级是通过Comparable实现进行比较），小的元素再前面</li><li>线程不安全</li><li>不支持null值</li></ul><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其中有扩容操作，还有对堆的操作：</p><h3 id="扩容方式"><a href="#扩容方式" class="headerlink" title="扩容方式"></a>扩容方式</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果之前容量小于64，则容量翻倍; 否则增长50%</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldCapacity <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-3"><a href="#移除-3" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E result <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>依然是对数组的处理，关键点在处理堆的过程上。</p><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue是一个阻塞队列，既然是阻塞队列，那么肯定有阻塞操作put和take。同时也是线程安全的。</p><p>它也是基于数组实现的，和PriorityQueue的存储结构无异，区别有以下几点：</p><ul><li>PriorityBlockingQueue是线程安全的（ReentrantLock保证）；</li><li>支持阻塞操作put和take</li></ul><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p>DelayQueue也是一个BlockingQueue，内部存储基于PriorityQueue，并通过ReentrantLock保证线程安全操作。</p><p>它有如下特点：</p><ul><li>支持延迟获取元素（在创建的时候有一个过期时间，过期之后才可以获取元素）</li><li>PriorityQueue是无界的，因此DelayQueue也是无界的</li><li>线程安全的</li></ul><p>插入的元素类型必须实现Delay接口:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回剩余的delay时间     *     * @param unit 时间单元     * @return 剩余的时间; 为0或者负数，则表示已经过期     */</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关键在于出队操作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 此处是关键，获取剩余时间，如已经没有剩余时间则出队</span>                    <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                                leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用DelayQueue最常见的的场景有：</p><ul><li><p>缓存系统的设计</p><p>使用DelayQueue保存带有效期的缓存元素，使用一个线程轮询DelayQueue，一旦获取到元素则表示缓存到期了；</p></li><li><p>定时任务调度</p><p>使用DelayQueue保存当天要执行的任务和时间，一旦获取到任务就开始执行，Timer中的TimingQueue就是基于DelayQueue实现的。</p></li></ul><h2 id="使用场景总结"><a href="#使用场景总结" class="headerlink" title="使用场景总结"></a>使用场景总结</h2><p>队列一般用作基于生产-消费者模型的系统中，下面举一些比较常见的例子：</p><ul><li><p>线程池的设计</p><p>JDK中的线程池设计使用到了各种BlockingQueue的实现，用来作为线程的容器。</p><p>比如固定线程数量和单个线程的ExecutorService，使用的是LinkedBlockingQueue；</p><p>缓存线程个数的ExecutorService，使用的是SynchronousQueue；</p></li><li><p>缓存系统的设计</p><p>比如前面提到的DelayQueue，元素可以带缓存时间。</p></li><li><p>定时调度的设计（如Timer）</p><p>比如前面提到的DelayQueue</p></li><li><p>Android Framework中队列的使用</p><ul><li>Android 的AsyncLayoutInflater中使用的ArrayBlockingQueue；</li><li>AnimationThread中使用了PriorityQueue；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle读取配置文件</title>
      <link href="/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/"/>
      <url>/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>gradle中使用了gradle.properties和local.properties文件.</p><p>build.gradle 可以直接获取同级目录和上层目录的properties文件.</p><p>如果properties文件在其他目录,或者不是<code>.properties</code>的格式,我们可以使用Java中的Properties类来读取这些文件.</p><p>Properties文件支持以下几种格式:</p><ul><li>key=value</li><li>key: value</li></ul><p>在Android Studio中建议统一使用<code>key=value</code>形式</p><p>看一个kotin dsl 的例子:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> flutterProjectRoot<span class="token operator">:</span> Path <span class="token operator">=</span> rootProject<span class="token punctuation">.</span>projectDir<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> plugins <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> pluginsFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>flutterProjectRoot<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">".flutter-plugins"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 读取属性文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pluginsFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">FileReader</span><span class="token punctuation">(</span>pluginsFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历属性</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$key</span>:<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取指定key的value</span><span class="token function">println</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sqflite"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Path中可以使用<code>resolve</code>方法,将路径字符串转换成对应格式的Path.</p><pre class=" language-kotlin"><code class="language-kotlin">flutterProjectRoot<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang语法快速入门</title>
      <link href="/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/"/>
      <url>/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="if-else-变体"><a href="#if-else-变体" class="headerlink" title="if/else 变体"></a>if/else 变体</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> statement<span class="token punctuation">;</span> condition <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">if</span> condition<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch 下的每个case不必带break,匹配到了某个case之后会自动跳出.</p><p>可以使用<code>fallthrough</code>强制执行后面的case的代码.</p><p>如果switch没有条件表达式,它会默认匹配true</p><p>也可以判断变量的type:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 你可以定义任意个数的case */</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* 可选 */</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" x 的类型 :%T"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>                      <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 int 型"</span><span class="token punctuation">)</span>                             <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 float64 型"</span><span class="token punctuation">)</span>                 <span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 func(int) 型"</span><span class="token punctuation">)</span>                            <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 bool 或 string 型"</span> <span class="token punctuation">)</span>             <span class="token keyword">default</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"未知型"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>可以使用 <code>for.. range</code>进行迭代:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> oldMap <span class="token punctuation">{</span>    newMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">}</span></code></pre><p>for中的三个条件都可以忽略.</p><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>自增+1,多用于枚举</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>golang中的数组是值类型,修改副本中的元素不会影响原来的数据.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"France"</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> a <span class="token comment" spellcheck="true">// a copy of a is assigned to b</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Singapore"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-go"><code class="language-go">a is <span class="token punctuation">[</span>USA China India Germany France<span class="token punctuation">]</span>  b is <span class="token punctuation">[</span>Singapore China India Germany France<span class="token punctuation">]</span> </code></pre><p>数组的大小是类型的一部分。因此[3]int和[2]int是不同的类型。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Golang中切片是数组的抽象,Go中数组长度不可变,但是切片可以.切片本身没有任何数据,它只是对现有数组的引用.</p><p>因此,。对切片所做的任何修改都将反映在底层数组中.</p><p>可以使用make方法创建切片:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以简写为</span>slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span></code></pre><p><code>len()</code>是切片中元素的数量</p><p><code>cap()</code>是底层数组中元素的数量</p><p><code>append()</code>可以用来给切片追加元素,也会改变底层数组的内容,但是在切片cap不大于len的情况下,会扩容导致分配新的数组空间,这种情况下引用该数组的其他切片不被影响.</p><p><code>copy()</code>不会在两个切片之间建立联系.</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>同样可以使用<code>make</code>创建,也可以直接初始化:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">/* 声明变量，默认 map 是 nil */</span><span class="token keyword">var</span> map_variable <span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token comment" spellcheck="true">/* 使用 make 函数 */</span>map_variable <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token punctuation">)</span>rating <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span> <span class="token punctuation">{</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span></code></pre><p>如果不初始化,则是一个nil map.</p><p><code>delete(map, key)</code>用来删除元素</p><p><code>map[key]</code>获取不存在的key值时,会返回默认值,string返回空字符串,可以使用:</p><pre class=" language-go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> </code></pre><p>ok是布尔类型.</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可变参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>arg <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>函数也是Go中的一种数据类型,可以作为另一个函数的参数.</p><p><code>defer</code>:当一个函数执行到最后,会逆序执行defer语句,然后return.</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>声明指针:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> var_name <span class="token operator">*</span><span class="token keyword">var</span><span class="token operator">-</span><span class="token keyword">type</span><span class="token keyword">var</span> ip <span class="token operator">*</span><span class="token builtin">int</span>        <span class="token comment" spellcheck="true">/* 指向整型*/</span><span class="token keyword">var</span> fp <span class="token operator">*</span><span class="token builtin">float32</span>    <span class="token comment" spellcheck="true">/* 指向浮点型 */</span></code></pre><p>获取指针的值:<code>*ptr</code></p><p>使用指针传递参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">*</span>val <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">}</span></code></pre><h2 id="结构嵌套"><a href="#结构嵌套" class="headerlink" title="结构嵌套"></a>结构嵌套</h2><ul><li><p>结构体嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>      city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>      name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    address Address<span class="token punctuation">}</span></code></pre></li><li><p>匿名字段/提升字段</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    weight <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human <span class="token comment" spellcheck="true">// 匿名字段，那么默认Student就包含了Human的所有字段</span>    speciality <span class="token builtin">string</span><span class="token punctuation">}</span> </code></pre><p>可以像这样初始化:</p><pre class=" language-go"><code class="language-go">mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Computer Science"</span><span class="token punctuation">}</span></code></pre><p>字段可以直接访问.</p><pre class=" language-go"><code class="language-go">mark<span class="token punctuation">.</span>name</code></pre></li></ul><p>如果想导出结构体和它的字段,则首字母必须大写.</p><p>结构体是值类型,如果两个结构体中的字段都相等(前提是字段类型可以比较),则认为两个结构体是相等的.</p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><p><code>make</code>用于内建类型(map, slice,channel)的内存分配.</p><p><code>new</code>用于各种类型的内存分配,返回的是指针.</p><h2 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h2><p>方法指的是带接收者(即对象)的函数.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Type<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">funcName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 方法是可以继承的,如果匿名字段实现了一个方法,包含这个匿名字段的struct也能调用这个方法:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    age   <span class="token builtin">int</span>    phone <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human  <span class="token comment" spellcheck="true">//匿名字段</span>    school <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human   <span class="token comment" spellcheck="true">//匿名字段</span>    company <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Human<span class="token punctuation">)</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hi, I am %s you can call me on %s\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>name<span class="token punctuation">,</span> h<span class="token punctuation">.</span>phone<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"222-222-YYYY"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"MIT"</span><span class="token punctuation">}</span>    sam <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"111-888-XXXX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Golang Inc"</span><span class="token punctuation">}</span>    mark<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sam<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>方法还可以重写,即在包含匿名字段的struct再实现一个方法.</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Text的使用</title>
      <link href="/2020/05/08/flutter/flutter-text-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-text-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>文本作为UI最基本的元素，最基本的用法有这些：</p><ul><li>字体</li><li>文字大小、颜色</li><li>一些常用样式，比如倾斜，加粗，下划线，删除线等</li><li>文字超出边界之后如何显示</li><li>文字的单行，多行控制</li><li>文字的显示方向</li><li>富文本的显示</li><li>文字渐变，阴影</li><li>文本点击事件</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>如果需要使用自定义字体，则需要在项目中的fonts文件夹下放置字体文件，然后在配置文件pubspec.yaml中进行配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  <span class="token key atrule">fonts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> Raleway      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Italic.ttf          <span class="token key atrule">style</span><span class="token punctuation">:</span> italic    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> RobotoMono      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Bold.ttf          <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">700</span></code></pre><p>使用字体主要有两种方式，一种是通过主题设置统一的字体，一种是为单独的Widget设置字体。</p><p><strong>通过主题设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  title<span class="token punctuation">:</span> <span class="token string">'Custom Fonts'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Set Raleway as the default app font.</span>  theme<span class="token punctuation">:</span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'Raleway'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  home<span class="token punctuation">:</span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>单独设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>  <span class="token string">'Roboto Mono sample'</span><span class="token punctuation">,</span>  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'RobotoMono'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="文字大小，颜色，倾斜，加粗"><a href="#文字大小，颜色，倾斜，加粗" class="headerlink" title="文字大小，颜色，倾斜，加粗"></a>文字大小，颜色，倾斜，加粗</h3><p>这些样式也都是在TextStyle中设置的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"style: color,fontWeight,fontSize,fontStyle"</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>                fontStyle<span class="token punctuation">:</span> FontStyle<span class="token punctuation">.</span>italic<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>其中fontSize使用的是逻辑像素，默认为14，FontWeight.bold表示加粗，当然还可以设置指定的值，fontStyle可以用来控制文本是否倾斜。</p><h3 id="下划线-上划线，删除线，波浪线"><a href="#下划线-上划线，删除线，波浪线" class="headerlink" title="下划线/上划线，删除线，波浪线"></a>下划线/上划线，删除线，波浪线</h3><p>下划线，删除线等属于文本装饰的一种，在TextStyle中通过decoration属性描述：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">TextStyle</span><span class="token punctuation">(</span>                decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>underline<span class="token punctuation">,</span>                decorationColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                decorationStyle<span class="token punctuation">:</span> TextDecorationStyle<span class="token punctuation">.</span>solid<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>效果如下：<br><img src="https://oss.jiangkang.tech/jk/text_underline.png" alt=""></p><p>可以指定下划线的颜色，样式，比如线的实现，还是虚线，还是波浪线等;<br>对于这些装饰，还可以设置双下划线，点线等效果。<br><img src="https://oss.jiangkang.tech/jk/text_underline_double.png" alt=""></p><h3 id="文字超出边界如何显示"><a href="#文字超出边界如何显示" class="headerlink" title="文字超出边界如何显示"></a>文字超出边界如何显示</h3><p>超出边界的显示有三种类型：</p><ul><li>显示省略号</li><li>直接截断</li><li>渐隐</li></ul><p>这几种显示样式都是通过overflow属性控制的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.clip;overflow: TextOverflow.clip;overflow: TextOverflow.clip;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>clip<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>fade<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="文字的单行与多行显示"><a href="#文字的单行与多行显示" class="headerlink" title="文字的单行与多行显示"></a>文字的单行与多行显示</h3><p>文本的多行显示，可以通过maxLines属性和softWrap属性控制，其中maxLines控制最大行数，softWrap控制是否自动换行。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: true;softWrap: true;softWrap: true;softWrap: true;softWrap: true;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3><p>可以使用Text.rich/ RichText + TextSpan来显示富文本：</p><pre class=" language-dart"><code class="language-dart">Text<span class="token punctuation">.</span><span class="token function">rich</span><span class="token punctuation">(</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">"plain text "</span><span class="token punctuation">,</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string">"fontSize"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"decoration"</span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>lineThrough<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_1.png" alt=""></p><pre class=" language-dart"><code class="language-dart"><span class="token function">RichText</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token function">TextSpan</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 1"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 2"</span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_2.png" alt=""></p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>文字的阴影可以通过TextStyle中的shadows属性进行控制：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"style: letterSpacing,shadows"</span><span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>              shadows<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Shadow<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pink<span class="token punctuation">,</span> offset<span class="token punctuation">:</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/text_shadow.png" alt=""></p><h3 id="Text的点击事件"><a href="#Text的点击事件" class="headerlink" title="Text的点击事件"></a>Text的点击事件</h3><p>可以使用GestureDetector，也可以使用InkWell：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">InkWell</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">"Default Text"</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Tabs的使用</title>
      <link href="/2020/05/08/flutter/flutter-tabs-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-tabs-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Flutter中使用tabs还是非常的简单的，可以用在顶部导航栏，也可以用在底部导航栏。</p><div style="width:100%">  <img src="https://oss.jiangkang.tech/jk/tabs1.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs2.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs3.png" style="zoom:50%;width:33%;float:left;" /></div><p>使用Tabs需要用到两个widget，一个是<code>TabBar</code>,用于顶导航或者底导航；一个是<code>TabBarView</code>，用于Tab下具体的内容。</p><h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><p>首先在AppBar中使用TabBar：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs4.png" alt="Indicator"></p><p>可以看到，底下还有一个Indicator，如果看源码，会发现默认使用的Indicator为<code>UnderlineTabIndicator</code>。</p><p>不过还是可以进行自定义：</p><pre class=" language-dart"><code class="language-dart">  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>其中indicatorColor用来指定Indicator的颜色，IndicatorPadding用来指定内容四周的边距，IndicatorSize可以选择两个值：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> TabBarIndicatorSize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 为tab时，Indicator撑满tab宽度</span>  tab<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// 为label时，Indicator宽度为tab的内容的宽度</span>  label<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs5.png" alt=""></p><h2 id="TabBarView"><a href="#TabBarView" class="headerlink" title="TabBarView"></a>TabBarView</h2><p>TabBarView对应Tab下的内容视图：</p><pre class=" language-dart"><code class="language-dart">  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以看到TabBar和TabBarView中都有一个Controller，这个Controller用途比较大，比如你想知道当前选中的是哪个tab，默认选中哪个tab，都需要TabController的帮助，我们一般用<code>DefaultTabController</code>来包裹具体的视图。</p><p>来看一下全部的代码吧：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/page/page_entry.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TabsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _TabsDemoState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_TabsDemoState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_TabsDemoState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>TabsDemo<span class="token operator">></span>    <span class="token keyword">with</span> SingleTickerProviderStateMixin <span class="token punctuation">{</span>  <span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabController _tabController<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _tabController <span class="token operator">=</span>        <span class="token function">TabController</span><span class="token punctuation">(</span>initialIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">DefaultTabController</span><span class="token punctuation">(</span>        length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>            appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Tabs Demo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              bottom<span class="token punctuation">:</span> <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            floatingActionButton<span class="token punctuation">:</span> <span class="token function">Builder</span><span class="token punctuation">(</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span>                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scaffold<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>        <span class="token function">SnackBar</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"当前选中index为${_tabController.index}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter时间处理</title>
      <link href="/2020/05/08/flutter/flutter-shi-jian-chu-li/"/>
      <url>/2020/05/08/flutter/flutter-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>Flutter 中在时间处理方面还是比较简单的，我们主要用到的有两个类：</p><ul><li><p>DateTime</p><p>表示一个指定的时间点，包括年月日时分秒</p></li><li><p>TimeOfDay</p><p>表示一天中的一个时间点，可以区分上午，下午，12小时制，24小时制等</p></li></ul><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里就得到了一个当前时间的DateTime对象，然后就可以拿到你想要的信息：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">final</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">final</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token punctuation">;</span></code></pre><p>还可以获取当前时星期几：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> week <span class="token operator">=</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">;</span></code></pre><h3 id="转时间戳"><a href="#转时间戳" class="headerlink" title="转时间戳"></a>转时间戳</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String timestamp <span class="token operator">=</span> now<span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><ul><li><p>前2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> before <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>后2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>两个时间点相隔的时间数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> diff <span class="token operator">=</span> after<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">.</span>inHours<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相隔的小时数，也可以是分钟数，秒数</span></code></pre></li></ul><h3 id="上午还是下午"><a href="#上午还是下午" class="headerlink" title="上午还是下午"></a>上午还是下午</h3><p>可以使用TimeOfDay来处理：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeOfDay <span class="token operator">=</span> TimeOfDay<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> amOrPm <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>period<span class="token punctuation">;</span></code></pre><p>其中timeOfDay.period实际上是一个枚举对象：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> DayPeriod <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// Ante meridiem (before noon).</span>  am<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// Post meridiem (after noon).</span>  pm<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这样可以判断是上午还是下午了。</p><h3 id="12-24小时制"><a href="#12-24小时制" class="headerlink" title="12/24小时制"></a>12/24小时制</h3><ul><li><p>24小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour24 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hour<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>12小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour12 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hourOfPeriod<span class="token punctuation">;</span></code></pre></li></ul><p>还可以格式化输出当前的分钟小时数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeStr <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11:49 PM</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart基础语法</title>
      <link href="/2020/05/08/flutter/dart-ji-chu-yu-fa/"/>
      <url>/2020/05/08/flutter/dart-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="重要的概念"><a href="#重要的概念" class="headerlink" title="重要的概念"></a>重要的概念</h3><ul><li>任何你可以放在一个变量中的都是一个object，并且每个object都是一个class的实例，甚至于数字，functions，null都是对象，所有的对象继承自Object类。</li><li>即使Dart是强类型的，但是类型说明是可选的，因为Dart可以推断类型；当你要显式说明没有指定任何类型的时候，可以用dynamic</li><li>Dart也支持泛型，比如List<int>（整数列表）或者List<dynamic>（一个任意类型的对象列表）</li><li>Dart支持顶层函数(如main()),以及绑定到一个类或者对象的方法（静态方法或者实例方法）；</li><li>同样的，Dart支持顶层变量;</li><li>不像Java，Dart中没有public，private，protected这些关键字，如果一个标识符以“_”(下划线)符号开头，则对其库来说是私有的。</li><li>标识符可以以字母或者下划线开头，后加字母或者数字组合</li><li>Dart有表达式（有运行时值）和语句（没有运行时值）， 如condition ? exp1:exp2,与if else 语句相比，前则有值，后者没有值。一个语句经常包含一个或者多个表达式，但是一个表达式不能直接包含一个语句。</li><li>Dart工具可以报告两种问题：errors和warnings。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token keyword">dynamic</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面可以改变类型</span>String name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>没有初始化的变量有一个初始值null，即使是数字类型也一样，因为数字类型也是一个对象。</p><pre class=" language-dart"><code class="language-dart">int lineCount<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果你有一个变量不会改变，应该使用final或者const。<br>一个const变量是一个编译时常量，而一个final 顶层或者类变量当第一次使用的时候初始化。</p><p>注意：实例变量可以是final，但不是const。final型实例变量必须在构造函数体执行之前(变量声明的时候)就初始化。</p><p>在你需要一个编译时常量的时候可以使用const，如果const常量在Class层级，则用static const，在声明的地方将变量设置为编译时常量，比如一个数字，一个字符串，一个const常量，或者一系列常量运算 的结果。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Without a type annotation</span><span class="token keyword">final</span> String nickname <span class="token operator">=</span> <span class="token string">'Bobby'</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unit of pressure (dynes/cm2)</span><span class="token keyword">const</span> double atm <span class="token operator">=</span> <span class="token number">1.01325</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Standard atmosphere</span></code></pre><p>Const关键字不仅可以用于声明常量，还可以用它创建常量值，以及声明创建常量值的构造器，任何变量可以有一个常量。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//你后面可以修改foo，如foo = [1, 2, 3]; </span><span class="token keyword">final</span> bar <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Equivalent to `const []`，后面不能修改baz</span></code></pre><h3 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h3><ul><li>numbers</li></ul><p>  有两种形式，int（64位，依赖于平台，在Dart VM中，为64位）和double（64位）</p><ul><li>strings</li></ul><p>  一个Dart String是一系列UTF-16代码单元，可以使用单引号和双引号。<br>  可以使用${expression}在字符串中表示动态内容，大括号可以省略，对于对象，会使用其toString（）方法；</p><p>   可以用三个引号创建多行文本：</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'''   You can create   multi-line strings like this one.   '''</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">"""This is also a   multi-line string."""</span><span class="token punctuation">;</span></code></pre><p>  可以用一个r创建一个raw string，比如Unicode字符串</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">r'In a raw string, not even \n gets special treatment.'</span><span class="token punctuation">;</span></code></pre><ul><li>booleans</li></ul><p>  为了表示布尔值，Dart有一个叫做bool的类型。</p><ul><li>list/arrays</li></ul><p>  在Dart中，arrays是List对象，这里就直接叫做lists了。</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  为了创建一个编译时常量的list，在list 字面量前加const，如：</p><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>maps</li></ul><p>  键值对，不用多说，上代码:</p><pre class=" language-dart"><code class="language-dart">      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Key:    Value</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">,</span>        <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'turtledoves'</span><span class="token punctuation">,</span>        <span class="token string">'fifth'</span><span class="token punctuation">:</span> <span class="token string">'golden rings'</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'partridge'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'turtledoves'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'golden rings'</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'helium'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'neon'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'argon'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//添加一个新的键值对</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fourth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'calling birds'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Add a key-value pair</span>          <span class="token comment" spellcheck="true">//取值</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'partridge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果不存在，会返回null</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//编译时常量</span>          <span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>            <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></code></pre><ul><li>runes(用于在字符串中标识Unicode字符)</li></ul><p>  Dart中， runes是字符串的UTF-32代码点。<br>  由于Dart使用的是UTF-16，因此在字符串中表示32位字符，需要特殊的语法。<br>  一般表示方式是\uXXXX,XXXX是一个4位16进制数</p><pre class=" language-dart"><code class="language-dart">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clapping <span class="token operator">=</span> <span class="token string">'\u{1f44f}'</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>codeUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>runes<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Runes input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runes</span><span class="token punctuation">(</span>    <span class="token string">'\u2665  \u{1f605}  \u{1f60e}  \u{1f47b}  \u{1f596}  \u{1f44d}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String<span class="token punctuation">.</span>fromCharCodes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>symbols</li></ul><p>  一个Symbol对象表示一个Dart程序中声明的运算符或者标识符。你可能永远都不会使用这个。不多说。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Dart是一个真正面向对象的语言，即使是function都有一个叫做Function的对象。也就是说，Function可以赋值给一个变量，或者作为参数传递给其他functions，你也可以像调用函数一样调用Dart实例，如Callable Classes。（后面又说，暂时忽略即可）</p><pre class=" language-dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果函数只是包含了一个简单的表达式，可以用速记方法表示</span>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><code>=&gt; expr</code> 是 { return expr; }的速写方式。值得注意的是，这里只可以用表达式的速写，而不可以用语句的速写，比如不可以使用if语句。</p><p>一个function有两种类型的参数，required和optional，必须的参数放在最前面，可选参数放在后面。命名的可选参数也可以用@required标记。</p><p>可选参数可以是位置性的，也可以是命名的，但是不能包含这两种情况。</p><h4 id="可选命名参数"><a href="#可选命名参数" class="headerlink" title="可选命名参数"></a>可选命名参数</h4><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Flutter中创建实例的参数很多，因此主要使用可选命名参数这种方式，便于阅读。</p><p>你也可以用@required注解表示这是个必须的参数，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span> <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Required 是在meta 包下面定义的，因此你需要import package:meta/meta.dart 或者，import那些输出meta包的包，如Flutter下的package:flutter/material.dart.</p><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title="可选位置参数"></a>可选位置参数</h4><p>用[] 包裹着的参数：</p><pre class=" language-dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>你的function可以用=为可选位置参数或者可选命名参数定义默认值，而且必须使用编译时常量值，如果没有提供默认值，那么默认值为null。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Sets the [bold] and [hidden] flags ...</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// bold will be true; hidden will be false.</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span>    <span class="token punctuation">[</span>String device <span class="token operator">=</span> <span class="token string">'carrier pigeon'</span><span class="token punctuation">,</span> String mood<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mood <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result (in a $mood mood)'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a carrier pigeon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> gifts <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'paper'</span><span class="token punctuation">,</span>      <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'cotton'</span><span class="token punctuation">,</span>      <span class="token string">'third'</span><span class="token punctuation">:</span> <span class="token string">'leather'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'list:  $list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'gifts: $gifts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p>每一个APP都必须有一个main（）方法，作为app的入口点。main（）方法返回void，可以有一个List<String> 作为参数。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sample_text_id'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Click me!'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>reverseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种..的语法叫做级联。通过级联，你可以对单个对象的成员执行多个操作。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Run the app like this: dart args.dart 1 test</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你也可以用args库，来定义和解析命令行参数。</p><h4 id="作为第一类对象的functions"><a href="#作为第一类对象的functions" class="headerlink" title="作为第一类对象的functions"></a>作为第一类对象的functions</h4><p>你可以将一个function作为参数传递给另一个function：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pass printElement as a parameter.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以将一个function赋值给一个变量：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'!!! ${msg.toUpperCase()} !!!'</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'!!! HELLO !!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>你可以创建一个没有命名的函数，如匿名函数，lambda，闭包等。<br>下面的代码块就包含了一个函数体：</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span> param1<span class="token punctuation">[</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   codeBlock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p>如下面这个方法，使用了没有指定类型的参数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token string">'oranges'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果函数只包含一个语句，可以用=&gt; 箭头速写方式。</p><pre class=" language-dart"><code class="language-dart">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="嵌套函数变量作用域问题"><a href="#嵌套函数变量作用域问题" class="headerlink" title="嵌套函数变量作用域问题"></a>嵌套函数变量作用域问题</h4><pre class=" language-dart"><code class="language-dart">bool topLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> insideMain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> insideFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">nestedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> insideNestedFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideMain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideNestedFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nestedFunction()可以使用每一个层级的变量。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>参考JavaScript中的闭包</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Returns a function that adds [addBy] to the</span><span class="token comment" spellcheck="true">/// function's argument.</span>Function <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a function that adds 2.</span>  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Create a function that adds 4.</span>  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>所有function都会返回一个值，如果没有指定，则返回null：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>基本的就不说了，和其他语言的大同小异，如Java,JavaScript等。</p><p>不同的是：</p><p>?? 代表 if null<br>?. 表示 如果不为null才执行（参考kotlin）<br>~/ 代表 整除（返回值为int）<br>/  返回值 为double<br>as 用来类型转换（和kotlin一样）<br>is 判断是否属于否个类型</p><h4 id="级联操作符"><a href="#级联操作符" class="headerlink" title="..(级联操作符)"></a>..(级联操作符)</h4><p>级联操作符允许你在相同的对象上执行一系列操作。除了函数调用，你还可以通过级联访问同一个对象上的多个字段（field）。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Get an object.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span> <span class="token comment" spellcheck="true">// Use its members.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与下面这段等价：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然，也可以进行嵌套：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> addressBook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">AddressBookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jenny'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">'jenny@example.com'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">PhoneNumberBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string">'415-555-0100'</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">'home'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在返回实际对象的function上运用级联要非常小心，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: method 'write' isn't defined for 'void'.</span></code></pre><p>Sb.write()返回void，你不能在void上构造级联。</p><h3 id="控制流-异常"><a href="#控制流-异常" class="headerlink" title="控制流/异常"></a>控制流/异常</h3><p>和其他语言大同小异，不多说。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过常量构造器创建编译时常量</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// They are the same instance!</span></code></pre><p>子类不从父类继承构造函数，如果子类没有声明构造函数，则是默认的午餐构造函数。</p><h4 id="获取一个对象的类型"><a href="#获取一个对象的类型" class="headerlink" title="获取一个对象的类型"></a>获取一个对象的类型</h4><p>可以使用runtimeType属性获取一个对象的类型，这个属性返回一个Type类型的对象。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The type of a is ${a.runtimeType}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Named constructor</span>  Point<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用一个非默认的超类构造函数"><a href="#调用一个非默认的超类构造函数" class="headerlink" title="调用一个非默认的超类构造函数"></a>调用一个非默认的超类构造函数</h4><p>默认情况下，一个子类的构造函数调用超类的没有命名的无参构造函数。超类的构造函数在构造函数体的开始被调用，如果还是用了初始化列表，则初始化列表先于超类被调用。<br>执行顺序如下：</p><ol><li>初始化列表</li><li>超类的无参构造函数</li><li>main class的无参构造函数</li></ol><p>如果超类没有无命名的无参构造函数，你必须手动调用它的一个构造函数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">getDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>除了调用超类构造函数之外，还可以在构造函数体执行之前初始化实例变量。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Initializer list sets instance variables before</span><span class="token comment" spellcheck="true">// the constructor body runs.</span>Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> num<span class="token operator">></span> json<span class="token punctuation">)</span>    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.fromJson(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化程序的右边部分无法访问this。</p><p>开发过程中也可以使用assert进行输入验证：</p><pre class=" language-dart"><code class="language-dart">Point<span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.withAssert(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title="重定向构造函数"></a>重定向构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The main constructor for this class.</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Delegates to the main constructor.</span>  Point<span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h4><p>如果你的类提供用不改变的对象，那么你可以将那些对象设置为编译时常量。为了实现这种效果，你需要定义个常量构造函数，并且确认所有的实例变量都是final类型的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutablePoint origin <span class="token operator">=</span>      <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>常量构造函数也不总是创建常量。</p><h4 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h4><p>借助factory关键字，你不用每次创建对象的时候都创建一个新的对象，而可以从缓存中返回，或者返回一个子类型的对象。</p><p>下面是一个从缓存中返回对象的例子：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// _cache is library-private, thanks to</span>  <span class="token comment" spellcheck="true">// the _ in front of its name.</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span> _cache <span class="token operator">=</span>      <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token function">Logger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span>      <span class="token keyword">return</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>值得注意的是工厂构造函数无法访问this。</p><p>调用工厂构造方法和调用其他构造方法的方式是一样的：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token string">'UI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method/方法"></a>Method/方法</h3><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter / Setter"></a>Getter / Setter</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Define two calculated properties: right and bottom.</span>  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>抽象方法仅存在于抽象类中；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define instance variables and methods...</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Define an abstract method.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Provide an implementation, so the method is not abstract here...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是不可以实例化的。如果你想要你的抽象类看起来是实例化的，可以定义一个工厂构造函数。</p><p>抽象类通常都有抽象方法。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// This class is declared abstract and thus</span><span class="token comment" spellcheck="true">// can't be instantiated.</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define constructors, fields, methods...</span>  <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Abstract method.</span><span class="token punctuation">}</span></code></pre><h4 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h4><p>每个类都隐式定义一个接口，该接口包含该类的所有实例成员，以及其实现的任何接口；如果你想要在不继承B类实现的情况下创建支持B类API的A类，则A类应该实现B接口。</p><p>类可以通过 implements 实现一个或者多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// A person. The implicit interface contains greet().</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// In the interface, but visible only in this library.</span>  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Not in the interface, since this is a constructor.</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// In the interface.</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hello, $who. I am $_name.'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// An implementation of the Person interface.</span><span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">;</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hi $who. Do you know who I am?'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String <span class="token function">greetBob</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Kathy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> Location <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="拓展一个类"><a href="#拓展一个类" class="headerlink" title="拓展一个类"></a>拓展一个类</h4><p>使用extends创建子类，使用super引用超类。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_illuminateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_activateIrSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_bootNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_initializeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_upgradeApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写成员"><a href="#重写成员" class="headerlink" title="重写成员"></a>重写成员</h5><p>子类可以重写实例方法，Getter和Setter，你可以用@override表示你打算重写某个承运。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写操作符"><a href="#重写操作符" class="headerlink" title="重写操作符"></a>重写操作符</h5><p>你可以重写操作符，比如你创建了一个Vector类，可以重写+操作符进行向量的加法：</p><p><code>！=</code>不可以重写，因为这只是一个语法糖。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Operator == and hashCode not shown. For details, see note below.</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你重写 <code>==</code>那么你也得重写<code>hashCode</code></p><h5 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h5><p>为了监测和响应调用没有实现的方法或者实例变量的情况，你应该重写noSuchMethod()方法；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Unless you override noSuchMethod, using a</span>  <span class="token comment" spellcheck="true">// non-existent member results in a NoSuchMethodError.</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'You tried to use a non-existent member: '</span> <span class="token operator">+</span>        <span class="token string">'${invocation.memberName}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span></code></pre><p>每个枚举类型中的值都有一个index getter，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取枚举中所有值的列表：</p><pre class=" language-dart"><code class="language-dart">List<span class="token operator">&lt;</span>Color<span class="token operator">></span> colors <span class="token operator">=</span> Color<span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用在switch流程中：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> aColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Red as roses!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Green as grass!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Without this, you see a WARNING.</span>    <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Color.blue'</span><span class="token punctuation">}</span></code></pre><h4 id="向class中添加特征：mixins"><a href="#向class中添加特征：mixins" class="headerlink" title="向class中添加特征：mixins"></a>向class中添加特征：mixins</h4><p>Mixins是一种在多个类层次中重用类代码的方式。</p><p>可以用with 关键字使用mixins：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> Musical <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span>    <span class="token keyword">with</span> Musical<span class="token punctuation">,</span> Aggressive<span class="token punctuation">,</span> Demented <span class="token punctuation">{</span>  <span class="token function">Maestro</span><span class="token punctuation">(</span>String maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span>    canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了实现一个mixin，创建一个继承Object的类，不要声明构造函数，不要调用super，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>  bool canPlayPiano <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canCompose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canConduct <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">entertainMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canPlayPiano<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Playing piano'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canConduct<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Waving hands'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Humming to self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Class-变量和方法"><a href="#Class-变量和方法" class="headerlink" title="Class 变量和方法"></a>Class 变量和方法</h4><p>和Java中的静态方法一样，用static表示：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>Queue<span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态变量使用的时候才会初始化。</p><p>静态方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:math'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> num <span class="token function">distanceBetween</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> distance <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>考虑用顶层函数替代静态方法。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>和Java一样，也都是List<E>形式的。</p><h4 id="使用集合字面量"><a href="#使用集合字面量" class="headerlink" title="使用集合字面量"></a>使用集合字面量</h4><p>List和map字面量都可以泛化：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token string">'index.html'</span><span class="token punctuation">:</span> <span class="token string">'Homepage'</span><span class="token punctuation">,</span>  <span class="token string">'robots.txt'</span><span class="token punctuation">:</span> <span class="token string">'Hints for web robots'</span><span class="token punctuation">,</span>  <span class="token string">'humans.txt'</span><span class="token punctuation">:</span> <span class="token string">'We are people, not machines'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="在构造函数中使用泛型"><a href="#在构造函数中使用泛型" class="headerlink" title="在构造函数中使用泛型"></a>在构造函数中使用泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nameSet <span class="token operator">=</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> views <span class="token operator">=</span> Map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span> View<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型集合和它们包含的类型"><a href="#泛型集合和它们包含的类型" class="headerlink" title="泛型集合和它们包含的类型"></a>泛型集合和它们包含的类型</h4><p>与Java不同，Dart中的泛型在运行时是可以携带类型信息的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="限定泛型"><a href="#限定泛型" class="headerlink" title="限定泛型"></a>限定泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Implementation goes here...</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Instance of 'Foo&lt;$T>'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Extender</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用子类作为泛型参数</span><span class="token keyword">var</span> someBaseClassFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>SomeBaseClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> extenderFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Extender<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不指定泛型也可以</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Instance of 'Foo&lt;SomeBaseClass>'</span></code></pre><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><pre class=" language-dart"><code class="language-dart">T first<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Do some initial work or error checking, then...</span>  T tmp <span class="token operator">=</span> ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do some additional checking or processing...</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Librarys-和它的可见性"><a href="#Librarys-和它的可见性" class="headerlink" title="Librarys 和它的可见性"></a>Librarys 和它的可见性</h3><p>可见性： _ 表示仅仅对该Library可见。</p><p>每一个Dart App都是一个Library。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:html'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:test/test.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定别名</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib1.</span>Element element1 <span class="token operator">=</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib2.</span>lib2<span class="token punctuation">.</span>Element element2 <span class="token operator">=</span> lib2<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import only foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span> show foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import all names EXCEPT foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> hide foo<span class="token punctuation">;</span></code></pre><h4 id="库的懒加载"><a href="#库的懒加载" class="headerlink" title="库的懒加载"></a>库的懒加载</h4><p>懒加载（延迟加载）允许app按需加载一个库。</p><p>下面是用到懒加载的一些场景：</p><ul><li>为了减少一个app的初始化启动时间</li><li>进行A/B测试</li><li>加载很少被使用的库</li></ul><p>使用方式：必须首先用deferred as</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:greetings/hello.dart'</span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span></code></pre><p>要使用的时候，调用库的loadLibrary()方法：</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hello<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码中，await表示等待hello库加载完成才继续执行。</p><p>你可以多次调用一个库的loadLibrary()方法，但是它只会被加载一次。</p><p>当你使用库的懒加载的时候，需要注意下面这些：</p><ul><li>一个懒加载库中的常量不是导入文件中的常量，在库加载之前，这些常量都不存在；</li><li>你不能在导入文件中使用懒加载库中的类型，但是，你可以考虑将接口类型移动到由懒加载库和导入文件导入的库。</li><li>Dart隐式的将loadLibrary()插入到使用deferred as namespace 定义的命名空间中，loadLibray()返回Future类型。</li></ul><p>注意：即使是在loadLibrary（）执行之前，Dart VM也允许访问懒加载库中的成员，这个特征在后面可能会变更，应该避免使用。</p><h3 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h3><p>Dart中很多函数都返回Future和Stream对象。 这些函数都是异步的。</p><p>async/await 支持你在Dart中进行异步编程。</p><p>当你使用await的时候，必须在方法外面用async包裹。</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">checkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do something with version</span><span class="token punctuation">}</span></code></pre><p>必要的时候需要处理异常：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>  version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// React to inability to look up the version</span><span class="token punctuation">}</span></code></pre><p>在异步方法中，你可以多次使用await</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> entrypoint <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findEntrypoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> exitCode <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runExecutable</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">flushThenExit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h4><pre class=" language-dart"><code class="language-dart">Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1.0.0'</span><span class="token punctuation">;</span></code></pre><p>如果不返回一个有用的值，可以用<code>Future&lt;void&gt;</code></p><h4 id="处理Streams"><a href="#处理Streams" class="headerlink" title="处理Streams"></a>处理Streams</h4><p>可以从Stream中获取值。</p><p>你需要用async和一个异步循环(await for)</p><p>注意：在使用await for之前，确信你知道要一直等待循环获取到所有结果。比如在处理UI事件的时候，就不应该使用这个，因为UI事件是无尽的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>varOrType identifier <span class="token keyword">in</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Executes each time the stream emits a value.</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart">Future <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> request <span class="token keyword">in</span> requestServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>你也可以用break或者return终止循环。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当你需要laily生成一系列值，你可以使用生成器。</p><p>目前有两种生成器：</p><ul><li>同步生成器： 返回Iterable对象</li><li>异步生成器： 返回Stream对象</li></ul><p>同步生成器： 用 sync* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步生成器： 用async* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Stream<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">asynchronousNaturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你的生成器是递归的，可以用yield*提升性能：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>    <span class="token keyword">yield*</span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.dartlang.org/guides/language/language-tour" target="_blank" rel="noopener">https://www.dartlang.org/guides/language/language-tour</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-实现图片圆角的几种方式</title>
      <link href="/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/"/>
      <url>/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>图片圆角在开发中还是非常常见的，用Flutter实现圆角还是非常简单的，目前了解的大概有下面这几种：</p><ul><li>通过Card的shape属性</li><li>通过Container的decoration</li><li>直接使用ClipRRect</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://oss.jiangkang.tech/jk/tupianyuanjiao.png" style="zoom:50%;" /><h2 id="通过Card的shape属性"><a href="#通过Card的shape属性" class="headerlink" title="通过Card的shape属性"></a>通过Card的shape属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Card</span><span class="token punctuation">(</span>            shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            clipBehavior<span class="token punctuation">:</span> Clip<span class="token punctuation">.</span>antiAlias<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>              <span class="token string">"images/landscape0.jpeg"</span><span class="token punctuation">,</span>              width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p>唯一值的注意的地方就是borderRadius看准了，不要用错了，要不然没效果。</p><h2 id="通过Container的decoration"><a href="#通过Container的decoration" class="headerlink" title="通过Container的decoration"></a>通过Container的decoration</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span>          decoration<span class="token punctuation">:</span> <span class="token function">ShapeDecoration</span><span class="token punctuation">(</span>              image<span class="token punctuation">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>                  image<span class="token punctuation">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/landscape1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>fitWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">Align</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Padding</span><span class="token punctuation">(</span>              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">"Container decoration实现圆角(radius = 20)"</span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>使用的DecorationImage，相当于把图片当做一个背景，这里需要注意的就是Container的child的尺寸问题，就算不放内容，也需要设置一个带尺寸的child Widget。</p><h2 id="直接使用ClipRRect"><a href="#直接使用ClipRRect" class="headerlink" title="直接使用ClipRRect"></a>直接使用ClipRRect</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">ClipRRect</span><span class="token punctuation">(</span>              borderRadius<span class="token punctuation">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string">"images/landscape2.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>这种方式是最简单的，直接使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 圆角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter深色模式</title>
      <link href="/2020/05/08/flutter/flutter-shen-se-mo-shi/"/>
      <url>/2020/05/08/flutter/flutter-shen-se-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>这些年，移动端UI的深色模式还是比较常见你的，IOS在系统级别已经率先支持了，Flutter作为一款优秀的跨端UI框架，在处理深色模式上是比较简单的。</p><img src="https://oss.jiangkang.tech/jk/shense.gif" style="zoom:50%;" /><h2 id="Brightness"><a href="#Brightness" class="headerlink" title="Brightness"></a>Brightness</h2><p>Flutter中有一个Brightness的概念，用来表示主题和颜色的亮暗模式。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Brightness <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The color is dark and will require a light text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be dark grey, requiring white text.</span>  dark<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// The color is light and will require a dark text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be bright white, requiring black text.</span>  light<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Flutter针对主题也提供了封装：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>dark<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问方式如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> lightTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> dartTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们首先想一下，要实现一个切换深色主题的功能的步骤是什么？</p><ol><li>设置页：进行浅色/深色模式切换，并进行持久化，以便app重启之后还是生效的；</li><li>App：启动的时候获取持久化的浅色/深色模式，并应用到app的主题上；</li><li>切换时实时刷新主题的深浅模式；</li></ol><h2 id="1-进行深浅色模式的切换"><a href="#1-进行深浅色模式的切换" class="headerlink" title="1. 进行深浅色模式的切换"></a>1. 进行深浅色模式的切换</h2><img src="https://oss.jiangkang.tech/jk/shense2.png" style="zoom:50%;" /><p>这里使用SharedPreferences来进行持久化，代码比较简单：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/constants/const_key_value.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/theme/custom_themes.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/utils/sp_utils.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:provider/provider.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 设置页</span><span class="token keyword">class</span> <span class="token class-name">SettingsPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _SettingsPageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_SettingsPageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_SettingsPageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>SettingsPage<span class="token operator">></span> <span class="token punctuation">{</span>  bool _isDarkMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _isDarkMode <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"设置页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">SafeArea</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">ListView</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">SwitchListTile</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"深色模式"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> _isDarkMode<span class="token punctuation">,</span>            onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SpUtils<span class="token punctuation">.</span><span class="token function">saveBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                _isDarkMode <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>newValue <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            activeColor<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="App启动时获取持久化的深浅色模式"><a href="#App启动时获取持久化的深浅色模式" class="headerlink" title="App启动时获取持久化的深浅色模式"></a>App启动时获取持久化的深浅色模式</h2><pre class=" language-dart"><code class="language-dart">SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="深浅色模式改变时，实时刷新APP"><a href="#深浅色模式改变时，实时刷新APP" class="headerlink" title="深浅色模式改变时，实时刷新APP"></a>深浅色模式改变时，实时刷新APP</h2><p>从前面的两段代码可以看出，我们使用了Provider。</p><p>这里我们可以把Provider当做一个单例模式，一处改变，全局生效。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> themeProvider <span class="token operator">=</span> Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Flutter System'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> themeProvider<span class="token operator">?</span><span class="token punctuation">.</span>currentTheme <span class="token operator">?</span><span class="token operator">?</span> lightTheme<span class="token punctuation">,</span>      debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> pageRouters<span class="token punctuation">,</span>      localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>        S<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalMaterialLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalWidgetsLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      supportedLocales<span class="token punctuation">:</span> S<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>supportedLocales<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深色模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的init方法</title>
      <link href="/2020/05/08/golang/golang-zhong-de-init-fang-fa/"/>
      <url>/2020/05/08/golang/golang-zhong-de-init-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="init方法是什么"><a href="#init方法是什么" class="headerlink" title="init方法是什么"></a><code>init</code>方法是什么</h2><p>我们都知道程序的入口在main包下的<code>main()</code>方法,其实还有一个方法会在<code>main</code>方法之前执行,这个方法就是<code>init()</code></p><p><code>init()</code>方法用于package级别的一些初始化操作.</p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li><code>init</code>先于<code>main</code>自动执行,不能被其他函数调用</li><li><code>init</code>方法没有输入参数和返回值</li><li>每个package可以有多个<code>init</code>方法</li><li>package下的每个源文件可以有多个<code>init</code>方法</li><li>同一个package下的<code>init</code> 方法执行顺序不确定,不要存在依赖关系</li><li>不同package的<code>init</code>方法的执行顺序由package依赖关系确定(没有依赖的package最先执行)</li></ul><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><p>需要注意的地方就是,想要让<code>init</code>方法起作用,你必须要导入对应的package,但是如果你只想使用<code>init</code>方法,不想使用包里的其他方法,这个时候就需要无副作用的导入了:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jiangkang/JustGo/basic"</span>    <span class="token boolean">_</span> <span class="token string">"net/http"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的存储路径</title>
      <link href="/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/"/>
      <url>/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="存储数据的几种方式"><a href="#存储数据的几种方式" class="headerlink" title="存储数据的几种方式"></a>存储数据的几种方式</h2><ul><li><p>应用专属存储空间</p><p>应用专属空间里的数据会在应用被卸载的时候删除，清除缓存通常指的是清除缓存文件下的文件，清空数据则是清空所有cache，files下文件，如果想让其他APP可以访问这些私有数据，可以利用FileProvider。</p><ul><li><p>内部存储</p><p>大多是通过Context获取的地址，一般在/data/data文件夹下，如</p><ul><li>dataDir: /data/data/packagename</li><li>filesDir: /data/data/packagename/files</li><li>cacheDir: /data/data/packagename/cache</li><li>codeCacheDir:/data/data/packagename/code_cache</li></ul></li><li><p>外部存储</p><p>可以通过Context获取，也可以通过Environment获取，一般在/storage/emulated/0/Android/data/pacakagename/，如：</p><ul><li>externalCacheDir：/storage/emulated/0/Android/data/pacakagename/cache</li><li>getExternalFilesDir:/storage/emulated/0/Android/data/pacakagename/files</li><li>externalMediaDirs</li></ul></li><li><p>SharedPreference</p></li><li><p>本地数据库</p></li></ul></li><li><p>共享的存储空间</p><p>可以被其他APP访问的数据，app卸载不会被删除,通常位于/storage/emulated/0下(除了/storage/emulated/0/Android/data/pacakagename)。</p><ul><li><p>media files</p><p>可以通过 MediaStore处理</p></li><li><p>文档和其他文件</p><p>可以通过ContentResolver和其他相关方法处理</p></li></ul></li></ul><h2 id="几个容易混淆的地方"><a href="#几个容易混淆的地方" class="headerlink" title="几个容易混淆的地方"></a>几个容易混淆的地方</h2><h3 id="data-data-vs-data-user-0"><a href="#data-data-vs-data-user-0" class="headerlink" title="/data/data vs /data/user/0"></a>/data/data vs /data/user/0</h3><h3 id="Android-data-vs-Android-user-0"><a href="#Android-data-vs-Android-user-0" class="headerlink" title="/Android/data vs /Android/user/0"></a>/Android/data vs /Android/user/0</h3><p>现在的手机操作系统多是支持多用户的，最常见的就是“访客模式”，通常情况下，/data/data 与 /data/user/0是等价的，对于不同的用户，实际的存储位置可能是/user/xxx,但是我们通常只需要访问/data/data即可。</p><h3 id="mnt-sdcard-vs-sdcard-vs-storage-sdcard0"><a href="#mnt-sdcard-vs-sdcard-vs-storage-sdcard0" class="headerlink" title="/mnt/sdcard vs /sdcard  vs /storage/sdcard0"></a>/mnt/sdcard vs /sdcard  vs /storage/sdcard0</h3><p> 这个其实就是“软链接”的区别，可以通过 <code>ls -l</code>命令查看：</p><pre class=" language-bash"><code class="language-bash">storage/sdcard0 -<span class="token operator">></span> /sdcardmnt/sdcard -<span class="token operator">></span> /storage/self/primarysdcard -<span class="token operator">></span> /storage/self/primary</code></pre><p>可以看到这几个地址的真实地址实际上都是/storage/self/primary。</p><h3 id="storage-emulated-0"><a href="#storage-emulated-0" class="headerlink" title="/storage/emulated/0"></a>/storage/emulated/0</h3><p>共享的存储空间的根目录，其中0代表的是主存，如果有移动的存储空间，如外接SD卡，则会有其他数字。</p><p>可通过下列方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在Android Q之后，这个方法标记废弃，可以使用</p><pre class=" language-java"><code class="language-java">Context#<span class="token function">getExternalFilesDir</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span></code></pre><p>或者<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>等方法作为替代。</p><p>该目录下在没有被app污染时，通常有以下这些子目录：</p><pre><code>Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</code></pre><p>对于具体的子目录，可以通过以下方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span>getExternalStoragePublicDirectory</code></pre><p>Android Q之后，可用上面说的<code>Context#getExternalFilesDir(String)</code>，<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>替代。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识SDL</title>
      <link href="/2020/05/08/c/chu-shi-sdl/"/>
      <url>/2020/05/08/c/chu-shi-sdl/</url>
      
        <content type="html"><![CDATA[<h2 id="SDL是什么"><a href="#SDL是什么" class="headerlink" title="SDL是什么"></a>SDL是什么</h2><p>Simple DirectMedia Layer 是一个跨平台的开发库,它提供了对音频,键盘,鼠标,游戏手柄的底层访问接口.以及通过OpenGL或者Direct3D控制图形硬件的接口.</p><p>目前支持以下平台:</p><ul><li><p>Windows </p></li><li><p>Linux</p></li><li><p>Android</p></li><li><p>IOS</p></li><li><p>MacOS</p></li></ul><h2 id="SDL可以做什么"><a href="#SDL可以做什么" class="headerlink" title="SDL可以做什么"></a>SDL可以做什么</h2><ul><li><p>视频播放器</p></li><li><p>音频处理</p></li><li><p>输入事件处理,比如键盘,鼠标等</p></li><li><p>文件I/O</p></li><li><p>线程,定时器等其余功能</p></li></ul><h2 id="SDL的核心架构"><a href="#SDL的核心架构" class="headerlink" title="SDL的核心架构"></a>SDL的核心架构</h2><h3 id="几个子系统"><a href="#几个子系统" class="headerlink" title="几个子系统"></a>几个子系统</h3><ul><li><p>Video:图像控制以及线程和事件管理</p></li><li><p>Audio:声音控制</p></li><li><p>Joystick: 游戏摇杆控制</p></li><li><p>Window: 视窗管理与集成</p></li><li><p>Event: 事件驱动处理</p></li><li><p>Haptic: 触摸事件处理</p></li><li><p>Timer : 时间,计时器管理</p></li></ul><p>SDL本身其实不复杂,甚至有些简陋,单靠SDL你是无法实现一个完善的产品的,往往都需要其他功能库的支持.比如SDL广泛用于音视频播放器开发,但是SDL很多时候只是作为一个跨平台,Window的集成功能,而视频编解码则是通过其他功能库,如FFMPEG等处理的.</p><p>所以,SDL核心之一就是<strong>跨平台</strong>.</p><p>想一个问题,如何将一幅图像显示到屏幕上,我们知道视频其实是有一帧帧的图像数据组成,解决了图像显示到屏幕上的问题就解决了大部分问题.首先我们得从固定格式的图像中,比如JPEG,PNG等格式中解析出原始的图像数据,然后利用OPenGL操作GPU进行处理,经过渲染管线处理,形成像素数据存储到内存中,显示器按照刷新率刷新时,将像素数据映射到屏幕上,形成了我们看到的图像.</p><p>而SDL主要做两件事,一个就是<strong>加载各种格式的图像数据</strong>,一个就是<strong>封装OpenGL或者Direct3D API,更简单的渲染</strong></p><p>还有一个就是<strong>视窗管理与集成</strong>,这个功能也有一些其他的代替库,比如GLFW之类的.</p><h3 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h3><ul><li>SDL_image : 各种图像格式解析与载入,如png,jpeg等</li><li>SDL_mixer : 声音输出方法和声音格式支持,比如mp3,ogg等</li><li>SDL_net : 网络支持</li><li>SDL_ttf : TrueType字体渲染支持</li><li>SDL_rtf: RTF渲染支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Timeline</title>
      <link href="/2020/05/08/flutter/flutter-timeline/"/>
      <url>/2020/05/08/flutter/flutter-timeline/</url>
      
        <content type="html"><![CDATA[<p>Flutter有三种构建模式：</p><ul><li>debug</li><li>release</li><li>profile</li></ul><p>在profile模式下，我们可以看到frame rendering图：</p><h2 id="Frame-Rendering-Chart"><a href="#Frame-Rendering-Chart" class="headerlink" title="Frame Rendering Chart"></a>Frame Rendering Chart</h2><p><img src="https://oss.jiangkang.tech/jk/Timeline.png" alt="渲染图"></p><p>横轴表示每一帧，纵轴表示帧渲染时间。红色表示jank，每一个柱状条可以点击，展开之后可以看到该帧的详细信息。</p><blockquote><p>需要注意的是：</p><ol><li><p>profile模式不支持模拟器</p></li><li><p>profile模式下才可以看到Frame rendering 图</p></li><li><p>开启profile模式的命令是：</p><pre class=" language-shell"><code class="language-shell">flutter run --profile</code></pre></li></ol></blockquote><p>frame rendering 包含两个过程，UI和GPU执行时间：</p><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>UI线程在DartVM中执行dart代码。当你的app创建并在屏幕上显示图像时，UI线程会创建一个layer tree（一个包含了与设备无关的绘制命令的轻量级对象），然后将layer tree发送给GPU去渲染。</p><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><p>GPU线程在Flutter Engine中执行图形代码。该线程接收layer tree作为输入，然后发送给GPU进行图形渲染。应用开发者一般不能直接访问GPU线程和它的数据(但是如果GPU线程很慢，则多半是你写的Dart代码的问题)。</p><p>Skia就是运行在GPU线程上的。</p><blockquote><p>GPU线程有时候也叫rasterizer thread（光栅化线程）</p></blockquote><p>有时候layer tree很容易构建，但是在GPU线程上的渲染成本很高，正如前面所说，这个时候你应该检查一个自己的代码为什么导致GPU渲染代码变慢。</p><h3 id="jank"><a href="#jank" class="headerlink" title="jank"></a>jank</h3><p>国内一般叫做卡顿（渲染时间超过16ms），在frame rendering图中会以红色来表示。</p><p>Timeline View有三种层级：</p><ul><li>Frame Rendering 图</li><li>Frame events 图</li><li>CPU分析图</li></ul><p>前文说的就是Frame Rendering图，下面说一下后面的两种图标。</p><h2 id="Frame-Events-Chart"><a href="#Frame-Events-Chart" class="headerlink" title="Frame Events Chart"></a>Frame Events Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_frame_events_chart.png" alt="事件图"></p><p>如图所示，event是自上而下产生的。</p><p>UI和GPU是独立的事件流，但是它们公用同一个Timeline View。</p><p>同样地，每一个Event信息也都可以点击，这样就会展开更加详细的信息，也就是CPU Profile图。</p><h2 id="CPU-Profile-Chart"><a href="#CPU-Profile-Chart" class="headerlink" title="CPU Profile Chart"></a>CPU Profile Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_cpu_profiler_flame_chart.png" alt="CPU"></p><p>有三种采样粒度：</p><ul><li>low ： 1 sample / 50 μs</li><li>medium（默认）：1 sample / 250 μs</li><li>high ： 1 sample / 1000 μs</li></ul><p>高采样率会影响APP性能。</p><p>CPU profile图和Android Studio上的类似，一般也就是火焰图，调用图，自底向上调用图等，具体的看图方法可以看官方文档。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://flutter.dev/docs/development/tools/devtools/timeline" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/devtools/timeline</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Timeline </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
