<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter-从Widget导出图片</title>
      <link href="/2020/11/12/flutter/flutter-cong-widget-dao-chu-tu-pian/"/>
      <url>/2020/11/12/flutter/flutter-cong-widget-dao-chu-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>在Android中从View中导出图片,使用的是Canvas + Bitmap.</p><p>在Flutter中,同样支持这种功能,使用的是<code>RepaintBoundary</code></p><h2 id="使用RepaintBoundary包装Widget"><a href="#使用RepaintBoundary包装Widget" class="headerlink" title="使用RepaintBoundary包装Widget"></a>使用<code>RepaintBoundary</code>包装Widget</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">RepaintBoundary</span><span class="token punctuation">(</span>                  key<span class="token punctuation">:</span> _globalKey<span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>                    width<span class="token punctuation">:</span> _width<span class="token punctuation">,</span>                    height<span class="token punctuation">:</span> _height<span class="token punctuation">,</span>                    color<span class="token punctuation">:</span> _color<span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span></code></pre><h2 id="导出图片"><a href="#导出图片" class="headerlink" title="导出图片"></a>导出图片</h2><pre class=" language-dart"><code class="language-dart">RenderRepaintBoundary boundary <span class="token operator">=</span> _globalKey<span class="token punctuation">.</span>currentContext<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> boundary<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ByteData byteData <span class="token operator">=</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">toByteData</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> ImageByteFormat<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span>Uint8List pngBytes <span class="token operator">=</span> byteData<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">asUint8List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 显示图片</span><span class="token function">showDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Image<span class="token punctuation">.</span><span class="token function">memory</span><span class="token punctuation">(</span>pngBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Widget </tag>
            
            <tag> RepaintBoundary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glide原理分析</title>
      <link href="/2020/11/03/android/glide-yuan-li-fen-xi/"/>
      <url>/2020/11/03/android/glide-yuan-li-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一个图片加载库应该具备的功能"><a href="#一个图片加载库应该具备的功能" class="headerlink" title="一个图片加载库应该具备的功能"></a>一个图片加载库应该具备的功能</h2><ul><li>图片下载</li><li>各种格式图片编解码</li><li>图片显示</li><li>缓存</li><li>图像处理:圆角,色调,调整大小等等</li></ul><p>现在分析下Glide是如何实现这个图片加载库的,先来看一下Glide的主要模型</p><h2 id="Glide内部模型"><a href="#Glide内部模型" class="headerlink" title="Glide内部模型"></a>Glide内部模型</h2><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p>Glide可以将一个<code>Resource</code>加载到<code>Target</code>中,并在加载过程中通知相关生命周期事件.</p><p>生命周期基本上是下面这个步骤:</p><ol><li>onLoadStarted</li><li>onResourceReady / onLoadFailed</li><li>onLoadCleared</li></ol><p>但是这些步骤也不是绝对的.</p><p>如果resource在内存中或者model对象为null时,onLoadStarted不会被调用.</p><p>如果target不会被cleared,onLoadCleared也不会被调用.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// R表示 target可以显示的resource类型,比如Target是ImageView ,Resource类型是Bitmap</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleListener</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> SIZE_ORIGINAL <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadStarted</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable placeholder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable errorDrawable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// R在这里使用</span>  <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> R resource<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Transition<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> transition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadCleared</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable placeholder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取target的size</span>  <span class="token keyword">void</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> SizeReadyCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">removeCallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> SizeReadyCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Request request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  Request <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用得最多的就是ImageViewTarget了.ImageViewTarget是一个抽象类,它定义了一个抽象方法用于设置具体的资源:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Z resource<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它的子类就可以实现各自的资源设置方法,比如setBitmapResource(),setDrawable()之类的.</p><p>对于ViewTarget来说,会使用<code>View#setTag()</code>和<code>View#getTagId()</code>方法在<code>RecyclerView</code>或者其他<code>ViewGroup</code>下存储一些信息,解决复用问题.</p><p>ViewTarget中有一个方法<code>getSize()</code>,利用了<code>ViewTreeObserver.OnPreDrawListener</code>时机去获取尺寸.</p><p>目前源码中很多Target已经废弃,不推荐继承了,原因是因为<code>onLoadCleared()</code>,在使用资源的时候如果不clear()很容易导致问题.</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>表示 加载Resource到Target的过程.</p><p>RequestBuilder: 可以自定义各种属性,相当于Request的配置信息;</p><p>RequestManager: 创建和管理Request</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>在Glide中比较常见的是:</p><ul><li>Bitmap</li><li>Drawable</li><li>File</li></ul><p>一个资源接口,用于包装资源以便于“池化”和重用.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Z是被包装的资源类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resource</span><span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@NonNull</span>  Class<span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@NonNull</span>  Z <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比如BitmapResource:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitmapResource</span> <span class="token keyword">implements</span> <span class="token class-name">Resource</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">,</span> Initializable <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Bitmap bitmap<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> BitmapPool bitmapPool<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> BitmapResource <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bitmap bitmap<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> BitmapPool bitmapPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitmap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BitmapResource</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> bitmapPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">BitmapResource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Bitmap bitmap<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> BitmapPool bitmapPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token string">"Bitmap must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bitmapPool <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bitmapPool<span class="token punctuation">,</span> <span class="token string">"BitmapPool must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> <span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Bitmap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Bitmap <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">getBitmapByteSize</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bitmapPool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bitmap<span class="token punctuation">.</span><span class="token function">prepareToDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用了BitmapPool进行“池化”和回收.</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>不知道怎么描述,可以是下面这些:</p><ul><li>定义的实体类,比如UserInfo,这其中包含了图片url</li><li>一个简单的url</li><li>File</li><li>Uri</li><li>资源ID</li></ul><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>一般都是<code>InputStream</code>,也可以是File,也可以是byte[].</p><h3 id="Model-Data-Resource"><a href="#Model-Data-Resource" class="headerlink" title="Model/Data/Resource"></a>Model/Data/Resource</h3><p><code>ModelLoader</code> : 从Model 获取 Data</p><p><code>DataFetcher</code>: 使用Data,以传递给其他模块进行下一步处理</p><p><code>ResourceDecoder</code>: 将 Data 解码成 Resource</p><h3 id="ResourceDecoder"><a href="#ResourceDecoder" class="headerlink" title="ResourceDecoder"></a>ResourceDecoder</h3><p>将 Data 解码 成 Resource , 比如将InputStream解码成Bitmap</p><h3 id="ResourceEncoder"><a href="#ResourceEncoder" class="headerlink" title="ResourceEncoder"></a>ResourceEncoder</h3><p>从Resource中取出Data,然后写入到一些持久化的数据存储中</p><p>比如 从Bitmap从取出字节流 ,写入到本地文件中.</p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><p>对Resource进行变换处理,即通常说的图片处理:</p><ul><li>CenterInside</li><li>CenterCrop</li><li>CircleCrop</li><li>FitCenter</li><li>Rotate</li><li>RoundedCorners</li><li>GranularRoundedCorners</li></ul><p>与 <code>ResourcTranscoder</code>在概念上的区别主要是:</p><ul><li>Transformation不改变Resource的类型</li><li>ResourceTranscoder改变资源的类型</li></ul><h3 id="ResourceTranscoder"><a href="#ResourceTranscoder" class="headerlink" title="ResourceTranscoder"></a>ResourceTranscoder</h3><p>将一种Resource转换成另一种Resource.</p><p>比如将Bitmap转换成Drawable,将Bitmap转换成byte[]等等.</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Glide内部组件管理,像上面的ModelLoader,Encoder,Decoder在Registry中都有各自实现的Registry以进行注册和管理.</p><p>比如ResourceDecoderRegistry.</p><hr><p>看完了模型定义,再来看图片库的功能.</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Android端目前网络请求基本上都是使用的OkHttp,我们使用Glide的时候一般也会使用OkHttp作为网络库.</p><p>在<code>OkHttpStreamFetcher</code>中有:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@NonNull</span> Priority priority<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> DataCallback<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> InputStream<span class="token operator">></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Request<span class="token punctuation">.</span>Builder requestBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toStringUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// http header</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerEntry <span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String key <span class="token operator">=</span> headerEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> headerEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Request request <span class="token operator">=</span> requestBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异步请求</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>请求成功之后,会得到一个InputStream:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Call call<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成功回调</span>    responseBody <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 图片大小</span>      <span class="token keyword">long</span> contentLength <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取InputStream，并传递给其他模块处理</span>      stream <span class="token operator">=</span> ContentLengthInputStream<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">.</span><span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>      callback<span class="token punctuation">.</span><span class="token function">onDataReady</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      callback<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>这里将InputStream包装到ContentLengthInputStream中.</p><p>然后就是对InputStream中的字节流进行解码了.</p><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><p>对字节流解码的操作在<code>DecodeJob</code>中,这里的调用链比较长,具体的代码就不贴出来了.</p><p>这里涉及的Decoder比较多,Glide会根据不同的图片格式使用不同的Decoder进行解码:</p><table><thead><tr><th>解码器</th><th>说明(—&gt; 表示解码成)</th></tr></thead><tbody><tr><td>StreamGifDecoder</td><td>InputStream —&gt; ByteArray —&gt;  GifDrawable</td></tr><tr><td>InputStreamBitmapImageDecoderResourceDecoder</td><td>InputStream —&gt; Bitmap</td></tr><tr><td>ByteBufferBitmapDecoder</td><td>ByteBuffer —&gt; Bitmap</td></tr><tr><td>ResourceBitmapDecoder</td><td>Uri —&gt; Bitmap</td></tr><tr><td>UnitDrawableDecoder</td><td>Drawable —&gt; Drawable</td></tr><tr><td>ByteBufferGifDecoder</td><td>ByteBuffer —&gt; GifDrawable</td></tr><tr><td>UnitBitmapDecoder</td><td>Bitmap —&gt; Bitmap</td></tr><tr><td>GifFrameResourceDecoder</td><td>Gif Frame  —&gt; Bitmap</td></tr><tr><td>ParcelFileDescriptorBitmapDecoder</td><td>ParcelFileDescriptor —&gt; Bitmap</td></tr><tr><td>FileDecoder</td><td>File —&gt; File</td></tr><tr><td>SvgDecoder</td><td>InputStream —&gt; Svg</td></tr><tr><td>StreamBitmapDecoder</td><td>InputStream —&gt; Bitmap</td></tr><tr><td>ByteBufferBitmapImageDecoderResourceDecoder</td><td>ByteBuffer —&gt; Bitmap</td></tr><tr><td>VideoDecoder</td><td>Video Frame —&gt; Bitmap</td></tr><tr><td>ResourceDrawableDecoder</td><td>Uri —&gt; Drawable</td></tr></tbody></table><p>解码完成之后,就是资源类型之间的转换了:</p><table><thead><tr><th>Transcoder</th><th>说明</th></tr></thead><tbody><tr><td>BitmapDrawableTranscoder</td><td>Bitmap —&gt; BitmapDrawable</td></tr><tr><td>SvgDrawableTranscoder</td><td>SVG. —&gt; Picture</td></tr><tr><td>GifDrawableBytesTranscoder</td><td>GifDrawable —&gt; byte[]</td></tr><tr><td>BitmapBytesTranscoder</td><td>Bitmap —&gt; byte[]</td></tr><tr><td>DrawableBytesTranscoder</td><td>Drawable —&gt; byte[]</td></tr></tbody></table><p>像一般的图片显示,用到的是<code>StreamBitmapDecoder</code>,而它的解码实际上通过<code>Downsampler</code>进行的,经过一系列的处理,比如获取图片宽高,缩放,旋转等,最后还是我们熟悉的API:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Bitmap <span class="token function">decodeBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span>Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">return</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>dataRewinder<span class="token punctuation">.</span><span class="token function">rewindAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bitmap <span class="token function">decodeBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span>Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">return</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>          dataRewinder<span class="token punctuation">.</span><span class="token function">rewindAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><p>其实就是上面说到的Target,目前最常见的就是ViewTarget,ImageViewTarget.</p><p>在Target中调用系统的API,比如<code>setBitmapResource()</code>等进行设置显示图片:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDrawable</span><span class="token punctuation">(</span>Drawable drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    view<span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>以及生命周期的管理.</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>在查看缓存策略之前,先看一下数据源的定义:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> DataSource <span class="token punctuation">{</span>  LOCAL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数据可能是从本地设备获取的,即使是通过ContentProvider从其他远程源获取的 </span>  REMOTE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 从远程获取的</span>  DATA_DISK_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 从设备缓存获取的未修改数据</span>  RESOURCE_DISK_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设备缓存的修改数据</span>  MEMORY_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 内存缓存</span><span class="token punctuation">}</span></code></pre><p>缓存策略定义在<code>DiskCacheStrategy</code>中,分为以下几种:</p><ul><li><p>DiskCacheStrategy.ALL</p><p>缓存远程Data和Resource,以及本地的Resource</p></li><li><p>DiskCacheStrategy.NONE</p><p>不缓存</p></li><li><p>DiskCacheStrategy.DATA</p><p>在Data解码之前直接写到磁盘缓存</p></li><li><p>DiskCacheStrategy.RESOURCE</p><p>将解码后的Resourc写入到磁盘缓存</p></li><li><p>DiskCacheStrategy.AUTOMATIC</p><p>自动选择</p></li></ul><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p><code>Transformation</code>中定义:</p><ul><li>CenterInside</li><li>CenterCrop</li><li>CircleCrop</li><li>FitCenter</li><li>Rotate</li><li>RoundedCorners</li><li>GranularRoundedCorners</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Glide软件模型比较清晰,代码结构也是严格按照这个模型来实现的;</li><li>图片加载的基本过程大同小异,但是期间也存在多处优化,比如内存占用方面的优化</li><li>生命周期的处理上,Glide自己用了回调参数去处理,其实如果集成了AndroidX Lifecycle的话,结构会更加清晰</li><li>Glide结构虽然清晰,但是代码量其实很大的,很多细节之处并没有分析(分析起来估计得花不少时间)</li><li>后面会分析的有: Bitmap复用机制,图片缓存机制,编解码实际流程,不同类型图片的处理异同</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Glide </tag>
            
            <tag> 图片加载库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC与Reference</title>
      <link href="/2020/11/02/android/gc-yu-reference/"/>
      <url>/2020/11/02/android/gc-yu-reference/</url>
      
        <content type="html"><![CDATA[<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li><p>SoftReference</p><p>普通的GC不会回收软引用,只有在即将发生OOM的时候(即最后一次Full GC),如果被引用的对象只有SoftReference指向的引用,才会被回收.</p></li><li><p>WeakReference</p><p>当发生GC时,如果被引用的对象只有WeakReference指向的引用,就会被回收</p></li><li><p>PhantomReference</p><p>不能通过虚引用获取到其关联的对象,但是当GC发生时,如果其引用的对象被回收,这个事件是可以感知的,这样就可以做相应的处理.</p></li><li><p>强引用</p></li></ul><p>GC是如何决定一个对象是否被回收?</p><p>从GC Root开始向下搜索,如果对象与GC之间存在引用链,则对象是可达的(reachable),GC会根据是否可达,以及对象的可达性来决定对象是否可以被回收.</p><p>而对象的可达性与引用类型相关:</p><ul><li>强可达</li><li>软可达</li><li>虚可达</li><li>弱可达</li><li>不可达</li></ul><h2 id="Refercence的几种状态"><a href="#Refercence的几种状态" class="headerlink" title="Refercence的几种状态"></a>Refercence的几种状态</h2><p>一个Reference对象可能处于以下4种状态中的一种:</p><ul><li><p>Active</p><p>新创建的对象都是处于这个状态;</p><p>GC检测到引用的对象可达性改变时,会将状态转变成Pending或者Inactiive(如果refercence创建时带了referenceQueue,则会将refercence加入到pending 引用队列中)</p><pre><code>queue = 如果创建Refercence时注册了queue,则对应那个queue,如果没有,则为RefercenceQueue.NULLnext = null</code></pre></li><li><p>Pending</p><p>马上要被放进队列中的对象,即即将被回收的对象</p><p>pending引用队列中的一个元素,等着被ReferenceHandler线程(一个守护线程)去enqueue.</p><p>没有注册(即创建时没有带queue的)的对象不会处于这个状态;</p><pre><code>queue = 注册时的RefercenceQueuenext = this</code></pre></li><li><p>Enqueued</p><p>对象的内存已经被回收了,已经把这个对象放到了一个队列中</p><p>当一个对象从它的引用队列中移除时,它就是Inactive状态了,未注册的对象不会处于这个状态;</p><pre><code>queue = RefercenceQueue.ENQUEUEDnext = queue中下一个对象,或者this(这是最后一个元素)</code></pre></li><li><p>Inactive</p><p>最终状态,不会再改变了.</p><pre><code>queue = RefercenceQueue.NULLnext = this</code></pre></li></ul><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>JVM在进行GC的时候,如果当前对象只被Reference对象引用,JVM会根据Reference的具体类型和堆内存的使用情况来决定:</p><p>是否把对应的Reference对象加入到一个由Reference构成的pending链表上(即Refercence中的next属性).</p><p>如果能加入到pending链表上,则JVM会同时通知ReferenceHandler线程进行处理.</p><p>ReferenceHandler线程是在Reference初始化的时候创建的,它是一个守护线程,并拥有最高优先级:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ThreadGroup tg <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ThreadGroup tgn <span class="token operator">=</span> tg<span class="token punctuation">;</span>             tgn <span class="token operator">!=</span> null<span class="token punctuation">;</span>             tg <span class="token operator">=</span> tgn<span class="token punctuation">,</span> tgn <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceHandler</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> <span class="token string">"Reference Handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* If there were a special system-only priority greater than         * MAX_PRIORITY, it would be used here         */</span>        handler<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// provide access in SharedSecrets</span>        SharedSecrets<span class="token punctuation">.</span><span class="token function">setJavaLangRefAccess</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaLangRefAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryHandlePendingReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再来看看ReferenceHandler:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>InterruptedException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>Cleaner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ReferenceHandler</span><span class="token punctuation">(</span>ThreadGroup g<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> waitForNotify<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Reference<span class="token operator">&lt;</span>Object<span class="token operator">></span> r<span class="token punctuation">;</span>        Cleaner c<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> pending<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 'instanceof' might throw OutOfMemoryError sometimes</span>                    <span class="token comment" spellcheck="true">// so do this before un-linking 'r' from the 'pending' chain...</span>                    c <span class="token operator">=</span> r <span class="token keyword">instanceof</span> <span class="token class-name">Cleaner</span> <span class="token operator">?</span> <span class="token punctuation">(</span>Cleaner<span class="token punctuation">)</span> r <span class="token operator">:</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// unlink 'r' from 'pending' chain</span>                    pending <span class="token operator">=</span> r<span class="token punctuation">.</span>discovered<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>discovered <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// The waiting on the lock may cause an OutOfMemoryError</span>                    <span class="token comment" spellcheck="true">// because it may try to allocate exception objects.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>waitForNotify<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// retry if waited</span>                    <span class="token keyword">return</span> waitForNotify<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Give other threads CPU time so they hopefully drop some live references</span>            <span class="token comment" spellcheck="true">// and GC reclaims some space.</span>            <span class="token comment" spellcheck="true">// Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above</span>            <span class="token comment" spellcheck="true">// persistently throws OOME for some time...</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// retry</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// retry</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Fast path for cleaners</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ReferenceQueue<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Object<span class="token operator">></span> q <span class="token operator">=</span> r<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> ReferenceQueue<span class="token punctuation">.</span>NULL<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ReferenceHandler线程内部的run方法,会不断从pending链表中获取Refercence对象,</p><p>如果能获取到,则根据不同的引用类型进行处理;</p><p>如果获取不到,则调用wait方法等待GC回收对象,处理pending链表的通知.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://ifeve.com/java-reference%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://ifeve.com/java-reference%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
            <tag> Reference </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leakcanary是如何捕获内存泄漏的</title>
      <link href="/2020/10/31/android/leakcanary-shi-ru-he-bu-huo-nei-cun-xie-lou-de/"/>
      <url>/2020/10/31/android/leakcanary-shi-ru-he-bu-huo-nei-cun-xie-lou-de/</url>
      
        <content type="html"><![CDATA[<p>Java中第三方应用如果想判断是否存在内存泄漏,一般都会利用WeakReference + RefercenceQueue的机制去判定.</p><p>因为GC之后,理论上会回收掉WeakRefercence对象的内存(如果不存在其他到GCRoot的路径的话),因此如果GC之后,对象真的被回收了,则不存在内存泄漏,对象没有被回收,则可能存在内存泄漏.</p><p>来看一下leakcanary中的判定逻辑吧:</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token annotation builtin">@Synchronized</span> <span class="token keyword">fun</span> <span class="token function">watch</span><span class="token punctuation">(</span>    watchedObject<span class="token operator">:</span> Any<span class="token punctuation">,</span>    description<span class="token operator">:</span> String  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除之前可以访问到的对象</span>    <span class="token function">removeWeaklyReachableObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> key <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> watchUptimeMillis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用WeakReference + ReferenceQueue</span>    <span class="token keyword">val</span> reference <span class="token operator">=</span>      <span class="token function">KeyedWeakReference</span><span class="token punctuation">(</span>watchedObject<span class="token punctuation">,</span> key<span class="token punctuation">,</span> description<span class="token punctuation">,</span> watchUptimeMillis<span class="token punctuation">,</span> queue<span class="token punctuation">)</span>    watchedObjects<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> reference    <span class="token comment" spellcheck="true">// 5s之后进行GC</span>    checkRetainedExecutor<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">{</span>      <span class="token function">moveToRetained</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">removeWeaklyReachableObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ref<span class="token operator">:</span> KeyedWeakReference<span class="token operator">?</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      ref <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> KeyedWeakReference<span class="token operator">?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        watchedObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>判断的是否存在内存泄漏的基本流程如下:</p><ol><li><p>在对应生命周期回调之后,拿到要监控的对象,比如Activity/Fragment/View/ViewModel等</p></li><li><p>使用WeakReference + ReferenceQueue封装对象</p><p>GC之后会回收WeakReference中没有被强引用的对象内存,因此可以用WeakReference来判断是否存在内存泄漏</p></li><li><p>5s后强制进行GC,GC前后都会判断当前保存的对象数,进行对比,如果GC后对象依然没有被回收,则判断该对象可能存在内存泄漏</p><pre class=" language-kotlin"><code class="language-kotlin">      Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">enqueueReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      System<span class="token punctuation">.</span><span class="token function">runFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里的<code>enqueueRefercences()</code>其实就是让后台线程sleep 100ms,等待GC处理引用队列完毕.</p><blockquote><p>System.gc() : 并不一定每次都会执行GC</p><p>Runtime.gc() : 比System.gc()更可能去执行GC</p></blockquote></li><li><p>判断时间间隔是否小于1min,如果大于1min则dump HPROF文件:</p><pre class=" language-kotlin"><code class="language-kotlin"> Debug<span class="token punctuation">.</span><span class="token function">dumpHprofData</span><span class="token punctuation">(</span>heapDumpFile<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span></code></pre></li><li><p>使用leakcanary 中的 shark 库去分析HPROF文件</p><p><strong>不再是使用的haha库了</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> leakcanary </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leakcanary捕获内存泄漏的时机</title>
      <link href="/2020/10/29/android/leakcanary-bu-huo-nei-cun-xie-lou-de-shi-ji/"/>
      <url>/2020/10/29/android/leakcanary-bu-huo-nei-cun-xie-lou-de-shi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="leakcannary可以自动监控的内存泄漏有哪些"><a href="#leakcannary可以自动监控的内存泄漏有哪些" class="headerlink" title="leakcannary可以自动监控的内存泄漏有哪些?"></a>leakcannary可以自动监控的内存泄漏有哪些?</h2><ul><li>destroyed Activity对象</li><li>destroyed Fragment对象</li><li>destroyed fragment中的View对象</li><li>cleared ViewModel对象 (Activity和Fragment中都可能有)</li></ul><h2 id="监控Activity内存泄漏"><a href="#监控Activity内存泄漏" class="headerlink" title="监控Activity内存泄漏"></a>监控Activity内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> ActivityDestroyWatcher <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleCallbacks <span class="token operator">=</span>    <span class="token keyword">object</span> <span class="token operator">:</span> Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks <span class="token keyword">by</span> <span class="token function">noOpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onActivityDestroyed</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchActivities<span class="token punctuation">)</span> <span class="token punctuation">{</span>          objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>              activity<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>activity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Activity#onDestroy() callback"</span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>      application<span class="token operator">:</span> Application<span class="token punctuation">,</span>      objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>      configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> activityDestroyWatcher <span class="token operator">=</span>        <span class="token function">ActivityDestroyWatcher</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>      application<span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span>activityDestroyWatcher<span class="token punctuation">.</span>lifecycleCallbacks<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>不出所料,会注册一个<code>Application.ActivityLifecycleCallbacks</code>,用于监控Activity的生命周期.然后在Activity onDestory()的时候,使用<code>ObjectWatcher</code>来监控Activity对象.</strong></p><p><code>ObjectWatcher</code>后面再详细看,这里不多说.</p><h2 id="监控Fragment-Fragment中View的内存泄漏"><a href="#监控Fragment-Fragment中View的内存泄漏" class="headerlink" title="监控Fragment/Fragment中View的内存泄漏"></a>监控Fragment/Fragment中View的内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">object</span> FragmentDestroyWatcher <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROIDX_FRAGMENT_CLASS_NAME <span class="token operator">=</span> <span class="token string">"androidx.fragment.app.Fragment"</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROIDX_FRAGMENT_DESTROY_WATCHER_CLASS_NAME <span class="token operator">=</span>    <span class="token string">"leakcanary.internal.AndroidXFragmentDestroyWatcher"</span>  <span class="token comment" spellcheck="true">// 防止Jetfier自动将support库转成Androidx</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> ANDROID_SUPPORT_FRAGMENT_CLASS_NAME <span class="token operator">=</span>    <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"android."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"support.v4.app.Fragment"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROID_SUPPORT_FRAGMENT_DESTROY_WATCHER_CLASS_NAME <span class="token operator">=</span>    <span class="token string">"leakcanary.internal.AndroidSupportFragmentDestroyWatcher"</span>  <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>    application<span class="token operator">:</span> Application<span class="token punctuation">,</span>objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> AppWatcher<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> fragmentDestroyWatchers <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// app包下的Fragment监控,只有Android O 及以上版本才生效</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>SDK_INT <span class="token operator">>=</span> O<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>          <span class="token function">AndroidOFragmentDestroyWatcher</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// androidx包下的Fragment监控</span>    <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>        ANDROIDX_FRAGMENT_CLASS_NAME<span class="token punctuation">,</span>        ANDROIDX_FRAGMENT_DESTROY_WATCHER_CLASS_NAME<span class="token punctuation">,</span>        objectWatcher<span class="token punctuation">,</span>        configProvider    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// android support包下面的Fragment监控</span>    <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>        ANDROID_SUPPORT_FRAGMENT_CLASS_NAME<span class="token punctuation">,</span>        ANDROID_SUPPORT_FRAGMENT_DESTROY_WATCHER_CLASS_NAME<span class="token punctuation">,</span>        objectWatcher<span class="token punctuation">,</span>        configProvider    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentDestroyWatchers<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在Activity onCreate()的时候注册FragmntLifecycleCallback</span>    application<span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks <span class="token keyword">by</span> <span class="token function">noOpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span>        activity<span class="token operator">:</span> Activity<span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>watcher <span class="token keyword">in</span> fragmentDestroyWatchers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">watcher</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断类是否存在,利用反射进行实例化</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>    fragmentClassName<span class="token operator">:</span> String<span class="token punctuation">,</span>    watcherClassName<span class="token operator">:</span> String<span class="token punctuation">,</span>    objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>    configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> AppWatcher<span class="token punctuation">.</span>Config  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">classAvailable</span><span class="token punctuation">(</span>fragmentClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">classAvailable</span><span class="token punctuation">(</span>watcherClassName<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> watcherConstructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>watcherClassName<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>ObjectWatcher<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> Function0<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>      <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>      watcherConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">classAvailable</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>      <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Android中的Fragment/FragmentManager目前有3种:</p><ul><li><p><code>android.app.Fragment</code></p><p>Android O及以上可以使用<code>FragmentManager.FragmentLifecycleCallbacks</code>监听Fragment的生命周期</p></li><li><p><code>androidx.fragment.app.Fragment</code></p></li><li><p><code>android.support.v4.app.Fragment</code> (已废弃,在Android Studio中都没法编译成功)</p></li></ul><p><strong>这里就是先注册一个<code>Application.ActivityLifecycleCallbacks</code>,在每个Activity onCreate()的时候注册<code>FragmentManager.FragmentLifecycleCallbacks</code>来监听Fragment的生命周期.</strong></p><p>现在我们一般使用的都是Androidx中的Fragment,因此这里拿AndroidX中的Fragment来分析内存泄漏监控逻辑:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">AndroidXFragmentDestroyWatcher</span><span class="token punctuation">(</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> fragmentLifecycleCallbacks <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> FragmentManager<span class="token punctuation">.</span><span class="token function">FragmentLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentCreated</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment<span class="token punctuation">,</span>      savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ViewModel监控</span>      ViewModelClearedWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentViewDestroyed</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// View监控</span>      <span class="token keyword">val</span> view <span class="token operator">=</span> fragment<span class="token punctuation">.</span>view      <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchFragmentViews<span class="token punctuation">)</span> <span class="token punctuation">{</span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            view<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>fragment<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Fragment#onDestroyView() callback "</span> <span class="token operator">+</span>            <span class="token string">"(references to its views should be cleared to prevent leaks)"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentDestroyed</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Fragment监控</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchFragments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            fragment<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>fragment<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Fragment#onDestroy() callback"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// lambda表达式执行的时候调用这里,注册FragmentLifecycleCallbacks和ViewMdoel监控逻辑</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token keyword">is</span> FragmentActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> supportFragmentManager <span class="token operator">=</span> activity<span class="token punctuation">.</span>supportFragmentManager      supportFragmentManager<span class="token punctuation">.</span><span class="token function">registerFragmentLifecycleCallbacks</span><span class="token punctuation">(</span>fragmentLifecycleCallbacks<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      ViewModelClearedWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里可以看到:</p><ul><li><p><strong><code>onFragmentDestroyed()</code>回调中,使用<code>ObjectWatcher</code>去监控Fragment对象</strong></p></li><li><p><strong><code>onFragmentViewDestroyed()</code>回调中,使用<code>ObjectWatcher</code>去监控View对象</strong></p></li><li><p><strong><code>onFragmentCreated</code>和<code>onActivityCreate()</code>的时候,初始化<code>ViewModelClearedWatcher</code>去监控ViewModel对象</strong></p><p><strong>需要注意的是这两处调用传入的参数是不一样的,一个传入的是<code>Fragment</code>对象,一个传入的是<code>Activity</code>对象.</strong></p></li></ul><p>Fragment和Fragment View的都是利用的<code>ObjectWatcher</code>去监控的,再来看一下ViewModel的监控.</p><h2 id="监控ViewModel内存泄漏"><a href="#监控ViewModel内存泄漏" class="headerlink" title="监控ViewModel内存泄漏"></a>监控ViewModel内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">ViewModelClearedWatcher</span><span class="token punctuation">(</span>  storeOwner<span class="token operator">:</span> ViewModelStoreOwner<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> viewModelMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span><span class="token operator">?</span>  <span class="token keyword">init</span> <span class="token punctuation">{</span>    viewModelMap <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> mMapField <span class="token operator">=</span> ViewModelStore<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mMap"</span><span class="token punctuation">)</span>      mMapField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>      mMapField<span class="token punctuation">[</span>storeOwner<span class="token punctuation">.</span>viewModelStore<span class="token punctuation">]</span> <span class="token keyword">as</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ignored<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModelMap <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchViewModels<span class="token punctuation">)</span> <span class="token punctuation">{</span>      viewModelMap<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> viewModel <span class="token operator">-></span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            viewModel<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>viewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received ViewModel#onCleared() callback"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>      storeOwner<span class="token operator">:</span> ViewModelStoreOwner<span class="token punctuation">,</span>      objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>      configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> provider <span class="token operator">=</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span>storeOwner<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token operator">:</span> Factory <span class="token punctuation">{</span>        <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">?</span><span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>          <span class="token function">ViewModelClearedWatcher</span><span class="token punctuation">(</span>storeOwner<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span> <span class="token keyword">as</span> T      <span class="token punctuation">}</span><span class="token punctuation">)</span>      provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ViewModelClearedWatcher<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里其实涉及到几个知识点:</p><ul><li><p>ViewModelStore</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModelStore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span> mMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> ViewModel viewModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewModel oldViewModel <span class="token operator">=</span> mMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> viewModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldViewModel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldViewModel<span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> ViewModel <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  执行viewModel的onCleared()方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ViewModel vm <span class="token operator">:</span> mMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ViewModelStoreOwner</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> ViewModelStoreOwner <span class="token punctuation">{</span>    <span class="token annotation builtin">@NonNull</span>    ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>FragmentActivity和Activity均实现了这个接口</p></li><li><p>Activity或者Fragment中执行onDestroy()的时候,会执行<code>ViewModelStore</code>的<code>clear()</code>方法,通知其绑定的ViewModel去clear.</p></li></ul><p><strong>leakcanary中的<code>ViewModelClearedWatcher</code>本身就是一个ViewModel,并与要监控的Activity和Fragment进行绑定,因此当Activity或者Fragment执行 onDestroyed()回调时,也会执行<code>ViewModelClearedWatcher</code>的<code>clear()</code>方法,此时遍历ViewModelStore中map存储的ViewModel,并使用<code>ObjectWatcher</code>进行监控.</strong></p><p>分析到这里,可以知道leakcanary其实就是注入Activity和Fragment的生命周期回调,然后再onDestoryed()的时候使用<code>ObjectWatcher</code>进行监听.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> leakcanary </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leakcanary的自动初始化</title>
      <link href="/2020/10/29/android/leakcanary-de-zi-dong-chu-shi-hua/"/>
      <url>/2020/10/29/android/leakcanary-de-zi-dong-chu-shi-hua/</url>
      
        <content type="html"><![CDATA[<p>目前v2.5版本,已经无需显式的进行初始化了.</p><p>由于Android中ContentProvider的onCreate()会在Application的onCreate()之前执行,因此可以在ContentProvider中进行初始化.</p><p>恰好有这么一个ContentProvider: <code>AppWatcherInstaller</code>:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> AppWatcherInstaller <span class="token operator">:</span> <span class="token function">ContentProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">internal</span> <span class="token keyword">class</span> MainProcess <span class="token operator">:</span> <span class="token function">AppWatcherInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当使用leakcananry-android-process包的时候使用,作用是在单独的进程中运行leakcanary</span>  <span class="token keyword">internal</span> <span class="token keyword">class</span> LeakCanaryProcess <span class="token operator">:</span> <span class="token function">AppWatcherInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token keyword">val</span> application <span class="token operator">=</span> context<span class="token operator">!!</span><span class="token punctuation">.</span>applicationContext <span class="token keyword">as</span> Application    AppWatcher<span class="token punctuation">.</span><span class="token function">manualInstall</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//... 一些不需要的query,insert逻辑</span><span class="token punctuation">}</span></code></pre><p>目前有两种选择:</p><ul><li><p>使用leakcanary-android : leakcanary运行在应用进程中</p></li><li><p>使用leakcanary-android-process : leakcanary运行在单独的进程中:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.squareup.leakcanary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.HeapAnalyzerService<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:leakcanary<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.AppWatcherInstaller$LeakCanaryProcess<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.leakcanary-process.installer<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:leakcanary<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></li></ul><blockquote><p>Kotlin中 internal修饰符表示包内可见,内部类用internal则表示对能看到外部类的任何<strong>本模块</strong>的代码都可见</p><p>sealed是密封类,类比Java中的枚举类,可以有子类,但是必须在同一个文件中声明(只是拓展的子类不受这个限制);</p><p>selaed类是自身抽象的,不能直接实例化,并且可以拥有abstract成员,它不允许有非private构造函数(它的默认构造函数是private的);</p></blockquote><p>那初始化里做了什么呢?</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> objectWatcher <span class="token operator">=</span> <span class="token function">ObjectWatcher</span><span class="token punctuation">(</span>      clock <span class="token operator">=</span> clock<span class="token punctuation">,</span>      checkRetainedExecutor <span class="token operator">=</span> checkRetainedExecutor<span class="token punctuation">,</span>      isEnabled <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">)</span>  <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> configProvider <span class="token operator">=</span> <span class="token punctuation">{</span> AppWatcher<span class="token punctuation">.</span>config <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监控Activity内存泄漏</span>    ActivityDestroyWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监控Fragment内存泄漏</span>    FragmentDestroyWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 库的内部逻辑</span>    <span class="token function">onAppWatcherInstalled</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>三件事:</p><ul><li>Activity内存泄漏监控</li><li>Fragment内存泄漏监控</li><li>内部逻辑(暂时不好分类,后续再讲)</li></ul><h3 id="如果不想进行自动初始化怎么办"><a href="#如果不想进行自动初始化怎么办" class="headerlink" title="如果不想进行自动初始化怎么办?"></a>如果不想进行自动初始化怎么办?</h3><p>可以覆盖一个属性:</p><pre class=" language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leak_canary_watcher_auto_install<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>为什么?</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.squareup.leakcanary.objectwatcher<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.AppWatcherInstaller$MainProcess<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.leakcanary-installer<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@bool/leak_canary_watcher_auto_install<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p>可以看到enable属性是与<code>leak_canary_watcher_auto_install</code>绑定的.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> leakcanary </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的object</title>
      <link href="/2020/10/29/android/kotlin-zhong-de-object/"/>
      <url>/2020/10/29/android/kotlin-zhong-de-object/</url>
      
        <content type="html"><![CDATA[<p>Kotlin中<code>object</code>有3种使用场景.</p><h2 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h2><pre class=" language-kotlin"><code class="language-kotlin">window<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*……*/</span> <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*……*/</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="单例对象声明"><a href="#单例对象声明" class="headerlink" title="单例对象声明"></a>单例对象声明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> DataProviderManager <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">registerDataProvider</span><span class="token punctuation">(</span>provider<span class="token operator">:</span> DataProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ……</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> allDataProviders<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>DataProvider<span class="token operator">></span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span></code></pre><h2 id="伴生对象声明"><a href="#伴生对象声明" class="headerlink" title="伴生对象声明"></a>伴生对象声明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyClass <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> Factory <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MyClass <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>对象表达式是在使用他们的地方立即执行的(及初始化);</li><li>对象声明是在第一次被访问到时延迟初始化的;</li><li>伴生对象的初始化是在相应的类被加载(解析)时进行的;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粗糙的谈一下Kotlin中的协程</title>
      <link href="/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-xie-cheng/"/>
      <url>/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>协程运行在协程上下文中（CoroutineContext）。</p><p>协程上下文包含一个协程调度器(CoroutineDispatcher)，它可以将协程限制在一个特定的线程中执行，或者将协程分配到一个线程池中，或者让它不受限制的运行。</p><p>CoroutineContext使用以下元素(Element)定义协程的行为:</p><ul><li>Job: 控制协程的生命周期</li><li>CoroutineDispatcher: 将工作(协程)分派到适当的线程</li><li>CoroutineName: 协程的名字,可用于调试</li><li>CoroutineExceptionHandler: 处理未捕获的异常</li></ul><p><code>CoroutineScope</code>会跟踪它使用launch或者async创建的所有协程,可以随时调用scope.cancel()取消正在运行的协程.但是,已取消的scope是不能再创建协程的,这一点需要注意.</p><p>与调度程序不同,CoroutineScope并不运行协程.</p><p><code>Job</code>是协程的句柄,使用launch或者async创建的每个协程都会返回一个job对象,这个对象唯一标识协程并管理协程的生命周期,当然也可以将Job传递给CoroutineScope进一步管理其生命周期.执行job.cancel()不影响CoroutineScope.</p><p><strong>协程可以在一个线程上挂起,并在其他线程上恢复.</strong></p><h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>主要使用3种Dispatcher:</p><ul><li><p>Dispatchers.Main</p><p>运行在主线程</p></li><li><p>Dispatchers.IO</p><p>适合主线程之外的磁盘/网络IO</p></li><li><p>Dispatchers.Default</p><p>适合主线程之外占有大量CPU资源的工作</p></li></ul><p>可以使用<code>withContext(Dispatcher)</code>来指定:</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"developer.android.com"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">// Dispatchers.Main</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span>                 <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// Dispatchers.IO (main-safety block)</span>        <span class="token comment" spellcheck="true">/* perform network IO here */</span>          <span class="token comment" spellcheck="true">// Dispatchers.IO (main-safety block)</span>    <span class="token punctuation">}</span>                                          <span class="token comment" spellcheck="true">// Dispatchers.Main</span><span class="token punctuation">}</span></code></pre><p><code>withContext</code>在性能上有优势,可以避免频繁的线程切换.</p><h2 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h2><p>两种方式:</p><ul><li><p>launch</p><p>不返回结果,从常规函数启动协程一般用launch,因为常规函数无法调用await</p></li><li><p>async</p><p>返回结果 (使用await),在另一个协程中或者在挂起函数中且在执行并行分解时才使用async</p></li></ul><p>两者处理异常的方式不同,async持有异常,并作为结果在await中返回.因此,如果使用await从常规函数启动,则会丢弃异常信息.</p><p>在普通方法中启动协程一般使用下面两种方法:</p><ul><li>launch() (不会阻塞当前线程)</li><li>runBlocking {} (一般用于测试,将后台认为进行同步处理,防止过早退出)</li></ul><h2 id="并行分解"><a href="#并行分解" class="headerlink" title="并行分解"></a>并行分解</h2><p>由suspend函数启动的所有协程都必须在函数返回结果之前停止,因此需要保证这些协程在返回结果之前完成.</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>    coroutineScope <span class="token punctuation">{</span>        <span class="token keyword">val</span> deferredOne <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">val</span> deferredTwo <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        deferredOne<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        deferredTwo<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>        <span class="token comment" spellcheck="true">// called on any Dispatcher (any thread, possibly Main)</span>    coroutineScope <span class="token punctuation">{</span>        <span class="token keyword">val</span> deferreds <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>     <span class="token comment" spellcheck="true">// fetch two docs at the same time</span>            async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// async returns a result for the first doc</span>            async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// async returns a result for the second doc</span>        <span class="token punctuation">)</span>        deferreds<span class="token punctuation">.</span><span class="token function">awaitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// use awaitAll to wait for both network requests</span><span class="token punctuation">}</span></code></pre><h2 id="自定义CoroutineScope"><a href="#自定义CoroutineScope" class="headerlink" title="自定义CoroutineScope"></a>自定义CoroutineScope</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ExampleClass <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Job and Dispatcher are combined into a CoroutineContext which</span>    <span class="token comment" spellcheck="true">// will be discussed shortly</span>    <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span><span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Starts a new coroutine within the scope</span>        scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// New coroutine that can call suspend functions</span>            <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Cancel the scope to cancel ongoing coroutines work</span>        scope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="GlobalScope"><a href="#GlobalScope" class="headerlink" title="GlobalScope"></a>GlobalScope</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">object</span> GlobalScope <span class="token operator">:</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns [EmptyCoroutineContext].     */</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">}</span></code></pre><p>使用GlobalScope.launch 的时候,会创建一个顶层协程,如果忘记保持对新启动的协程的引用,它还会继续运行,如果挂起了(比如delay了太久),必须手动保持对所有已经启动协程的引用.并调用join()方法.</p><p>在GlobalScope中启动的活动协程并不会使进程保活,它们就像守护线程.</p><h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>先看一段代码:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 开始执行主协程</span>    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在后台启动一个新的协程并继续</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主协程在这里会立即执行</span><span class="token punctuation">}</span></code></pre><p>你觉得会输出什么结果?</p><p>结果是:</p><pre class=" language-kotlin"><code class="language-kotlin">Hello<span class="token punctuation">,</span></code></pre><p>对,GlobalScope.launch中的代码快并没有执行到打印“World”.</p><p>这个时候可以再主协程中添加一个delay,但是方法未免太过死板,可以使用JOb控制:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 启动一个新协程并保持对这个作业的引用</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span>job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待直到子协程执行结束</span></code></pre><p>但是,如果有很多协程,每个都去获取job并join的话也太容易出错了,因此:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// this: CoroutineScope</span>    launch <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在 runBlocking 作用域中启动一个新协程</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>直接在对应的coroutineScope中启动协程,而不是使用GlobalScope.</p><h2 id="调用顺序问题"><a href="#调用顺序问题" class="headerlink" title="调用顺序问题"></a>调用顺序问题</h2><ul><li><p>顺序调用</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one <span class="token operator">+</span> two<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre></li><li><p>async并发</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>Lazy 的 async并发</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行一些计算</span>    one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启动第一个</span>    two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启动第二个</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre><p>只有结果通过await获取的时候协程才会启动,或者在Job的start函数调用的时候.</p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://developer.android.com/kotlin/coroutines-adv?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/kotlin/coroutines-adv?hl=zh-cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粗糙的谈一下Kotlin中的CoroutineScope</title>
      <link href="/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-coroutinescope/"/>
      <url>/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-coroutinescope/</url>
      
        <content type="html"><![CDATA[<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>CoroutineScope其实定义了协程的生命周期,比如在Activity中启动的协程,在Activity销毁的时候应该要取消.</p><p>而GlobalScope则是对应整个APP的生命周期,即使Activity已经销毁,CoroutineScope依然继续运行,可能导致协程泄漏,内存泄漏.</p><h2 id="CoroutineScope"><a href="#CoroutineScope" class="headerlink" title="CoroutineScope"></a>CoroutineScope</h2><p>先来看一下它的定义:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不建议使用普通的代码访问这个属性,除非使用Job()用于一些高级使用场景</span>    <span class="token comment" spellcheck="true">// 按照约定,这个属性应该包含一个Job对象用于强制执行结构化并发,比如可以这么用coroutineContext[Job]</span>    <span class="token keyword">public</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext<span class="token punctuation">}</span></code></pre><p>可以看到,就是一个只带一个Field的简单接口.</p><p>CortoutineScope中封装了CoroutineContext,用于各种CortoutineScope的extention方法,比如<code>GlobalScope.launch</code>.</p><p>可以使用诸如下面这样的代码去创建CoroutineScope:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> coroutineScope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main <span class="token operator">+</span> job<span class="token punctuation">)</span></code></pre><p>再比如ViewModel提供的协程实现:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ViewModel<span class="token punctuation">.</span>viewModelScope<span class="token operator">:</span> CoroutineScope        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> scope            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">setTagIfAbsent</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">,</span>                <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span> <span class="token operator">:</span> Closeable<span class="token punctuation">,</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> context    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        coroutineContext<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里都会对CoroutineContext进行 <code>+</code>操作,这里其实就是一个操作符重载.</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext <span class="token operator">=</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> <span class="token keyword">this</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// fast path -- avoid lambda creation</span>            context<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> element <span class="token operator">-></span>                <span class="token keyword">val</span> removed <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">minusKey</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>removed <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> element <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// make sure interceptor is always last in the context (and thus is fast to get when present)</span>                    <span class="token keyword">val</span> interceptor <span class="token operator">=</span> removed<span class="token punctuation">[</span>ContinuationInterceptor<span class="token punctuation">]</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">CombinedContext</span><span class="token punctuation">(</span>removed<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">val</span> left <span class="token operator">=</span> removed<span class="token punctuation">.</span><span class="token function">minusKey</span><span class="token punctuation">(</span>ContinuationInterceptor<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> <span class="token function">CombinedContext</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> interceptor<span class="token punctuation">)</span> <span class="token keyword">else</span>                            <span class="token function">CombinedContext</span><span class="token punctuation">(</span><span class="token function">CombinedContext</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">,</span> interceptor<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><h2 id="创建自定义的CoroutineScope"><a href="#创建自定义的CoroutineScope" class="headerlink" title="创建自定义的CoroutineScope"></a>创建自定义的CoroutineScope</h2><ul><li><p>使用<code>CoroutineScope()</code><strong>方法</strong></p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">createScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// doSomething()</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>CoroutineScope</code>是一个方法:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineScope <span class="token operator">=</span>    <span class="token function">ContextScope</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">[</span>Job<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> context <span class="token keyword">else</span> context <span class="token operator">+</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>需要注意的是,在组件生命周期结束时记得cancel操作</strong></p></li></ul><h2 id="如果不使用GlobalScope-使用什么Scope"><a href="#如果不使用GlobalScope-使用什么Scope" class="headerlink" title="如果不使用GlobalScope,使用什么Scope?"></a>如果不使用GlobalScope,使用什么Scope?</h2><p>如果不想自己自定义CoroutineScope,可以有下面这些选择:</p><ul><li><p>使用MainScope</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">class</span> MyAndroidActivity <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          scope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>这里的MainScope其实也是一个简单的拓展实现:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CoroutineScope <span class="token operator">=</span> <span class="token function">ContextScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span></code></pre><p>注意到这里使用的是<code>Dispatchers.Main</code>,因此不要在里面做耗时操作.可以与<code>withContext()</code>方法组合使用.</p></li><li><p>使用AndroidX提供的ViewModelScope等.</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ViewModel<span class="token punctuation">.</span>viewModelScope<span class="token operator">:</span> CoroutineScope        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> scope            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">setTagIfAbsent</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">,</span>                <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span> <span class="token operator">:</span> Closeable<span class="token punctuation">,</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> context    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        coroutineContext<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>image_picker的使用</title>
      <link href="/2020/10/27/flutter/image-picker-de-shi-yong/"/>
      <url>/2020/10/27/flutter/image-picker-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>简单记录一下<code>image_picker</code>的使用</p><h2 id="从相册选择图片"><a href="#从相册选择图片" class="headerlink" title="从相册选择图片"></a>从相册选择图片</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickImageFromGallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span>        <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>gallery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相机拍摄照片并选择"><a href="#从相机拍摄照片并选择" class="headerlink" title="从相机拍摄照片并选择"></a>从相机拍摄照片并选择</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickImageFromCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相册选择视频"><a href="#从相册选择视频" class="headerlink" title="从相册选择视频"></a>从相册选择视频</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickVideoFromGallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span>        <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVideo</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>gallery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相机拍摄视频并选择"><a href="#从相机拍摄视频并选择" class="headerlink" title="从相机拍摄视频并选择"></a>从相机拍摄视频并选择</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickVideoFromCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVideo</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetpack App Startup库的使用</title>
      <link href="/2020/10/25/android/appstart-ku-de-shi-yong/"/>
      <url>/2020/10/25/android/appstart-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>应用启动时进行高性能的初始化</li><li>明确定义各种初始化的依赖关系</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先添加依赖:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"androidx.startup:startup-runtime:1.0.0-beta01"</span><span class="token punctuation">)</span></code></pre><p>你得为每一个需要初始化的组件实现一个Initializer.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Initializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    T <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Initializer</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到,就只有两个方法:</p><ul><li>create() : 用于执行初始化操作</li><li>dependencies() : 用于配置依赖</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// Initializes ExampleLogger.</span><span class="token keyword">class</span> ExampleLoggerInitializer <span class="token operator">:</span> Initializer<span class="token operator">&lt;</span>ExampleLogger<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">create</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> ExampleLogger <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// WorkManager.getInstance() is non-null only after</span>        <span class="token comment" spellcheck="true">// WorkManager is initialized.</span>        <span class="token keyword">return</span> <span class="token function">ExampleLogger</span><span class="token punctuation">(</span>WorkManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token keyword">out</span> Initializer<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Defines a dependency on WorkManagerInitializer so it can be</span>        <span class="token comment" spellcheck="true">// initialized after WorkManager is initialized.</span>        <span class="token keyword">return</span> <span class="token function">listOf</span><span class="token punctuation">(</span>WorkManagerInitializer<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面可以看出,一般都需要返回组件的对象.</p><p>从这一点上来看,这个AppStart库比较鸡肋,因为很多库都不是返回一个单例类的实例的.</p><h2 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>merge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- This entry makes ExampleLoggerInitializer discoverable. --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.ExampleLoggerInitializer<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span></code></pre><p>需要在manifest文件中进行配置.</p><h2 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>merge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.ExampleLoggerInitializer<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span></code></pre><p>或者</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>其实就是node属性控制的.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>源码比较简单,就只有几个类而已,没什么好说的.</p><p>总的来说,app start库并不值得推荐:</p><ul><li><p>性能</p><p>这个库使用的依然是ContentProvider,而且是基于反射的,性能并不比直接使用ContentProvider高</p></li><li><p>易用性</p><p>需要再Manifest中配置,并不是很方便</p></li></ul><p>唯一值得借鉴的,也就是依赖关系与初始化的顺序封装了.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/topic/libraries/app-startup?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/app-startup?hl=zh-cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jetpack </tag>
            
            <tag> App Startup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android微件的简单用法</title>
      <link href="/2020/10/25/android/android-wei-jian-de-jian-dan-yong-fa/"/>
      <url>/2020/10/25/android/android-wei-jian-de-jian-dan-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>即Widget</p><h2 id="微件类型"><a href="#微件类型" class="headerlink" title="微件类型"></a>微件类型</h2><ul><li><p>信息微件</p><p><img src="https://developer.android.com/design/media/widgets_info.png?hl=zh-cn" alt="img"></p></li><li><p>集合微件</p><p><img src="https://developer.android.com/design/media/widgets_collection_gmail.png?hl=zh-cn" alt="img"></p></li><li><p>控制微件</p><p><img src="https://oss.jiangkang.tech/jk/widgets_control.png" alt="img"></p></li><li><p>混合微件</p><p><img src="https://developer.android.com/design/media/widgets_hybrid.png?hl=zh-cn" alt="img"></p></li></ul><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li><p>手势</p><p>微件只能支持以下两种手势:</p><ul><li>轻触</li><li>纵向滑动</li></ul></li></ul><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>创建AppWidgetProvider的子类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> KToolsAppWidgetProvider <span class="token operator">:</span> <span class="token function">AppWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onUpdate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> appWidgetManager<span class="token operator">:</span> AppWidgetManager<span class="token punctuation">,</span> appWidgetIds<span class="token operator">:</span> IntArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUpdate</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> appWidgetManager<span class="token punctuation">,</span> appWidgetIds<span class="token punctuation">)</span>        appWidgetIds<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> appWidgetId <span class="token operator">-></span>            <span class="token keyword">val</span> pendingIntent<span class="token operator">:</span> PendingIntent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> intent <span class="token operator">-></span>                        PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>            <span class="token keyword">val</span> views<span class="token operator">:</span> RemoteViews <span class="token operator">=</span> <span class="token function">RemoteViews</span><span class="token punctuation">(</span>                    context<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_ktools_widget            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                <span class="token function">setOnClickPendingIntent</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_action<span class="token punctuation">,</span> pendingIntent<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            appWidgetManager<span class="token punctuation">.</span><span class="token function">updateAppWidget</span><span class="token punctuation">(</span>appWidgetId<span class="token punctuation">,</span> views<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这实际上是一个BroadcastReceiver.因此需要再Manifest文件中注册:</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token operator">&lt;</span>receiver            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".receiver.KToolsAppWidgetProvider"</span>            android<span class="token operator">:</span>enabled<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.appwidget.action.APPWIDGET_UPDATE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>            <span class="token operator">&lt;</span>meta<span class="token operator">-</span><span class="token keyword">data</span>                android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.appwidget.provider"</span>                android<span class="token operator">:</span>resource<span class="token operator">=</span><span class="token string">"@xml/ktools_appwidget_info"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span></code></pre></li><li><p>配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appwidget-provider</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minWidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>updatePeriodMillis</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>86400000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>previewImage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/landscape<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>initialLayout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/layout_ktools_widget<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>resizeMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal|vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>widgetCategory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home_screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appwidget-provider</span><span class="token punctuation">></span></span></code></pre></li></ol><p>到这里基本上就差不多了,实际开发比较少见,如果真的遇到了,再看文档进行实际开发不迟.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/topics/appwidgets/overview?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/appwidgets/overview?hl=zh-cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单用法 </tag>
            
            <tag> 微件 </tag>
            
            <tag> App Widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android快捷方式的简单用法</title>
      <link href="/2020/10/25/android/android-kuai-jie-fang-shi-de-jian-dan-yong-fa/"/>
      <url>/2020/10/25/android/android-kuai-jie-fang-shi-de-jian-dan-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>从Android 7.1 开始支持</p><h2 id="快捷方式类型"><a href="#快捷方式类型" class="headerlink" title="快捷方式类型"></a>快捷方式类型</h2><ul><li><p>静态</p><p>以xml形式配置,并在主Activity中的<code>&lt;meta-data&gt;</code>标签下置顶</p><p>Android Studio并不能很好的支持,暂时没找到问题所在</p></li><li><p>动态</p><p>可以随时改变,即使是程序运行过程中</p></li><li><p>固定</p><p>固定到屏幕底部的快捷启动栏中(对于国内很多手机来说,并不是底部,而是多了一个icon入口而已,一般会弹出一个框,请求添加快捷方式)</p></li></ul><p><img src="https://oss.jiangkang.tech/jk/pinned-shortcuts.png" alt="Screenshot showing contrast between app shortcuts   and pinned shortcuts"></p><h2 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h2><p><code>ShortcutManager</code>支持以下几种操作:</p><ul><li><p>Publish</p><ul><li>重新定义快捷方式入口 : <code>setDynamicShortcuts()</code></li><li>添加新的入口 : <code>addDynamicShortcuts()</code></li></ul></li><li><p>Update</p><p><code>updateShortcuts()</code></p></li><li><p>Remove</p><ul><li>移除部分: <code>removeDynamicShortcuts()</code></li><li>移除全部: <code>removeAllDynamicShortcuts()</code></li></ul></li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> shortcutManager <span class="token operator">=</span> getSystemService<span class="token operator">&lt;</span>ShortcutManager<span class="token operator">></span><span class="token punctuation">(</span>ShortcutManager<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token keyword">val</span> shortcut <span class="token operator">=</span> ShortcutInfo<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"id1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setShortLabel</span><span class="token punctuation">(</span><span class="token string">"Website"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setLongLabel</span><span class="token punctuation">(</span><span class="token string">"Open the website"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>Icon<span class="token punctuation">.</span><span class="token function">createWithResource</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>icon_website<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setIntent</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span>                Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://www.mysite.example.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shortcutManager<span class="token operator">!!</span><span class="token punctuation">.</span>dynamicShortcuts <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>shortcut<span class="token punctuation">)</span></code></pre><p>不过一般还是使用<code>ShortcutManagerCompat</code>等兼容类.</p><h2 id="固定"><a href="#固定" class="headerlink" title="固定"></a>固定</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> shortcutManager <span class="token operator">=</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>ShortcutManager<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>shortcutManager<span class="token operator">!!</span><span class="token punctuation">.</span>isRequestPinShortcutSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assumes there's already a shortcut with the ID "my-shortcut".</span>    <span class="token comment" spellcheck="true">// The shortcut must be enabled.</span>    <span class="token keyword">val</span> pinShortcutInfo <span class="token operator">=</span> ShortcutInfo<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"my-shortcut"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Create the PendingIntent object only if your app needs to be notified</span>    <span class="token comment" spellcheck="true">// that the user allowed the shortcut to be pinned. Note that, if the</span>    <span class="token comment" spellcheck="true">// pinning operation fails, your app isn't notified. We assume here that the</span>    <span class="token comment" spellcheck="true">// app has implemented a method called createShortcutResultIntent() that</span>    <span class="token comment" spellcheck="true">// returns a broadcast intent.</span>    <span class="token keyword">val</span> pinnedShortcutCallbackIntent <span class="token operator">=</span> shortcutManager<span class="token punctuation">.</span><span class="token function">createShortcutResultIntent</span><span class="token punctuation">(</span>pinShortcutInfo<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Configure the intent so that your app's broadcast receiver gets</span>    <span class="token comment" spellcheck="true">// the callback successfully.For details, see PendingIntent.getBroadcast().</span>    <span class="token keyword">val</span> successCallback <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* request code */</span> <span class="token number">0</span><span class="token punctuation">,</span>            pinnedShortcutCallbackIntent<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* flags */</span> <span class="token number">0</span><span class="token punctuation">)</span>    shortcutManager<span class="token punctuation">.</span><span class="token function">requestPinShortcut</span><span class="token punctuation">(</span>pinShortcutInfo<span class="token punctuation">,</span>            successCallback<span class="token punctuation">.</span>intentSender<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用固定快捷方式的时候,一定要注意返回的Intent,这样返回的时候可以直接返回首页了.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/topics/ui/shortcuts/creating-shortcuts?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/shortcuts/creating-shortcuts?hl=zh-cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷方式 </tag>
            
            <tag> Shortcut </tag>
            
            <tag> 简单用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android通知的简单用法</title>
      <link href="/2020/10/25/android/android-tong-zhi-de-jian-dan-yong-fa/"/>
      <url>/2020/10/25/android/android-tong-zhi-de-jian-dan-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>由于不同版本API兼容性问题,我们通常使用<code>NotificationCompact</code>去创建通知.</p><h2 id="注册NotificationChannel"><a href="#注册NotificationChannel" class="headerlink" title="注册NotificationChannel"></a>注册NotificationChannel</h2><p>一般在应用启动的时候注册通知channel:</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> channelIdNormal <span class="token operator">=</span> <span class="token string">"ktools_channel_normal"</span>    <span class="token comment" spellcheck="true">/**     * 应用启动时调用     */</span>    <span class="token keyword">fun</span> <span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">val</span> channel <span class="token operator">=</span> <span class="token function">NotificationChannel</span><span class="token punctuation">(</span>channelIdNormal<span class="token punctuation">,</span>  channelIdNormal<span class="token punctuation">,</span>NotificationManager<span class="token punctuation">.</span>IMPORTANCE_HIGH<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            description <span class="token operator">=</span> <span class="token string">"应用中的普通通知"</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="点击动作"><a href="#点击动作" class="headerlink" title="点击动作"></a>点击动作</h2><p>使用PenddingIntent:</p><pre class=" language-kotlin"><code class="language-kotlin">PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getActivities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getForegroundService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="显示-更新通知"><a href="#显示-更新通知" class="headerlink" title="显示/更新通知"></a>显示/更新通知</h2><pre class=" language-kotlin"><code class="language-kotlin">context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> notification<span class="token punctuation">)</span></code></pre><h2 id="移除通知"><a href="#移除通知" class="headerlink" title="移除通知"></a>移除通知</h2><p>除非发生以下情况之一，否则通知仍然可见：</p><ul><li>用户关闭通知。</li><li>用户点击通知，且您在创建通知时调用了 <code>setAutoCancel()</code>。</li><li>您针对特定的通知 ID 调用了 <code>cancel()</code>。此方法还会删除当前通知。</li><li>您调用了 <code>cancelAll()</code> 方法，该方法将移除之前发出的所有通知。</li><li>如果您在创建通知时使用 <code>setTimeoutAfter()</code> 设置了超时，系统会在指定持续时间过后取消通知。如果需要，您可以在指定的超时持续时间过去之前取消通知。</li></ul><h2 id="勿扰模式与通知类别"><a href="#勿扰模式与通知类别" class="headerlink" title="勿扰模式与通知类别"></a>勿扰模式与通知类别</h2><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>CATEGORY_MESSAGE<span class="token punctuation">)</span></code></pre><p>用来确定用户在勿扰模式下通知是否打扰用户.(并不是必须的)</p><h2 id="通知的样式"><a href="#通知的样式" class="headerlink" title="通知的样式"></a>通知的样式</h2><ul><li><p>普通的通知</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">createNotification</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> smallIconID<span class="token operator">:</span> Int<span class="token punctuation">,</span> title<span class="token operator">:</span> String<span class="token punctuation">,</span> content<span class="token operator">:</span> String<span class="token punctuation">,</span> intent<span class="token operator">:</span> Intent<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">val</span> pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span>        <span class="token keyword">val</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> channelIdNormal<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>smallIconID<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>PRIORITY_DEFAULT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_btn_speak_now<span class="token punctuation">,</span><span class="token string">"Voice"</span><span class="token punctuation">,</span>pendingIntent<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> id <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> notification<span class="token punctuation">)</span>        <span class="token keyword">return</span> id    <span class="token punctuation">}</span></code></pre></li><li><p>带进度条</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><p>最后一个参数表示是否未具体的进度和无限循环的样式.</p></li><li><p>应用图标上的红点通知</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setShowBadge</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li><p>可展开的通知</p><ul><li><p>大图</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">BigPictureStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">bigPicture</span><span class="token punctuation">(</span>myBitmap<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>大段文本</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">BigTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bigText</span><span class="token punctuation">(</span>emailObject<span class="token punctuation">.</span><span class="token function">getSubjectAndSnippet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>收件箱样式</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">InboxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>messageSnippet1<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>messageSnippet2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>对话框样式</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">var</span> message1 <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span>MessagingStyle<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> message2 <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span>MessagingStyle<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> CHANNEL_ID<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>new_message<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">MessagingStyle</span><span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>reply_name<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>媒体类型样式</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>NotificationCompat    <span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>media<span class="token punctuation">.</span>app<span class="token punctuation">.</span>NotificationCompat <span class="token keyword">as</span> MediaNotificationCompat    <span class="token keyword">var</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> CHANNEL_ID<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Show controls on lock screen even when user hides sensitive content.</span>            <span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>VISIBILITY_PUBLIC<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_stat_player<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Add media control buttons that invoke intents in your media service</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_prev<span class="token punctuation">,</span> <span class="token string">"Previous"</span><span class="token punctuation">,</span> prevPendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #0</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_pause<span class="token punctuation">,</span> <span class="token string">"Pause"</span><span class="token punctuation">,</span> pausePendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #1</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_next<span class="token punctuation">,</span> <span class="token string">"Next"</span><span class="token punctuation">,</span> nextPendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #2</span>            <span class="token comment" spellcheck="true">// Apply the media style template</span>            <span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>MediaNotificationCompat<span class="token punctuation">.</span><span class="token function">MediaStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setShowActionsInCompactView</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment" spellcheck="true">/* #1: pause button \*/</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMediaSession</span><span class="token punctuation">(</span>mediaSession<span class="token punctuation">.</span><span class="token function">getSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"Wonderful music"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"My Awesome Band"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>albumArtBitmap<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>自定义布局</p><ul><li><p>直接使用<code>setCustomBigContentView</code>,但是不使用<code>setStyle</code></p></li><li><p>使用<code>setStyle</code> + RemoteView:</p><pre><code>    // Get the layouts to use in the custom notification    val notificationLayout = RemoteViews(packageName, R.layout.notification_small)    val notificationLayoutExpanded = RemoteViews(packageName, R.layout.notification_large)    // Apply the layouts to the notification    val customNotification = NotificationCompat.Builder(context, CHANNEL_ID)            .setSmallIcon(R.drawable.notification_icon)            .setStyle(NotificationCompat.DecoratedCustomViewStyle())            .setCustomContentView(notificationLayout)            .setCustomBigContentView(notificationLayoutExpanded)            .build()</code></pre></li></ul></li></ul><h2 id="打开通知设置页"><a href="#打开通知设置页" class="headerlink" title="打开通知设置页"></a>打开通知设置页</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_CHANNEL_NOTIFICATION_SETTINGS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">putExtra</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>EXTRA_APP_PACKAGE<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span>        <span class="token function">putExtra</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>EXTRA_CHANNEL_ID<span class="token punctuation">,</span> myNotificationChannel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn</a></li><li><a href="https://developer.android.com/training/notify-user/expanded?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/notify-user/expanded?hl=zh-cn</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单用法 </tag>
            
            <tag> Notification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的泛型</title>
      <link href="/2020/10/14/android/kotlin-zhong-de-fan-xing/"/>
      <url>/2020/10/14/android/kotlin-zhong-de-fan-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如果A,B表示类型,f(*)表示类型转换, &lt;= 表示继承关系(如果 A &lt;= B,则表示A是B的子类)</p><ul><li><p>里氏替换原则(LSP)</p><p>子类对象可以在程序中替换基类对象,”SOLID”原则中的L就是这个.</p></li><li><p>协变</p><p>如果f(*)是协变的,当 A &lt;= B时,f(A) &lt;= f(B)成立</p></li><li><p>逆变</p><p>如果f(*)是协变的,当 A &lt;= B时,f(B) &lt;= f(A)成立</p></li><li><p>不变</p><p>如果f(*)是不变的,当A &lt;= B时,f(A)和f(B)没有继承关系</p></li></ul><p>比如<code>f(A) = ArrayList&lt;A&gt;</code>, <code>f(B) = ArrayList&lt;B&gt;</code>:</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>先看一下下面这行代码:</p><pre class=" language-java"><code class="language-java"> ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>很明显,在Java中这样写是错误的.因为ArrayList&lt;&gt;是不变的,因此两个类并没有继承关系,不能这么写</strong></p><p><strong>在Java中泛型是不变的,因此f(A)和f(B)没有继承关系.</strong></p><p><strong>在Java中数组是协变的,f(A) &lt;= f(B)</strong></p><p>对于泛型来说,有时候需要协变和逆变怎么办?</p><ul><li><p>泛型协变 : &lt;? extends ClassA&gt;</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>泛型逆变: &lt;? super ClassA&gt;</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><code>&lt;? extends ClassA&gt;</code>决定了泛型的上界,即基类是ClassA,匹配的类只能是ClassA或者ClassA的子类</p><p><code>&lt;? super ClassA&gt;</code>决定了泛型的下界,即子类是ClassA,匹配的类只能是ClassA或者ClassA的父类.</p><p>并且有一个辅助记忆的词: <strong>PECS</strong> = <strong>Producer-extends  Consumer-super</strong></p><p><strong>只能从中进行读取操作的对象是生产者,只能向其中写入数据的对象是消费者</strong></p><p>也就是说<strong>extends只允许读操作,super只允许写操作,读写都要则不要使用通配符</strong></p><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>Kotlin中的泛型与Java类似,一般是不型变的,不过也有修饰符分别对应协变和逆变:</p><ul><li><p><code>out</code></p><p>相当于Java 中的extends,协变,只允许从中读取数据,不允许写</p></li><li><p><code>in</code></p><p>相当于Java中的super,逆变,只允许向其中写数据,不允许读</p></li></ul><p><strong>Kotlin是在泛型声明的时候就使用型变的,因此叫做声明处型变</strong></p><p>Kotlin还有一种叫做星投影的东西,即<code>Foo&lt;*&gt;</code>,每个具体的实例化都是该投影的自类型.而且泛型擦除都会擦为<code>Foo&lt;*&gt;</code></p><p>至于Kotlin泛型的上下界约束问题:</p><ul><li><p>上界</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Animal<span class="token operator">&lt;</span>T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>用一个冒号即可表示,如果没有指定,则默认是<code>Any?</code></p><p>如果需要使用多个上界(<strong>在尖括号中只能指定一个上界</strong>),则需要使用<code>where</code>修饰符:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">demo</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> threshold<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span>        <span class="token keyword">where</span> T <span class="token operator">:</span> CharSequence<span class="token punctuation">,</span>              T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> threshold <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所传递的类型必须同时满足where语句的所有条件,比如上面的例子,类型 <code>T</code> 必须<em>既</em>实现了 <code>CharSequence</code> <em>也</em>实现了 <code>Comparable</code>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/en-heng/p/5041124.html" target="_blank" rel="noopener">https://www.cnblogs.com/en-heng/p/5041124.html</a></li><li><a href="https://www.kotlincn.net/docs/reference/generics.html" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/generics.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的inline</title>
      <link href="/2020/10/14/android/kotlin-zhong-de-inline/"/>
      <url>/2020/10/14/android/kotlin-zhong-de-inline/</url>
      
        <content type="html"><![CDATA[<h2 id="inline-noinline-crossinline-reified"><a href="#inline-noinline-crossinline-reified" class="headerlink" title="inline/noinline/crossinline/reified"></a>inline/noinline/crossinline/reified</h2><p>内联,这个概念无需多说.</p><p>kotlin中使用高阶函数在运行时会有一些性能损失:每一个函数都是一个对象,并且都会捕获一个闭包(哪些在函数体内可以访问到的变量),对函数对象和类进行内存分配,和虚拟调用都会引入一些运行时间开销.</p><p>因此kotlin中经常<strong>用inline来优化lambda表达式</strong>,比如我们常用的<code>let</code>,<code>apply</code>方法:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token punctuation">{</span>    contract <span class="token punctuation">{</span>        <span class="token function">callsInPlace</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> InvocationKind<span class="token punctuation">.</span>EXACTLY_ONCE<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不过内联可能会导致生成的字节码增加,尽量不要将过大的函数进行内联.</p><h3 id="禁用内联-noinline"><a href="#禁用内联-noinline" class="headerlink" title="禁用内联/noinline"></a>禁用内联/noinline</h3><p>有时候内联方法中传入了lambda表达式作为参数,但是又不想这个参数lambda内联,可以使用<code>noinline</code>禁用内联:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T <span class="token operator">:</span> Task<span class="token operator">></span> Project<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token keyword">noinline</span> configuration<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">registering</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span></code></pre><blockquote><p> 对于那些并没有什么益处的内联,编译器会产生一个警告</p></blockquote><h3 id="非局部返回"><a href="#非局部返回" class="headerlink" title="非局部返回"></a>非局部返回</h3><p>kotlin中我们只能对具名或者匿名函数使用正常的return来退出,在lambda表达式中则必须使用一个标签来return.</p><p>有一种情况例外,就是lambda是内联的,这个时候可以正常return(因为lambda的return也内联了).</p><p>这么说可能不清楚,来个例子吧:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">funWithoutInline</span><span class="token punctuation">(</span>block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">funInline</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Boolean<span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 只能使用这种方式,不能直接return</span>   funWithoutInline <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token label symbol">@funWithoutInline</span>   <span class="token punctuation">}</span>   funInline <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span>   funInline <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token label symbol">@funInline</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><blockquote><p>Break 和continue 在内联的lambda表达式暂时不可用.</p></blockquote><h3 id="内联lambda嵌套问题"><a href="#内联lambda嵌套问题" class="headerlink" title="内联lambda嵌套问题"></a>内联lambda嵌套问题</h3><p>对于一般嵌套的lambda没什么影响,内联的lambda则需要使用<code>crossinline</code>进行修饰:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">embedInlineFun</span><span class="token punctuation">(</span><span class="token keyword">crossinline</span> block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>     Runnable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不加crossinline会报错</span>        <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">embedFun</span><span class="token punctuation">(</span>block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   Runnable <span class="token punctuation">{</span>      <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="具体化的类型参数"><a href="#具体化的类型参数" class="headerlink" title="具体化的类型参数"></a>具体化的类型参数</h2><p>其实就是<code>inline</code> + <code>reified</code> + 泛型,最典型的例子就是下面这个:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">:</span> Activity<span class="token operator">></span> Context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这个修饰符的作用就是在方法内部可以使用具体化的类型参数.</p><blockquote><p>reified 修饰符必须与 inline搭配使用</p></blockquote><h3 id="内联属性"><a href="#内联属性" class="headerlink" title="内联属性"></a>内联属性</h3><p>不多说,看代码:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> foo<span class="token operator">:</span> Foo    <span class="token keyword">inline</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> bar<span class="token operator">:</span> Bar    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ……    <span class="token keyword">inline</span> <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">var</span> bar<span class="token operator">:</span> Bar    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ……    <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> inline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的infix</title>
      <link href="/2020/10/14/android/kotlin-zhong-de-infix/"/>
      <url>/2020/10/14/android/kotlin-zhong-de-infix/</url>
      
        <content type="html"><![CDATA[<h2 id="infix"><a href="#infix" class="headerlink" title="infix"></a>infix</h2><p>即<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener"> “中缀表示法”</a>,比如 <code>1 + 2</code>表示操作符以中缀的形式处于操作数的中间.(对应的也有前缀表达式,后缀表达式)</p><p>在kotlin中有这样的几种调用:</p><pre class=" language-kotlin"><code class="language-kotlin">   <span class="token keyword">val</span> map <span class="token operator">=</span> mapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Int<span class="token operator">></span><span class="token punctuation">(</span>           <span class="token string">"a"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token string">"b"</span> <span class="token keyword">to</span> <span class="token number">2</span>   <span class="token punctuation">)</span>   <span class="token keyword">val</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">or</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">shl</span> <span class="token number">2</span></code></pre><p>上面的<code>to</code>,<code>or</code>,<code>shl</code>都是用<code>infix</code>修饰的函数,比如<code>to</code>:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> infix <span class="token keyword">fun</span> <span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> A<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>that<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token operator">:</span> Pair<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> that<span class="token punctuation">)</span></code></pre><p>infix函数必须满足下面条件:</p><ul><li>必须是成员函数或者拓展函数</li><li>必须只有一个参数</li><li>其参数不得接受可变数量的参数,并且不能有默认值</li></ul><p>还有一点需要注意的就是: <strong>infix调用 优先级 低于算数操作符/类型转换/rangeTo操作符等,但是其优先级高于&amp;&amp; ,||,is , in等操作符,因此使用infix的时候最好按照意图在适当的地方加上括号,避免混乱</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> infix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Android中的事件分发机制</title>
      <link href="/2020/10/13/android/shen-ru-qian-chu-android-zhong-de-shi-jian-fen-fa-ji-zhi/"/>
      <url>/2020/10/13/android/shen-ru-qian-chu-android-zhong-de-shi-jian-fen-fa-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="从输入硬件到Android窗口"><a href="#从输入硬件到Android窗口" class="headerlink" title="从输入硬件到Android窗口"></a>从输入硬件到Android窗口</h2><p>这里直接从底层硬件分析到事件传递到View的流程,具体的调用链查看源码,这里是基于Android 10 的源码分析的.</p><p><img src="https://oss.jiangkang.tech/jk/%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6.png" alt="输入事件"></p><p>主要流程如下:</p><ol><li>输入设备产生信号,比如手触摸屏幕,触摸屏产生电流或者电压信号,传递给设备固件</li><li>设备固件对信号进行编码和处理,比如产生中断,比如发送USB HID报告</li><li>Linux内核驱动程序接收到信号,并按照input.h中定义的协议,将信号转换成事件</li><li>EventHub通过libevdev读取各个设备(如/dev/input/event4)的事件,并传递给InputReader</li><li>InputReader将事件封装成Android事件流,传递给InputDispatcher进行分发</li><li>InputDispatcher通过InputChannel与Java层的InputEventReceiver联系上,并调用它的方法进行事件分发</li><li>最终会进入到ViewRootImpl中,根据输入阶段不同,进行不同的处理,最终会调用到DecorView的dispatchTouchEvent()方法</li><li>再之后就是我们熟悉的View/ViewGroup事件分发流程了</li></ol><h2 id="View-ViewGroup事件分发"><a href="#View-ViewGroup事件分发" class="headerlink" title="View/ViewGroup事件分发"></a>View/ViewGroup事件分发</h2><ol><li><p>进入到DecorView中的dispatchTouchEvent(event)方法:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的callback实现类有Activity,Dialog等,这里只分析Activity的</span>        <span class="token keyword">final</span> Window<span class="token punctuation">.</span>Callback cb <span class="token operator">=</span> mWindow<span class="token punctuation">.</span><span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cb <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mWindow<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mFeatureId <span class="token operator">&lt;</span> <span class="token number">0</span>                <span class="token operator">?</span> cb<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Activity中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 调用window的事件分发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Window的实现类是PhoneWindow中,因此:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// mDecor是DecorView</span>        <span class="token keyword">return</span> mDecor<span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>DecorView中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ViewGroup</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>ViewGroup中:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> handled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果window做了模糊处理,则不处理事件分发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> actionMasked <span class="token operator">=</span> action <span class="token operator">&amp;</span> MotionEvent<span class="token punctuation">.</span>ACTION_MASK<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重制状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 拦截处理</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// View有方法可以设置</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 关键点: 拦截</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// mFirstTouchTarget == null &amp;&amp; action != ACTION_DOWN</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check for cancelation.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Update list of touch targets for pointer down, if needed.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> split <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_SPLIT_MOTION_EVENTS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            TouchTarget newTouchTarget <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不是取消事件,也没有拦截</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canceled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>intercepted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                        <span class="token operator">||</span> <span class="token punctuation">(</span>split <span class="token operator">&amp;&amp;</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_POINTER_DOWN<span class="token punctuation">)</span>                        <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_HOVER_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">int</span> childrenCount <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTouchTarget <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> childrenCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 根据z重新排序子View</span>                        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>View<span class="token operator">></span> preorderedList <span class="token operator">=</span> <span class="token function">buildTouchDispatchChildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> <span class="token keyword">boolean</span> customOrder <span class="token operator">=</span> preorderedList <span class="token operator">==</span> null                                <span class="token operator">&amp;&amp;</span> <span class="token function">isChildrenDrawingOrderEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 关键</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 为mFirstTouchTarget赋值</span>                                newTouchTarget <span class="token operator">=</span> <span class="token function">addTouchTarget</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">;</span>                                alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorderedList <span class="token operator">!=</span> null<span class="token punctuation">)</span> preorderedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Dispatch to touch targets.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirstTouchTarget <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 关键</span>                handled <span class="token operator">=</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> canceled<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        TouchTarget<span class="token punctuation">.</span>ALL_POINTER_IDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                TouchTarget predecessor <span class="token operator">=</span> null<span class="token punctuation">;</span>                TouchTarget target <span class="token operator">=</span> mFirstTouchTarget<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> TouchTarget next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyDispatchedToNewTouchTarget <span class="token operator">&amp;&amp;</span> target <span class="token operator">==</span> newTouchTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">boolean</span> cancelChild <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">)</span>                                <span class="token operator">||</span> intercepted<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 关键</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> cancelChild<span class="token punctuation">,</span>                                target<span class="token punctuation">.</span>child<span class="token punctuation">,</span> target<span class="token punctuation">.</span>pointerIdBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里会进行一些判断(比如触摸点是否在对应的View内,避免无效计算),然后:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span>            View child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> oldAction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cancel <span class="token operator">||</span> oldAction <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> handled<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> MotionEvent transformedEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPointerIdBits <span class="token operator">==</span> oldPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> offsetX <span class="token operator">=</span> mScrollX <span class="token operator">-</span> child<span class="token punctuation">.</span>mLeft<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> offsetY <span class="token operator">=</span> mScrollY <span class="token operator">-</span> child<span class="token punctuation">.</span>mTop<span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 关键</span>                    handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span><span class="token operator">-</span>offsetX<span class="token punctuation">,</span> <span class="token operator">-</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> handled<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transformedEvent <span class="token operator">=</span> MotionEvent<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transformedEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>newPointerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Perform any necessary transformations and dispatch.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关键</span>            handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">float</span> offsetX <span class="token operator">=</span> mScrollX <span class="token operator">-</span> child<span class="token punctuation">.</span>mLeft<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">float</span> offsetY <span class="token operator">=</span> mScrollY <span class="token operator">-</span> child<span class="token punctuation">.</span>mTop<span class="token punctuation">;</span>            transformedEvent<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                transformedEvent<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getInverseMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//关键</span>            handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Done.</span>        transformedEvent<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里就将事件分发给子View了.</p></li><li><p>View#dispatchTouchEvent():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED <span class="token operator">&amp;&amp;</span> <span class="token function">handleScrollBarDragging</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 关键</span>            ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                    <span class="token comment" spellcheck="true">// OnTouchListener回调</span>                    <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果OnTouchListener消耗了事件,则不会执行后面的onTouchEvent()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里可以看到<strong>OnTouchListener#onTouch() 优先级 高于 onTouchEvent().</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> viewFlags <span class="token operator">=</span> mViewFlags<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> clickable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CLICKABLE                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> LONG_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> LONG_CLICKABLE<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CONTEXT_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CONTEXT_CLICKABLE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTouchDelegate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mTouchDelegate<span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clickable <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> TOOLTIP<span class="token punctuation">)</span> <span class="token operator">==</span> TOOLTIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                    <span class="token keyword">boolean</span> prepressed <span class="token operator">=</span> <span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PREPRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> prepressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">boolean</span> focusTaken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFocusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFocusableInTouchMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFocused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            focusTaken <span class="token operator">=</span> <span class="token function">requestFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mHasPerformedLongPress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mIgnoreNextUpEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// This is a tap, so remove the longpress check</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 处理点击事件</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>focusTaken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPerformClick <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 一个Runnbale</span>                                    mPerformClick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">post</span><span class="token punctuation">(</span>mPerformClick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">//一般不会进入这个分支</span>                                    <span class="token function">performClickInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    mIgnoreNextUpEvent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                    mHasPerformedLongPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clickable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 处理长按点击事件</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInScrollingContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPrivateFlags <span class="token operator">|=</span> PFLAG_PREPRESSED<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 检查点击事件</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingCheckForTap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mPendingCheckForTap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckForTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        mPendingCheckForTap<span class="token punctuation">.</span>x <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mPendingCheckForTap<span class="token punctuation">.</span>y <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">postDelayed</span><span class="token punctuation">(</span>mPendingCheckForTap<span class="token punctuation">,</span> ViewConfiguration<span class="token punctuation">.</span><span class="token function">getTapTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 长按</span>                        <span class="token function">setPressed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token operator">:</span>                    <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mInContextButtonPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mHasPerformedLongPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mIgnoreNextUpEvent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_FINGER_DOWN<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ambiguousGesture <span class="token operator">&amp;&amp;</span> <span class="token function">hasPendingLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pointInView</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> touchSlop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">*</span> mAmbiguousGestureMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// Subtract the time already spent</span>                            delay <span class="token operator">-=</span> event<span class="token punctuation">.</span><span class="token function">getEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span><span class="token function">getDownTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                    delay<span class="token punctuation">,</span>                                    x<span class="token punctuation">,</span>                                    y<span class="token punctuation">,</span>                                    TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        touchSlop <span class="token operator">*=</span> mAmbiguousGestureMultiplier<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pointInView</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> touchSlop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Outside button</span>                        <span class="token comment" spellcheck="true">// Remove any future long press/tap checks</span>                        <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">setPressed</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_FINGER_DOWN<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">final</span> <span class="token keyword">boolean</span> deepPress <span class="token operator">=</span>                            motionClassification <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>CLASSIFICATION_DEEP_PRESS<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>deepPress <span class="token operator">&amp;&amp;</span> <span class="token function">hasPendingLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// process the long click action immediately</span>                        <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                <span class="token number">0</span> <span class="token comment" spellcheck="true">/* send immediately */</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__DEEP_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>View#onTouchEvent()中的逻辑也比较复杂,需要注意几个要点:</p><ul><li>TouchDelegate具有很高的优先级,会最先进行判断,它是用来拓展View的可点击区域的(适合于View尺寸有限,但是需要扩大点击区域的场景)</li><li>点击事件和长安事件目前都封装成了Runnable,在DOWN,MOVE,UP,CANCEL等几种事件里都有逻辑,本质就是通过view的延时post方法,即Handler的延时发送来进行调度的</li></ul></li></ol><p>基本流程如下:</p><ol><li>DecorView -&gt; Activity -&gt; Window -&gt;ViewGroup#dispatchTouchEvent()</li><li>ViewGroup#onInterceptTouchEvent(ev),返回true,表示拦截,否则表示不拦截</li><li>如果不拦截,则调用dispatchTransformedTouchEvent(),child为null,则调用super.dispatchTouchEvent(),super是什么,是View,因此把当前ViewGroup当作View,并执行它的dispatchTouchEvent()方法;如果child不为null,则直接执行child的dispatchTouchEvent()方法,进入循环,遇到没有子View的时候执行View的dispatchTouchEvent()方法;</li><li>如果拦截,则调用自己的dispatchTransformedTouchEvent(),传入的child为null,因此会执行super.dispatchTouchEvent(),把自己当作View,执行View的dispatchTouchEvent()方法;</li><li>View#dispatchTouchEvent()方法中会执行<code>onTouchEvent()</code>方法;</li></ol><p>到这里整个流程其实就走通了,唯一可能导致疑惑的地方其实就是ViewGroup如何调用自身的onTouchEvent(),其实这里记住一点即可:</p><p><code>ViewGroup的super就是View,View中才有默认实现的onTouchEvent()</code>.</p><h2 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h2><p>从上面的源码分析可以看到:</p><p>OnTouchListener#onTouch()  大于  View#onTouchEvent() 大于 OnClickListener#onClick()</p><h2 id="View-onTouchEvent-返回值问题"><a href="#View-onTouchEvent-返回值问题" class="headerlink" title="View#onTouchEvent()返回值问题"></a>View#onTouchEvent()返回值问题</h2><p><strong>View如果消费了ACTION_DOWN,则后续的一系列ACTION都会传给这个View的onTouchEvent()来处理; View如果不消费ACTION_DOWN,则后续的一系列ACTION都不会交给它的onTouchEvent()处理;如果当前View和它的兄弟View都无法消费ACTION_DOWN,则会找它的父布局的onTouchEvent()去消费</strong></p><p><strong>所谓消费,指的就是View#onTouchEvent()的返回值,返回true,表示消费了,否则表示没消费</strong></p><h2 id="ViewGroup-onInterceptTouchEvent-ev-的问题"><a href="#ViewGroup-onInterceptTouchEvent-ev-的问题" class="headerlink" title="ViewGroup#onInterceptTouchEvent(ev)的问题"></a>ViewGroup#onInterceptTouchEvent(ev)的问题</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>从dispatchTouchEvent()开始,一层层的调用,直到View#onTouchEvent(),返回值其实是ViewGroup#dispatchTouchEvent()最终使用的:</p><p>如果返回fasle,则不会为mFirstTouchTarget赋值,否则将child赋值给mFristTouchTarget.那这又影响了什么呢?</p><p>如果不调用API请求不拦截事件,则只有两种情况下的任意一种,才会触发拦截:</p><ul><li>当前事件是ACTION_DOWN</li><li>mFirstTouchTarget != null (当前ViewGroup的所有子View的onTouchEvent()均返回false)</li></ul><p>因此得出结论:</p><ul><li><strong>只有ViewGroup才有onInterceptTouchEvent(ev)方法</strong></li><li><strong>只要是ACTION_DOWN事件,ViewGroup都会执行onInterceptTouchEvent(ev)方法</strong></li><li><strong>如果不是ACTION_DOWN事件,则要判断该ViewGroup的所有子View中是否能消耗ACTION_DOWN事件,即子View中是否有onTouchEvent()返回为true,如果有,则还会执行onInterceptTouchEvent(ev)方法,如果一个都没有,则不会执行onInterceptTouchEvent(ev)方法</strong></li><li><strong>如果ViewGroup的onInterceptTouchEvent(ev)返回了true,则其子View一种事件都获取不到,因为不会执行子View的dispatchTouchEvent()方法,就算仅仅是拦截了ACTION_DOWN;如果不拦截ACTION_DOWN,而拦截ACTION_MOVE,则子View可以正常捕获到ACTION_DOWN,但是后面会主动执行一个ACTION_CANCEL,就不再接收其他事件了.</strong></li></ul><h2 id="adb查看工具"><a href="#adb查看工具" class="headerlink" title="adb查看工具"></a>adb查看工具</h2><ul><li><p><code>getevent</code> : 输出所有event设备的基本信息</p><pre class=" language-shell"><code class="language-shell">130|cmi:/dev/input $ geteventadd device 1: /dev/input/event7  name:     "kona-mtp-snd-card USB_3_5 Jack"   #声音add device 2: /dev/input/event6  name:     "kona-mtp-snd-card Button Jack"    #add device 3: /dev/input/event5  name:     "kona-mtp-snd-card Headset Jack"  #耳机add device 4: /dev/input/event4  name:     "fts"                             #触摸屏add device 5: /dev/input/event1  name:     "uinput-goodix"                   #指纹传感器add device 6: /dev/input/event3               # 音量上按键  name:     "gpio-keys"add device 7: /dev/input/event0               #高通按键驱动  name:     "qpnp_pon"add device 8: /dev/input/event2  name:     "aw8697_haptic"                  #电机驱动</code></pre><p>此时如果触摸屏幕或者按键,会输出:</p><pre class=" language-shell"><code class="language-shell">/dev/input/event4: 0003 0039 ffffffff</code></pre><p>格式为: <code>设备名: 事件type 事件code 事件value</code> (这里的数字是16进制的)</p><p>如果使用<code>getevent -l</code>,则会输出具体的常量名称,比较易于理解:</p><pre class=" language-shell"><code class="language-shell">/dev/input/event4: EV_SYN       SYN_REPORT           00000000</code></pre><p>这些常量是定义在<code>sysroot/usr/include/linux/input.h</code>中的.</p></li><li><p><code>sendevent</code>: 模拟发送事件 (可能需要权限)</p><p>格式为: </p><pre class=" language-shell"><code class="language-shell">sendevent DEVICE TYPE CODE VALUE</code></pre><p>如:</p><pre class=" language-shell"><code class="language-shell">sendevent /dev/input/event0 0001 0114 00000001</code></pre><p>这里面的值是由16进制转换而成的10进制数.</p></li><li><p><code>getevent -p</code>: 查看详细的交互设备信息</p><p>输出如下:</p><pre class=" language-shell"><code class="language-shell">1|cmi:/dev/input $ getevent -padd device 1: /dev/input/event7  name:     "kona-mtp-snd-card USB_3_5 Jack"  events:    SW  (0005): 0002  0004  0013  input props:    <none>add device 2: /dev/input/event6  name:     "kona-mtp-snd-card Button Jack"  events:    KEY (0001): 00e2  0101  0102  0103  0104  0105  input props:    <none>add device 3: /dev/input/event5  name:     "kona-mtp-snd-card Headset Jack"  events:    SW  (0005): 0002  0004  0006  0007  0010  0011  0012  0013  input props:    <none>add device 4: /dev/input/event4  name:     "fts"  events:    KEY (0001): 0011  0012  0018  001a  001b  001f  0021  0026                002c  002e  002f  0032  003b  003c  003d  003e                003f  0067  0069  006a  006c  008f  0096  0145                014a  0152  0162    ABS (0003): 002f  : value 0, min 0, max 9, fuzz 0, flat 0, resolution 0                0030  : value 0, min 0, max 1080, fuzz 0, flat 0, resolution 0                0031  : value 0, min 0, max 2340, fuzz 0, flat 0, resolution 0                0032  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                0033  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                0034  : value 0, min -90, max 90, fuzz 0, flat 0, resolution 0                0035  : value 0, min 0, max 1079, fuzz 0, flat 0, resolution 0                0036  : value 0, min 0, max 2339, fuzz 0, flat 0, resolution 0                0039  : value 0, min 0, max 65535, fuzz 0, flat 0, resolution 0                003b  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0  input props:    INPUT_PROP_DIRECTadd device 5: /dev/input/event1  name:     "uinput-goodix"  events:    KEY (0001): 0066  0067  0069  006a  006c  0072  0073  0074                008b  009e  00d4  00d8  00d9  input props:    <none>add device 6: /dev/input/event3  name:     "gpio-keys"  events:    KEY (0001): 0073    SW  (0005): 0000  input props:    <none>add device 7: /dev/input/event0  name:     "qpnp_pon"  events:    KEY (0001): 0072  0074  input props:    <none>add device 8: /dev/input/event2  name:     "aw8697_haptic"  events:    FF  (0015): 0050  0051  0052  005d  0060  input props:    <none></code></pre></li><li><p><code>getevent -lp</code>或者 <code>getevent -lp /dev/input/event4</code> : 输出交互设备信息文字标签信息</p><pre class=" language-shell"><code class="language-shell">add device 1: /dev/input/event4  name:     "fts"  events:    KEY (0001): KEY_W                 KEY_E                 KEY_O                 KEY_LEFTBRACE                KEY_RIGHTBRACE        KEY_S                 KEY_F                 KEY_L                KEY_Z                 KEY_C                 KEY_V                 KEY_M                KEY_F1                KEY_F2                KEY_F3                KEY_F4                KEY_F5                KEY_UP                KEY_LEFT              KEY_RIGHT                KEY_DOWN              KEY_WAKEUP            KEY_WWW               BTN_TOOL_FINGER                BTN_TOUCH             0152                  KEY_GOTO    ABS (0003): ABS_MT_SLOT           : value 0, min 0, max 9, fuzz 0, flat 0, resolution 0                ABS_MT_TOUCH_MAJOR    : value 0, min 0, max 1080, fuzz 0, flat 0, resolution 0                ABS_MT_TOUCH_MINOR    : value 0, min 0, max 2340, fuzz 0, flat 0, resolution 0                ABS_MT_WIDTH_MAJOR    : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                ABS_MT_WIDTH_MINOR    : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                ABS_MT_ORIENTATION    : value 0, min -90, max 90, fuzz 0, flat 0, resolution 0                ABS_MT_POSITION_X     : value 0, min 0, max 1079, fuzz 0, flat 0, resolution 0                ABS_MT_POSITION_Y     : value 0, min 0, max 2339, fuzz 0, flat 0, resolution 0                ABS_MT_TRACKING_ID    : value 0, min 0, max 65535, fuzz 0, flat 0, resolution 0                ABS_MT_DISTANCE       : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0  input props:    INPUT_PROP_DIRECT</code></pre></li><li><p><code>getevent -i</code>: 显示更加详细的信息</p></li><li><p><code>getevent -t</code>: 显示时间戳</p></li></ul><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><ol><li><a href="https://source.android.com/devices/input" target="_blank" rel="noopener">https://source.android.com/devices/input</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Android中的Broadcast</title>
      <link href="/2020/10/09/android/qian-tan-android-zhong-de-broadcast/"/>
      <url>/2020/10/09/android/qian-tan-android-zhong-de-broadcast/</url>
      
        <content type="html"><![CDATA[<p>![Android 广播](<a href="https://oss.jiangkang.tech/jk/Android" target="_blank" rel="noopener">https://oss.jiangkang.tech/jk/Android</a> 广播.png)</p><h2 id="广播实现机制"><a href="#广播实现机制" class="headerlink" title="广播实现机制"></a>广播实现机制</h2><p>先思考几个问题:</p><ul><li>广播注册到了什么地方?</li><li>当发送广播的时候,是谁在分发广播?</li><li>BroadcastReceiver是如何接收到广播的?</li></ul><h2 id="广播注册"><a href="#广播注册" class="headerlink" title="广播注册"></a>广播注册</h2><p>从 Activity或者Context的<code>registerReceiver()</code>方法一路查看调用,可知最终注册实际上是在<code>ActivityManagerService</code>里进行的.</p><p>注册到了一个成员变量中:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>IBinder<span class="token punctuation">,</span> ReceiverList<span class="token operator">></span> mRegisteredReceivers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的ReceiverList实际上就是BroadcastFilter(IntentFilter的继承类)的ArrayList封装.</p><p>而IBinder则是<code>IItentReceiver</code>,是一个AIDL定义的接口,在 <code>LoadedApk</code>的<code>ReceiverDispatcher</code>中有相应的代理实现类<code>IntentReceiver</code>.</p><p><code>BroadcastReceiver</code>会被传递并封装到<code>IItentReceiver</code>中.</p><p>这样上面说的map其实也就清楚了: key ~= BroadcastReceiver, value ~= List<IntentFilter></p><h2 id="广播发送"><a href="#广播发送" class="headerlink" title="广播发送"></a>广播发送</h2><p>从<code>sendBroadcast(Intent intent)</code>出发,最终依然是由<code>ActivityManagerService#broadcastIntent()</code>方法处理的.</p><p>这里大概几个步骤:</p><ol><li>检查Intent对象合法性,是否有问题,然后封装一些中间类传递数据</li><li>检查Intent是否为一些系统级的广播ACTION,然后发出Handler消息做对应的处理</li><li>sticky广播相关的逻辑</li><li>查询处理静态注册可以接收的reciever</li><li>通过IntentResolver查询符合要求的BroadcastFilter</li><li>获取对应的BroadcastQueue对象(有三种,前台,后台,卸载),并将对应的Intent封装到<code>BroadcastRecord</code>中,并添加到<code>BroadcastQueue</code>中(<code>queue.enqueueOrderedBroadcastLocked(r);</code>)</li><li>开始<code>BroadcastQueue</code>的调度,这里需要注意的是分为两种调度:<ul><li>并行: <code>enqueueParallelBroadcastLocked(r)</code></li><li>串行: <code>enqueueOrderedBroadcastLocked(r)</code></li></ul></li></ol><h2 id="广播分发-调度"><a href="#广播分发-调度" class="headerlink" title="广播分发/调度"></a>广播分发/调度</h2><p><code>BroadcastReceiver</code>中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleBroadcastsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG_BROADCAST<span class="token punctuation">,</span> <span class="token string">"Schedule broadcasts ["</span>                <span class="token operator">+</span> mQueueName <span class="token operator">+</span> <span class="token string">"]: current="</span>                <span class="token operator">+</span> mBroadcastsScheduled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBroadcastsScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>BROADCAST_INTENT_MSG<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBroadcastsScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">BroadcastHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 接收调度消息</span>                <span class="token keyword">case</span> BROADCAST_INTENT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>                            TAG_BROADCAST<span class="token punctuation">,</span> <span class="token string">"Received BROADCAST_INTENT_MSG ["</span>                            <span class="token operator">+</span> mQueueName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 此处是关键</span>                    <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> BROADCAST_TIMEOUT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">broadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到这里其实就是通过Handler Message机制进行调度的.</p><p><strong>调度的逻辑里会区分当前进程是否已经正在运行,广播是串行还是并行的,然后进入各自的调度逻辑.</strong></p><p>这里挑一个串行的调度逻辑分析下,并行的逻辑也是大同小异的.</p><p>串行分发逻辑最终都会通过oneway binder调用<code>IIntentReceiver</code>的<code>performReceive()</code>方法去执行;</p><p>正如前面所说,在<code>LoadedApk.ReceiverDispathcer</code>  中有:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performReceive</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> String data<span class="token punctuation">,</span>                Bundle extras<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ordered<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sticky<span class="token punctuation">,</span> <span class="token keyword">int</span> sendingUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Args args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Args</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span>                    sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Null intent received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>DEBUG_BROADCAST<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> seq <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"seq"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"Enqueueing broadcast "</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" seq="</span> <span class="token operator">+</span> seq <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// intent一般不为null,因此会执行args中的runnbale</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mActivityThread<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mRegistered <span class="token operator">&amp;&amp;</span> ordered<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>                            <span class="token string">"Finishing sync broadcast to "</span> <span class="token operator">+</span> mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>                    args<span class="token punctuation">.</span><span class="token function">sendFinished</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>在<code>getRunnable()</code>方法中有:</p><pre class=" language-java"><code class="language-java">                        ClassLoader cl <span class="token operator">=</span> mReceiver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                        intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                        receiver<span class="token punctuation">.</span><span class="token function">setPendingResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        receiver<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">getPendingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span></code></pre><p>显而易见的,又是通过反射获取Receiver的对象并调用<code>onReceive()</code>方法.</p><p>执行完毕或者失败,发送执行完毕消息.</p><h2 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h2><ul><li><p>普通广播/有序广播/粘性广播</p><p>普通广播随机顺序发送广播,有序广播串行发送数据,粘性广播不安全已被废弃</p></li><li><p>串行/并行广播</p><p>静态广播接收器不管广播是否为并行,都按照串行处理</p><p>动态广播接收器遇到串行广播则按照串行处理,遇到并行广播则按照并行处理.</p></li></ul><h2 id="接收顺序问题"><a href="#接收顺序问题" class="headerlink" title="接收顺序问题"></a>接收顺序问题</h2><ul><li>广播发送时本身的优先级(比如有序广播)</li><li>动态广播先于静态广播接收器收到广播 </li></ul><h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><p>主要是调用<code>LocalBroadcastManager</code>去使用,与系统广播的各种机制其实没什么关系,只是利用了一下<code>BroadcastReceiver</code>这个抽象类而已,其本质就是观察者模式 + Handler消息传递.因此在应用内传递效率颇高.</p><p>而且它的实现在支持包中,并不在源码中,目前是在androidx的支持包中.</p><p>看一段代码就明白了:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">executePendingBroadcasts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> BroadcastRecord<span class="token punctuation">[</span><span class="token punctuation">]</span> brs<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mReceivers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                brs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastRecord</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>brs<span class="token punctuation">)</span><span class="token punctuation">;</span>                mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>brs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> BroadcastRecord br <span class="token operator">=</span> brs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> nbr <span class="token operator">=</span> br<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nbr<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> ReceiverRecord rec <span class="token operator">=</span> br<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rec<span class="token punctuation">.</span>dead<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rec<span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>mAppContext<span class="token punctuation">,</span> br<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/components/broadcasts" target="_blank" rel="noopener">https://developer.android.com/guide/components/broadcasts</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Broadcast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Android中的Handler</title>
      <link href="/2020/10/06/android/qian-tan-android-zhong-de-handler/"/>
      <url>/2020/10/06/android/qian-tan-android-zhong-de-handler/</url>
      
        <content type="html"><![CDATA[<h2 id="Handler-post-runnable-vs-Handler-sendMessage-Message-msg"><a href="#Handler-post-runnable-vs-Handler-sendMessage-Message-msg" class="headerlink" title="Handler.post(runnable) vs Handler.sendMessage(Message msg)"></a><code>Handler.post(runnable)</code> vs <code>Handler.sendMessage(Message msg)</code></h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Message的callback即是runnable</span>        m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其实两种方式最终都是利用的<code>sendMessageDelayed</code>方法.区别是传递的Message对象.</p><ul><li><p><code>Handler.post(Runnbale runnable)</code></p><p>它的Message中callback为runnable</p></li><li><p><code>Handler.sendMessage(Message msg)</code></p><p> 一般传递给它的message并不会指定callback,也就是说callback为null</p></li></ul><p>那么Message是否带callback有何影响?这里要说一下Message最终分发的逻辑:</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 优先处理Message中自带的callback,其次就是Handler中的callback,再才是handleMessage方法 </span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置给Handler的Callback</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回true,则处理完毕;返回false,则后面handleMessage()会继续处理</span>        <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Handler中需要重写的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    </code></pre><p>也就是一个执行优先级的区别了.</p><h2 id="Handler与线程"><a href="#Handler与线程" class="headerlink" title="Handler与线程"></a>Handler与线程</h2><p><code>ActivityThread</code>中已经为主线程准备好了Looper,即已经创建了Looper,并开启了循环:</p><pre class=" language-java"><code class="language-java">Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这就相当于为主线程暴露了一个消息传递的入口,在其他线程里可以创建一个主线程Handler,向主线程中传递消息,或者切换到主线程执行任务.</p><p>既然主线程可以这么做,其他线程也可以这么做,如果需要为线程开启消息循环机制,需要两步:</p><pre class=" language-java"><code class="language-java">Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于主线程之外的线程的消息传递机制可以参考一下<code>HandlerThread</code>的实现方式,也可以直接使用<code>HandlerThread</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>子线程可以被销毁,但是主线程在APP生命周期中一直存在着,因此主线程的Looper其实是不允许停止的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里传递的false参数,不允许停止</span>        <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainLooper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The main Looper has already been prepared."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sMainLooper <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="Message-与-MessageQueue"><a href="#Message-与-MessageQueue" class="headerlink" title="Message 与 MessageQueue"></a>Message 与 MessageQueue</h2><p>Message本身的对象池复用不必多少,需要说的是<strong>Message对象实际上是一个单链表</strong>,Message中的next字段就是下一个Message节点.</p><p>我们都知道LinkedList可以当作一个队列使用,这里Message其实就是一个链表,自然也可以当作一个队列使用.</p><p>而MessageQueue则封装了Message的入队出队操作,<strong>还需要注意的是这并不是完全意义上的先进先出队列</strong>,因为Message中存在延时时间,所以入队的时候需要根据执行时间插入到指定的节点.</p><p>既然大体上还算是一个队列,那么肯定有一个入队和出队的过程:</p><ul><li><p>入队:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalStateException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// New head, wake up the event queue if blocked.</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>                needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prev<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// We can assume mPtr != 0 because mQuitting is false.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>出队:</p><p>这里既然是一个消息循环,那么应该是循环开始的时候会不断从队列中取出Message,这里是Looper.loop():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        me<span class="token punctuation">.</span>mInLoop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取出消息</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// No message indicates that the message queue is quitting.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> origWorkSource <span class="token operator">=</span> ThreadLocalWorkSource<span class="token punctuation">.</span><span class="token function">setUid</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>workSourceUid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分发消息</span>                msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里其实用的MessageQueue的next方法取出消息的:</p><pre class=" language-java"><code class="language-java">    Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ptr <span class="token operator">=</span> mPtr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pendingIdleHandlerCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 only during first iteration</span>        <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Got a message.</span>                        mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No more messages.</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Process the quit message now that all pending messages have been handled.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// If first time idle, then get the number of idlers to run.</span>                <span class="token comment" spellcheck="true">// Idle handles only run if the queue is empty or if the first message</span>                <span class="token comment" spellcheck="true">// in the queue (possibly a barrier) is due to be handled in the future.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;</span> <span class="token number">0</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mMessages <span class="token operator">==</span> null <span class="token operator">||</span> now <span class="token operator">&lt;</span> mMessages<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pendingIdleHandlerCount <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No idle handlers to run.  Loop and wait some more.</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingIdleHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPendingIdleHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdleHandler</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pendingIdleHandlerCount<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mPendingIdleHandlers <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>mPendingIdleHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Run the idle handlers.</span>            <span class="token comment" spellcheck="true">// We only ever reach this code block during the first iteration.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingIdleHandlerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> IdleHandler idler <span class="token operator">=</span> mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// release the reference to the handler</span>                <span class="token keyword">boolean</span> keep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    keep <span class="token operator">=</span> idler<span class="token punctuation">.</span><span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"IdleHandler threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mIdleHandlers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Reset the idle handler count to 0 so we do not run them again.</span>            pendingIdleHandlerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// While calling an idle handler, a new message could have been delivered</span>            <span class="token comment" spellcheck="true">// so go back and look again for a pending message without waiting.</span>            nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>其实也是一个根据时间查找节点的过程.</p></li></ul><p>再补充一点,MessageQueue实际上是在Looper实例化的时候创建的,并且Looper持有了MessageQueue的引用,Handler中使用的就是Looper传递过去的MessageQueue.</p><p>开发者可以使用<code>Looper.myQueue()</code>获取对应的MessageQueue对象.</p><h2 id="IdleHandler"><a href="#IdleHandler" class="headerlink" title="IdleHandler"></a>IdleHandler</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 消息队列为空时的回调接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">IdleHandler</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前MessageQueue为空,即阻塞时,执行这个回调方法</span>        <span class="token comment" spellcheck="true">// 返回true,则会一直保持这个IdleHandler,会重复执行,返回fasle则只执行一次</span>        <span class="token keyword">boolean</span> <span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>IdleHandler</code>时MessageQueue中的一个内部接口.当消息队列阻塞时,即消息为空,或当前没有要执行的消息的时候就会执行这个IdleHandler.</p><p>一般添加<code>IdleHandler</code>都是使用:</p><pre class=" language-kotlin"><code class="language-kotlin">Looper<span class="token punctuation">.</span><span class="token function">myQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIdleHandler</span> <span class="token punctuation">{</span>           <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>一般用在性能优化场景和一些不抢占主线程任务资源但是也有机会执行的场景:</p><ul><li>ActivityThread中的GC操作</li><li>LeakCanary中内存泄漏提示Toast的显示</li><li>Android的严格模式</li><li>各种Instrumentation</li></ul><h2 id="同步消息-异步消息-SyncBarrier-同步屏障"><a href="#同步消息-异步消息-SyncBarrier-同步屏障" class="headerlink" title="同步消息/异步消息/SyncBarrier(同步屏障)"></a>同步消息/异步消息/SyncBarrier(同步屏障)</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>async<span class="token punctuation">)</span> <span class="token punctuation">{</span>            flags <span class="token operator">|=</span> FLAG_ASYNCHRONOUS<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>FLAG_ASYNCHRONOUS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Message 中可以通过调用<code>setAsynchronous()</code>方法来设置是否为异步消息.实际使用的时候,需要使用<code>MessageCompat</code>.</p><p>同步消息和异步消息的发送其实都是通过<code>sendMessageAtTime</code>发送的,这之后都会执行到:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> MessageQueue queue<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">,</span>            <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里赋值了target为当前Handler   </span>        msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>workSourceUid <span class="token operator">=</span> ThreadLocalWorkSource<span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>而SyncBarrier则是在MessageQueue中通过<code>postSyncBarrier(long when)</code>添加的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">postSyncBarrier</span><span class="token punctuation">(</span><span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Enqueue a new sync barrier token.</span>        <span class="token comment" spellcheck="true">// We don't need to wake the queue because the purpose of a barrier is to stall it.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> token <span class="token operator">=</span> mNextBarrierToken<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Message msg <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> token<span class="token punctuation">;</span>            Message prev <span class="token operator">=</span> null<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>when <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>when <span class="token operator">&lt;=</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> token<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,<strong>这里的Message实际上没有给target赋值,因此target = null</strong>.也就是说<strong>SyncBarrier是target = null的Message</strong>.</p><p>当loop的时候如果遇到SyncBarrier,则会去寻找下一个异步消息,因此这里<strong>SyncBarrier的作用是拦截同步消息,通过异步消息.</strong></p><p>在MessageQueue的next方法中有这么一段就是处理这部分逻辑的:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>SyncBarrier一般都是成对使用的:</p><ul><li><code>private int postSyncBarrier(long when)</code></li><li><code>public void removeSyncBarrier(int token)</code></li></ul><p>不过目前这两个方法在应用层都无法使用.具体的使用场景可以参考<code>ViewRootImpl</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">scheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            mTraversalBarrier <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSyncBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mChoreographer<span class="token punctuation">.</span><span class="token function">postCallback</span><span class="token punctuation">(</span>                    Choreographer<span class="token punctuation">.</span>CALLBACK_TRAVERSAL<span class="token punctuation">,</span> mTraversalRunnable<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyRendererOfFramePending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pokeDrawLockIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unscheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSyncBarrier</span><span class="token punctuation">(</span>mTraversalBarrier<span class="token punctuation">)</span><span class="token punctuation">;</span>            mChoreographer<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>                    Choreographer<span class="token punctuation">.</span>CALLBACK_TRAVERSAL<span class="token punctuation">,</span> mTraversalRunnable<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">doTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSyncBarrier</span><span class="token punctuation">(</span>mTraversalBarrier<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Debug<span class="token punctuation">.</span><span class="token function">stopMethodTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mProfile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h2><p>Handler的内存泄漏问题是一个老生常谈的问题了,这里就不多说了,一般的场景有:</p><ul><li><p>内部类/匿名内部类</p><p>内部类/匿名内部类会隐私持有外部对象,容易造成内存泄漏,因此需要使用静态内部类</p></li><li><p>Callback问题</p><p>在Activity销毁或者任务执行完之后需要removeCallback,不然也有可能会导致内存泄漏</p></li></ul><h2 id="为什么主线程不会因为Looper-loop-而阻塞"><a href="#为什么主线程不会因为Looper-loop-而阻塞" class="headerlink" title="为什么主线程不会因为Looper.loop()而阻塞?"></a>为什么主线程不会因为Looper.loop()而阻塞?</h2><p>前面的loop循环有说过,里面有一个无限循环,但是为什么不会因此阻塞呢,导致无法处理其他的主线程任务.</p><p>这里需要明确一点:</p><ul><li><p>主线程任务都会通过Message消息传递机制执行,也就是说最终都会在loop()中获取到并执行</p><p>Android Activity/Service的各种回调,比如onCreate()/onResume()等都是ActivityThread中H中有对应的消息类型进行处理,其实都是在消息队列中,并不会有什么其他类型的主线程任务会有别的方式去执行.</p></li></ul><p>但是loop()中的无限循环,会很耗费资源吗?当没有任务时,是简单的sleep吗,那是如何唤醒的呢?</p><p>关键之处就在MessageQueue中next方法中的一个native方法调用:</p><pre class=" language-java"><code class="language-java"><span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>android_os_MessageQueue.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> NativeMessageQueue<span class="token operator">::</span><span class="token function">pollOnce</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject pollObj<span class="token punctuation">,</span> <span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mPollEnv <span class="token operator">=</span> env<span class="token punctuation">;</span>    mPollObj <span class="token operator">=</span> pollObj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的Looper是在Looper.h中定义的</span>    mLooper<span class="token operator">-</span><span class="token operator">></span><span class="token function">pollOnce</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    mPollObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    mPollEnv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">Throw</span><span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">DeleteLocalRef</span><span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        mExceptionObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到这里其实用到的是Native层的<code>Looper</code>的<code>poolOnce</code>方法.</p><p>Native层的<code>Looper</code>支持监控文件描述符事件,还支持callback,并且其内部使用的是<code>epoll()</code>方式.</p><p>在<code>Looper.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> Looper<span class="token operator">::</span><span class="token function">pollOnce</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeoutMillis<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outFd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outEvents<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> outData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mResponseIndex <span class="token operator">&lt;</span> mResponses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> Response<span class="token operator">&amp;</span> response <span class="token operator">=</span> mResponses<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span>mResponseIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ident <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ident <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> fd <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>                <span class="token keyword">int</span> events <span class="token operator">=</span> response<span class="token punctuation">.</span>events<span class="token punctuation">;</span>                <span class="token keyword">void</span><span class="token operator">*</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outFd <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outFd <span class="token operator">=</span> fd<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outEvents <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outEvents <span class="token operator">=</span> events<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outData <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outData <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token keyword">return</span> ident<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outFd <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outFd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outEvents <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outEvents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outData <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里</span>        result <span class="token operator">=</span> <span class="token function">pollInner</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> Looper<span class="token operator">::</span><span class="token function">pollInner</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Adjust the timeout based on when the next message is due.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mNextMessageUptime <span class="token operator">!=</span> LLONG_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nsecs_t now <span class="token operator">=</span> <span class="token function">systemTime</span><span class="token punctuation">(</span>SYSTEM_TIME_MONOTONIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> messageTimeoutMillis <span class="token operator">=</span> <span class="token function">toMillisecondTimeoutDelay</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> mNextMessageUptime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageTimeoutMillis <span class="token operator">>=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> messageTimeoutMillis <span class="token operator">&lt;</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            timeoutMillis <span class="token operator">=</span> messageTimeoutMillis<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Poll.</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> POLL_WAKE<span class="token punctuation">;</span>    mResponses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mResponseIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We are about to idle.</span>    mPolling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// epoll_wait()系统调用</span>    <span class="token keyword">struct</span> epoll_event eventItems<span class="token punctuation">[</span>EPOLL_MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> eventCount <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventItems<span class="token punctuation">,</span> EPOLL_MAX_EVENTS<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// No longer idling.</span>    mPolling <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Acquire lock.</span>    mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Rebuild epoll set if needed.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEpollRebuildRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mEpollRebuildRequired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">rebuildEpollLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check for poll error.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Poll failed with an unexpected error: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> POLL_ERROR<span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check for poll timeout.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE</span>        <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - timeout"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        result <span class="token operator">=</span> POLL_TIMEOUT<span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Handle all events.</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE</span>    <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - handling events from %d fds"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> eventCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>        uint32_t epollEvents <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> mWakeEventFd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">awoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span><span class="token punctuation">,</span> epollEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ssize_t requestIndex <span class="token operator">=</span> mRequests<span class="token punctuation">.</span><span class="token function">indexOfKey</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> events <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_INPUT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_OUTPUT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_ERROR<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLHUP<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_HANGUP<span class="token punctuation">;</span>                <span class="token function">pushResponse</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> mRequests<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>requestIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Ignoring unexpected epoll events 0x%x on fd %d that is "</span>                        <span class="token string">"no longer registered."</span><span class="token punctuation">,</span> epollEvents<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>Done<span class="token operator">:</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Invoke pending message callbacks.</span>    mNextMessageUptime <span class="token operator">=</span> LLONG_MAX<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nsecs_t now <span class="token operator">=</span> <span class="token function">systemTime</span><span class="token punctuation">(</span>SYSTEM_TIME_MONOTONIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> MessageEnvelope<span class="token operator">&amp;</span> messageEnvelope <span class="token operator">=</span> mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageEnvelope<span class="token punctuation">.</span>uptime <span class="token operator">&lt;=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Remove the envelope from the list.</span>            <span class="token comment" spellcheck="true">// We keep a strong reference to the handler until the call to handleMessage</span>            <span class="token comment" spellcheck="true">// finishes.  Then we drop it so that the handler can be deleted *before*</span>            <span class="token comment" spellcheck="true">// we reacquire our lock.</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// obtain handler</span>                sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">></span> handler <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>                Message message <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>message<span class="token punctuation">;</span>                mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mSendingMessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span>                <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - sending message: handler=%p, what=%d"</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>                handler<span class="token operator">-</span><span class="token operator">></span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// release handler</span>            mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSendingMessage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The last message left at the head of the queue determines the next wakeup time.</span>            mNextMessageUptime <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>uptime<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Release lock.</span>    mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Invoke all response callbacks.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mResponses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Response<span class="token operator">&amp;</span> response <span class="token operator">=</span> mResponses<span class="token punctuation">.</span><span class="token function">editItemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ident <span class="token operator">==</span> POLL_CALLBACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token keyword">int</span> events <span class="token operator">=</span> response<span class="token punctuation">.</span>events<span class="token punctuation">;</span>            <span class="token keyword">void</span><span class="token operator">*</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span>            <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - invoking fd event callback %p: fd=%d, events=0x%x, data=%p"</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token comment" spellcheck="true">// Invoke the callback.  Note that the file descriptor may be closed by</span>            <span class="token comment" spellcheck="true">// the callback (and potentially even reused) before the function returns so</span>            <span class="token comment" spellcheck="true">// we need to be a little careful when removing the file descriptor afterwards.</span>            <span class="token keyword">int</span> callbackResult <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token operator">-</span><span class="token operator">></span><span class="token function">handleEvent</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackResult <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Clear the callback reference in the response structure promptly because we</span>            <span class="token comment" spellcheck="true">// will not clear the response vector itself until the next poll.</span>            response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于epoll机制,可以查看<a href="https://zh.wikipedia.org/wiki/Epoll" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Epoll</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用SDL展示一张JPG图片</title>
      <link href="/2020/09/13/c/yong-sdl-zhan-shi-yi-zhang-jpg-tu-pian/"/>
      <url>/2020/09/13/c/yong-sdl-zhan-shi-yi-zhang-jpg-tu-pian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SDL2/SDL.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SDL2_image/SDL_image.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"demo_sdl.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> WIDTH <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> HEIGHT <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SDL_Init</span><span class="token punctuation">(</span>SDL_INIT_EVERYTHING<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"初始化失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SDL_Window <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token function">SDL_CreateWindow</span><span class="token punctuation">(</span><span class="token string">"Show Image"</span><span class="token punctuation">,</span>                                          SDL_WINDOWPOS_CENTERED<span class="token punctuation">,</span> SDL_WINDOWPOS_CENTERED<span class="token punctuation">,</span>                                          WIDTH<span class="token punctuation">,</span> HEIGHT<span class="token punctuation">,</span> SDL_WINDOW_SHOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"创建Window失败："</span> <span class="token operator">&lt;&lt;</span> <span class="token function">SDL_GetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SDL_Renderer <span class="token operator">*</span>renderer <span class="token operator">=</span> <span class="token function">SDL_CreateRenderer</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SDL_RENDERER_ACCELERATED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderer <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"创建Renderer失败："</span> <span class="token operator">&lt;&lt;</span> <span class="token function">SDL_GetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SDL_Surface <span class="token operator">*</span>image <span class="token operator">=</span> <span class="token function">IMG_Load</span><span class="token punctuation">(</span><span class="token string">"/Volumes/T5/CppPractice/renderer-dog/res/demo.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>image<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加载图片失败："</span> <span class="token operator">&lt;&lt;</span> <span class="token function">SDL_GetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果使用硬件加速，则必须将Surface转换成Texture</span>    SDL_Texture <span class="token operator">*</span>texture <span class="token operator">=</span> <span class="token function">SDL_CreateTextureFromSurface</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_FreeSurface</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_RenderClear</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_RenderCopy</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span>texture<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_RenderPresent</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>    SDL_Event windowEvent<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SDL_PollEvent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>windowEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>windowEvent<span class="token punctuation">.</span>type <span class="token operator">==</span> SDL_QUIT<span class="token punctuation">)</span><span class="token punctuation">{</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"终止程序"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">SDL_DestroyRenderer</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_DestroyTexture</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_DestroyWindow</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SDL_Quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li>初始化</li><li>创建Window</li><li>创建Renderer,用于在Window上渲染内容</li><li>创建Surface,Surface其实就是像素的载体</li><li>如果需要使用硬件加速,需要将Surface转换成Texture</li><li>清除Renderer内容,并使用Renderer的Copy功能将texture内容复制到屏幕的指定区域</li><li>指定当前的Renderer.</li><li>事件监听</li><li>销毁各种对象</li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li><p>MacOS安装的SDL2_image库打开时提示安全提示</p><p>解决方案:</p><pre class=" language-shell"><code class="language-shell">sudo spctl --master-disable</code></pre></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/renderer-dog" target="_blank" rel="noopener">https://github.com/jiangkang/renderer-dog</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用SDL写个Hello World</title>
      <link href="/2020/09/12/c/yong-sdl-xie-ge-helloworld/"/>
      <url>/2020/09/12/c/yong-sdl-xie-ge-helloworld/</url>
      
        <content type="html"><![CDATA[<pre class=" language-c++"><code class="language-c++">const int WIDTH = 600;const int HEIGHT = 600;void SDLExample() {    if (SDL_Init(SDL_INIT_EVERYTHING) < 0) {        std::cout << "初始化失败" << std::endl;    }    SDL_Window *window = SDL_CreateWindow("Skia + SDL"            ,SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED            ,WIDTH,HEIGHT,SDL_WINDOW_ALLOW_HIGHDPI);    if (window == nullptr){        std::cout<< "创建Window失败" << std::endl;    }    SDL_Event windowEvent;    while (true){        if (SDL_PollEvent(&windowEvent)){            if (windowEvent.type == SDL_QUIT){                std::cout << "终止程序" << std::endl;                break;            }        }    }    SDL_DestroyWindow(window);    SDL_Quit();}</code></pre><h2 id="基本的步骤"><a href="#基本的步骤" class="headerlink" title="基本的步骤"></a>基本的步骤</h2><ol><li>初始化</li><li>创建Window</li><li>监听输入事件</li><li>监听到关闭事件的时候销毁Window并离开</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/renderer-dog" target="_blank" rel="noopener">https://github.com/jiangkang/renderer-dog</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Service启动流程分析</title>
      <link href="/2020/08/23/android/service-qi-dong-liu-cheng-fen-xi/"/>
      <url>/2020/08/23/android/service-qi-dong-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>之前写过App和Activity的启动流程分析:</p><ul><li><a href="https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/">App启动流程分析</a></li><li><a href="https://www.jiangkang.tech/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/">Activity启动流程分析</a></li></ul><p>现在梳理下Service的启动流程吧</p><blockquote><p>基于Android 10的源码分析</p></blockquote><h2 id="ContextWrapper-startService"><a href="#ContextWrapper-startService" class="headerlink" title="ContextWrapper.startService()"></a>ContextWrapper.startService()</h2><p>Context的实现是<code>ContextImpl</code>,因此到<code>ContextImpl</code>中查看:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentName <span class="token function">startService</span><span class="token punctuation">(</span>Intent service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warnIfCallingFromSystemProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">startServiceCommon</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> mUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ComponentName <span class="token function">startServiceCommon</span><span class="token punctuation">(</span>Intent service<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requireForeground<span class="token punctuation">,</span>            UserHandle user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关键, 利用ActivityManagerService启动Service</span>            ComponentName cn <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>                mMainThread<span class="token punctuation">.</span><span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">resolveTypeIfNeeded</span><span class="token punctuation">(</span>                            <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requireForeground<span class="token punctuation">,</span>                            <span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cn<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还是调用的<code>ActivityManagerService</code>去执行的.</p><h2 id="ActivityManagerService-startService"><a href="#ActivityManagerService-startService" class="headerlink" title="ActivityManagerService.startService()"></a>ActivityManagerService.startService()</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentName <span class="token function">startService</span><span class="token punctuation">(</span>IApplicationThread caller<span class="token punctuation">,</span> Intent service<span class="token punctuation">,</span>            String resolvedType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requireForeground<span class="token punctuation">,</span> String callingPackage<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionTooLargeException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> callingPid <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> callingUid <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ComponentName res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里的mServices是ActiveServices</span>                res <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">startServiceLocked</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> service<span class="token punctuation">,</span>                        resolvedType<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span>                        requireForeground<span class="token punctuation">,</span> callingPackage<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>origId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>然后就到了<code>ActiveServices</code>中,这个类其实在之前的启动流程分析文章中也有提到过:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// startService 和bindService两种方式其实最终都会走到这里</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">realStartServiceLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">,</span> <span class="token keyword">boolean</span> execInFg<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">setProcess</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ApplicationThread,关键点</span>            app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleCreateService</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">,</span>                    mAm<span class="token punctuation">.</span><span class="token function">compatibilityInfoForPackage</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                    app<span class="token punctuation">.</span><span class="token function">getReportedProcState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">postNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">requestServiceBindingsLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> execInFg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateServiceClientActivitiesLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newService <span class="token operator">&amp;&amp;</span> created<span class="token punctuation">)</span> <span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">addBoundClientUidsOfNewService</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里也很关键</span>        <span class="token function">sendServiceArgsLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> execInFg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这期间调用链其实很长,这里直接走到最后一步.</p><h2 id="ActivityThread-ApplicationThread-scheduleCreateService"><a href="#ActivityThread-ApplicationThread-scheduleCreateService" class="headerlink" title="ActivityThread.ApplicationThread.scheduleCreateService"></a>ActivityThread.ApplicationThread.scheduleCreateService</h2><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">scheduleCreateService</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span>                ServiceInfo info<span class="token punctuation">,</span> CompatibilityInfo compatInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> processState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">updateProcessState</span><span class="token punctuation">(</span>processState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CreateServiceData s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateServiceData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>            s<span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>            s<span class="token punctuation">.</span>compatInfo <span class="token operator">=</span> compatInfo<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// handler机制</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>CREATE_SERVICE<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>Handler收到消息之后:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> CREATE_SERVICE<span class="token operator">:</span>                    <span class="token function">handleCreateService</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CreateServiceData<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><h2 id="加载Service类-并执行onCreate回调"><a href="#加载Service类-并执行onCreate回调" class="headerlink" title="加载Service类,并执行onCreate回调"></a>加载Service类,并执行onCreate回调</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleCreateService</span><span class="token punctuation">(</span>CreateServiceData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取APP信息</span>        LoadedApk packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfoNoCheck</span><span class="token punctuation">(</span>                data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> data<span class="token punctuation">.</span>compatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        Service service <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用ClassLoader加载并实例化Service类</span>        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getAppFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">instantiateService</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建Context</span>            ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> packageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建Application</span>            Application app <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行service的attach方法</span>            service<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> app<span class="token punctuation">,</span>                    ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">///调用service的onCreate回调</span>            service<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mServices<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通知AMS服务</span>                <span class="token comment" spellcheck="true">// SERVICE_DONE_EXECUTING_ANON表示异步执行</span>                ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                        data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> SERVICE_DONE_EXECUTING_ANON<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,Service的启动过程其实和Activity的启动过程大同小异,都是使用ClassLoader加载的.</p><p>还有最后一句,通知ActivityManagerService,看下这部分干了什么:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mServices<span class="token punctuation">.</span><span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServiceRecord<span class="token punctuation">)</span>token<span class="token punctuation">,</span> type<span class="token punctuation">,</span> startId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// SERVICE_DONE_EXECUTING_ANON,0,0</span>    <span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> inDestroying <span class="token operator">=</span> mDestroyingServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主要是一些超时逻辑</span>        <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> inDestroying<span class="token punctuation">,</span> inDestroying<span class="token punctuation">)</span><span class="token punctuation">;</span>        Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>origId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> </code></pre><p>可以看到这一步其实没什么.</p><p>现在回到onCreate回调之后的处理逻辑:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sendServiceArgsLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> execInFg<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> oomAdjusted<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionTooLargeException <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>ServiceStartArgs<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键点</span>        r<span class="token punctuation">.</span>app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleServiceArgs</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> slice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个会执行到ActivityThread的ApplicationThread中:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">scheduleServiceArgs</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> ParceledListSlice args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ServiceStartArgs<span class="token operator">></span> list <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ServiceStartArgs ssa <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ServiceArgsData s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceArgsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>taskRemoved <span class="token operator">=</span> ssa<span class="token punctuation">.</span>taskRemoved<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>startId <span class="token operator">=</span> ssa<span class="token punctuation">.</span>startId<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>flags <span class="token operator">=</span> ssa<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>args <span class="token operator">=</span> ssa<span class="token punctuation">.</span>args<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关键</span>                <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>SERVICE_ARGS<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>Handelr收到消息之后有:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> SERVICE_ARGS<span class="token operator">:</span>                    <span class="token function">handleServiceArgs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServiceArgsData<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>这里其实会执行Service 的onStartCommand()回调:</p><h2 id="Service-onStartCommand"><a href="#Service-onStartCommand" class="headerlink" title="Service.onStartCommand()"></a>Service.onStartCommand()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleServiceArgs</span><span class="token punctuation">(</span>ServiceArgsData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Service s <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> res<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>taskRemoved<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 调用Service的onStartCommand方法</span>                    res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>args<span class="token punctuation">,</span> data<span class="token punctuation">.</span>flags<span class="token punctuation">,</span> data<span class="token punctuation">.</span>startId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">onTaskRemoved</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> Service<span class="token punctuation">.</span>START_TASK_REMOVED_COMPLETE<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                QueuedWork<span class="token punctuation">.</span><span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 通知AMS service启动</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                            data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> SERVICE_DONE_EXECUTING_START<span class="token punctuation">,</span> data<span class="token punctuation">.</span>startId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>执行完Service的onStartCommand()方法之后,会通知AMS:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> inDestroying <span class="token operator">=</span> mDestroyingServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> ActivityThread<span class="token punctuation">.</span>SERVICE_DONE_EXECUTING_START<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行这个分支</span>                r<span class="token punctuation">.</span>callStart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_STICKY_COMPATIBILITY<span class="token operator">:</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_STICKY<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We are done with the associated start arguments.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// Don't stop if killed.</span>                        r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_NOT_STICKY<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We are done with the associated start arguments.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLastStartId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// There is no more work, and this service</span>                            <span class="token comment" spellcheck="true">// doesn't want to hang around if killed.</span>                            r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_REDELIVER_INTENT<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We'll keep this item until they explicitly</span>                        <span class="token comment" spellcheck="true">// call stop for it, but keep track of the fact</span>                        <span class="token comment" spellcheck="true">// that it was delivered.</span>                        ServiceRecord<span class="token punctuation">.</span>StartItem si <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>si <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            si<span class="token punctuation">.</span>deliveryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            si<span class="token punctuation">.</span>doneExecutingCount<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// Don't stop if killed.</span>                            r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_TASK_REMOVED_COMPLETE<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Special processing for onTaskRemoved().  Don't</span>                        <span class="token comment" spellcheck="true">// impact normal onStartCommand() processing.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Unknown service start result: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> Service<span class="token punctuation">.</span>START_STICKY_COMPATIBILITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span>callStart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里其实就是处理不同类型的Service,比如Sticky Service的启动逻辑,这里不仔细说了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Service的启动流程和Activity的启动流程大同小异</li><li>ActivityThread和AMS起到了关键性的作用</li><li>不同类型Service在AMS中有处理逻辑</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Service启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activity启动流程分析</title>
      <link href="/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/"/>
      <url>/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/">App启动流程分析</a>中已经分析过大部分的流程了,但是对于Activity的启动流程并没有详细的说明,这里讲一下.</p><p>在分析源码之前,先想一下大概有哪些疑问:</p><ul><li>Activity是如何加载的?</li><li>Activity为什么必须在Manifest文件中注册?</li><li>Activity的本质是什么,可以不需要Activity实现Android APP吗?</li><li>Activity的生命周期是如何调度的?</li><li>Activity的启动模式的原理</li></ul><h2 id="源码中常见的类"><a href="#源码中常见的类" class="headerlink" title="源码中常见的类"></a>源码中常见的类</h2><ul><li><p>ActivityRecord</p><p>表示一个Activity,与Activity是一一对应的关系</p></li><li><p>ActivityStack</p><p>即Activity栈,管理Activity的状态</p></li><li><p>RootActivityContainer</p><p>一个暂时分离出来的类,主要就是一些不应该放到ActivityStackSuperVisor中的功能,可能后面会合并到RootWindowContainer中</p></li></ul><h2 id="Binder调用前"><a href="#Binder调用前" class="headerlink" title="Binder调用前"></a>Binder调用前</h2><p>由于之前分析过一些代码的调用流程,这里从<code>ActivityStackSupervisor#startSpecificActivityLocked()</code>开始:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">startSpecificActivityLocked</span><span class="token punctuation">(</span>ActivityRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> andResume<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wpc <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> wpc<span class="token punctuation">.</span><span class="token function">hasThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 进程已经准备好,执行这个过程</span>                <span class="token function">realStartActivityLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> wpc<span class="token punctuation">,</span> andResume<span class="token punctuation">,</span> checkConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Exception when starting activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flattenToShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            knownToBeDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 还未创建进程,先创建进程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Message msg <span class="token operator">=</span> PooledLambda<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>                    ActivityManagerInternal<span class="token operator">:</span><span class="token operator">:</span>startProcess<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mAmInternal<span class="token punctuation">,</span> r<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> <span class="token string">"activity"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span>mH<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>之前说过,创建APP进程的时候走的是下面那个逻辑,这里启动Activity的时候看<code>realStartActivityLocked</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">realStartActivityLocked</span><span class="token punctuation">(</span>ActivityRecord r<span class="token punctuation">,</span> WindowProcessController proc<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> andResume<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">final</span> TaskRecord task <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getTaskRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ActivityStack stack <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">getStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beginDeferResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">startFreezingScreenLocked</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// schedule launch ticks to collect information about slow apps.</span>            r<span class="token punctuation">.</span><span class="token function">startLaunchTickingLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">setProcess</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">;</span>            proc<span class="token punctuation">.</span><span class="token function">addActivityIfNeeded</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关键:创建Activity启动事务</span>                <span class="token keyword">final</span>  clientTransaction <span class="token operator">=</span> ClientTransaction<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>                        proc<span class="token punctuation">.</span><span class="token function">getThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>appToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将intent信息打包到LaunchActivityItem中去</span>                <span class="token comment" spellcheck="true">// LaunchActivityItem表示启动Activity的请求,是ClientTransactionItem的子类</span>                clientTransaction<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>LaunchActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">,</span>                        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>info<span class="token punctuation">,</span>                        mergedConfiguration<span class="token punctuation">.</span><span class="token function">getGlobalConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        mergedConfiguration<span class="token punctuation">.</span><span class="token function">getOverrideConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>compat<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>launchedFromPackage<span class="token punctuation">,</span> task<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">,</span> proc<span class="token punctuation">.</span><span class="token function">getReportedProcState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>icicle<span class="token punctuation">,</span> r<span class="token punctuation">.</span>persistentState<span class="token punctuation">,</span> results<span class="token punctuation">,</span> newIntents<span class="token punctuation">,</span>                        dc<span class="token punctuation">.</span><span class="token function">isNextTransitionForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proc<span class="token punctuation">.</span><span class="token function">createProfilerInfoIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                r<span class="token punctuation">.</span>assistToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Activity应该到达的生命周期状态</span>                <span class="token keyword">final</span> ActivityLifecycleItem lifecycleItem<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>andResume<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lifecycleItem <span class="token operator">=</span> ResumeActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">isNextTransitionForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    lifecycleItem <span class="token operator">=</span> PauseActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                clientTransaction<span class="token punctuation">.</span><span class="token function">setLifecycleStateRequest</span><span class="token punctuation">(</span>lifecycleItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关键:执行请求,Schedule transaction.</span>                mService<span class="token punctuation">.</span><span class="token function">getLifecycleManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>clientTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">endDeferResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>看一下调度事务的代码:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">final</span> IApplicationThread client <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>client <span class="token keyword">instanceof</span> <span class="token class-name">Binder</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的mClient就是IApplicationThread,会通过Binder调用到ApplicationThread</span>        mClient<span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><h2 id="ActivityThread-ApplicationThread中的调度过程"><a href="#ActivityThread-ApplicationThread中的调度过程" class="headerlink" title="ActivityThread.ApplicationThread中的调度过程"></a>ActivityThread.ApplicationThread中的调度过程</h2><p>现在进入了<code>ApplicationThread</code>中:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            ActivityThread<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><code>ActivityThead</code>实现了<code>ClientTransactionHandler</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** Prepare and schedule transaction for execution. */</span>    <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 预先执行一些逻辑</span>        transaction<span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>H<span class="token punctuation">.</span>EXECUTE_TRANSACTION<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preExecute</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ClientTransactionHandler clientTransactionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mActivityCallbacks <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> mActivityCallbacks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mActivityCallbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span>clientTransactionHandler<span class="token punctuation">,</span> mActivityToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLifecycleStateRequest <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLifecycleStateRequest<span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span>clientTransactionHandler<span class="token punctuation">,</span> mActivityToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>mActivityCallback</code>即上面添加的<code>LaunchActivityItem</code>,因此会先执行它的<code>preExecute</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preExecute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        client<span class="token punctuation">.</span><span class="token function">countLaunchingActivities</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">updateProcessState</span><span class="token punctuation">(</span>mProcState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">updatePendingConfiguration</span><span class="token punctuation">(</span>mCurConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里就是更新下信息,没什么大不了的,看来还是分析下面的这一句比较重要:</p><pre class=" language-java"><code class="language-java"> <span class="token function">sendMessage</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>H<span class="token punctuation">.</span>EXECUTE_TRANSACTION<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityThread.H</code>中有:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> EXECUTE_TRANSACTION<span class="token operator">:</span>                    <span class="token keyword">final</span> ClientTransaction transaction <span class="token operator">=</span> <span class="token punctuation">(</span>ClientTransaction<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    mTransactionExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>继续看:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> IBinder token <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getActivityToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行callback</span>        <span class="token function">executeCallbacks</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过渡到最终状态,即Resumed状态</span>        <span class="token function">executeLifecycleState</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPendingActions<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCallbacks</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ClientTransactionItem<span class="token operator">></span> callbacks <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ClientTransactionItem item <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行callback</span>            item<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>            item<span class="token punctuation">.</span><span class="token function">postExecute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeLifecycleState</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityLifecycleItem lifecycleItem <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getLifecycleStateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Execute the final transition with proper parameters.</span>        lifecycleItem<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>        lifecycleItem<span class="token punctuation">.</span><span class="token function">postExecute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> 这下思路清晰了:</p><ol><li>先执行<code>LaunchActivityItem</code>中的<code>execute</code>和<code>postExecute</code>方法</li><li>再执行<code>ResumeActivityItem</code>中的<code>execute</code>和<code>postExecute</code>方法</li></ol><h2 id="Launch"><a href="#Launch" class="headerlink" title="Launch"></a>Launch</h2><p>看下<code>LaunchActivityItem</code>的指令:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"activityStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ActivityClientRecord用于记录真实的Activity实例</span>        ActivityClientRecord r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityClientRecord</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> mIdent<span class="token punctuation">,</span> mInfo<span class="token punctuation">,</span>                mOverrideConfig<span class="token punctuation">,</span> mCompatInfo<span class="token punctuation">,</span> mReferrer<span class="token punctuation">,</span> mVoiceInteractor<span class="token punctuation">,</span> mState<span class="token punctuation">,</span> mPersistentState<span class="token punctuation">,</span>                mPendingResults<span class="token punctuation">,</span> mPendingNewIntents<span class="token punctuation">,</span> mIsForward<span class="token punctuation">,</span>                mProfilerInfo<span class="token punctuation">,</span> client<span class="token punctuation">,</span> mAssistToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用ActivityThread的handleLaunchActivity方法        </span>        client<span class="token punctuation">.</span><span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> pendingActions<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* customIntent */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这下进入到了<code>ActivityThread</code>中的<code>handleLaunchActivity</code>方法了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Activity <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Initialize before creating the activity</span>        <span class="token comment" spellcheck="true">// 看看是否支持硬件加速,支持的话就预加载</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ThreadedRenderer<span class="token punctuation">.</span>sRendererDisabled                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ActivityInfo<span class="token punctuation">.</span>FLAG_HARDWARE_ACCELERATED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HardwareRenderer<span class="token punctuation">.</span><span class="token function">preload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化WindowManagerService服务</span>        WindowManagerGlobal<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Hint the GraphicsEnvironment that an activity is launching on the process.</span>        GraphicsEnvironment<span class="token punctuation">.</span><span class="token function">hintActivityLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动Activity</span>        <span class="token keyword">final</span> Activity a <span class="token operator">=</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这下进入了启动Activity的核心实现代码了:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**  Core implementation of activity launch. */</span>    <span class="token keyword">private</span> Activity <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActivityInfo aInfo <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>packageInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> r<span class="token punctuation">.</span>compatInfo<span class="token punctuation">,</span>                    Context<span class="token punctuation">.</span>CONTEXT_INCLUDE_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 目标Activity的ComponnetName</span>        ComponentName component <span class="token operator">=</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component <span class="token operator">=</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">resolveActivity</span><span class="token punctuation">(</span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>targetActivity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>targetActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为Activity创建Context</span>        ContextImpl appContext <span class="token operator">=</span> <span class="token function">createBaseContextForActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 目标Activity</span>        Activity activity <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//重头戏,创建目标Activity</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> appContext<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>                    cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            StrictMode<span class="token punctuation">.</span><span class="token function">incrementExpectedActivityCount</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to instantiate activity "</span> <span class="token operator">+</span> component                    <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Application app <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                CharSequence title <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">loadLabel</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Configuration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mCompatConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>overrideConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    config<span class="token punctuation">.</span><span class="token function">updateFrom</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>overrideConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_CONFIGURATION<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Launching activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" with config "</span> <span class="token operator">+</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>                Window window <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>mPendingRemoveWindow <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>mPreserveWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    window <span class="token operator">=</span> r<span class="token punctuation">.</span>mPendingRemoveWindow<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>mPendingRemoveWindow <span class="token operator">=</span> null<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>mPendingRemoveWindowManager <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                appContext<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行Activity的attach方法</span>                activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>appContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>token<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>ident<span class="token punctuation">,</span> app<span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">,</span> title<span class="token punctuation">,</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>embeddedID<span class="token punctuation">,</span> r<span class="token punctuation">.</span>lastNonConfigurationInstances<span class="token punctuation">,</span> config<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span> r<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">,</span> window<span class="token punctuation">,</span> r<span class="token punctuation">.</span>configCallback<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>assistToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>customIntent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    activity<span class="token punctuation">.</span>mIntent <span class="token operator">=</span> customIntent<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span>lastNonConfigurationInstances <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token function">checkAndBlockForNetworkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                activity<span class="token punctuation">.</span>mStartedActivity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> theme <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">getThemeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>theme <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 这是主题</span>                    activity<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                activity<span class="token punctuation">.</span>mCalled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行Activity的onCreate()回调</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isPersistable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">,</span> r<span class="token punctuation">.</span>persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activity<span class="token punctuation">.</span>mCalled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperNotCalledException</span><span class="token punctuation">(</span>                        <span class="token string">"Activity "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">" did not call through to super.onCreate()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>ON_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SuperNotCalledException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to start activity "</span> <span class="token operator">+</span> component                    <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里主要干了下面这几件事:</p><ol><li>为目标Activity创建Context</li><li>使用ClassLoader加载Activity类并实例化</li><li>使用ClassLoader加载Application并实例化,调用attach()和onCreate()方法</li><li>执行Activity的attach() 方法并为Activity设置主题</li><li>使用Instrumentation执行Activity的onCreate()回调</li></ol><p>Application和Activity代码的加载和实例化入口都在<code>Instrumentation</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Activity <span class="token function">newActivity</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span>            Intent intent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>            ClassNotFoundException <span class="token punctuation">{</span>        String pkg <span class="token operator">=</span> intent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null                <span class="token operator">?</span> intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiateActivity</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Application <span class="token function">newApplication</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>             ClassNotFoundException <span class="token punctuation">{</span>        Application app <span class="token operator">=</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">instantiateApplication</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><p>实例化其实都是反射调用:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Application <span class="token function">instantiateApplication</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Application<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Activity <span class="token function">instantiateActivity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><h2 id="Activity-onCreate"><a href="#Activity-onCreate" class="headerlink" title="Activity.onCreate()"></a>Activity.onCreate()</h2><p>至于Activity的onCreate()回调,也在<code>Instrumentation</code>中进行:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">,</span> Bundle icicle<span class="token punctuation">,</span>            PersistableBundle persistentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">prePerformCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        activity<span class="token punctuation">.</span><span class="token function">performCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">,</span> persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postPerformCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">performCreate</span><span class="token punctuation">(</span>Bundle icicle<span class="token punctuation">,</span> PersistableBundle persistentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>persistentState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">,</span> persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mFragments<span class="token punctuation">.</span><span class="token function">dispatchActivityCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivityTransitionState<span class="token punctuation">.</span><span class="token function">setEnterActivityOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getActivityOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dispatchActivityPostCreated</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里onCreate()回调就被调用了.</p><p>再来看下onResume()回调的调用吧</p><h2 id="Activity-onResume"><a href="#Activity-onResume" class="headerlink" title="Activity.onResume()"></a>Activity.onResume()</h2><p>还是回到之前的<code>ResumeActivityItem</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"activityResume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用ActivityThread的handleResumeActivity方法</span>        client<span class="token punctuation">.</span><span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* finalStateRequest */</span><span class="token punctuation">,</span> mIsForward<span class="token punctuation">,</span>                <span class="token string">"RESUME_ACTIVITY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postExecute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO(lifecycler): Use interface callback instead of AMS.</span>            ActivityTaskManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activityResumed</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还是Binder调用到ActivityThread中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isForward<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行onResume()</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> finalStateRequest<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">myQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIdleHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Idler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ActivityClientRecord <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> mActivities<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行onResume</span>            r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">performResume</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>startsNotResumed<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>state <span class="token operator">=</span> null<span class="token punctuation">;</span>            r<span class="token punctuation">.</span>persistentState <span class="token operator">=</span> null<span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>ON_RESUME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unable to resume activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里Activity启动流程就分析完了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>基于<code>ClientTransaction</code>的消息传递机制,通过Binder调用到ActivityThread中的方法</li><li>ActivityThread中会使用<code>Instrumentation</code>和<code>Handler</code>去执行各种逻辑</li><li><code>LoadedApk</code>和<code>Instrumentaion</code>负责Application的创建和实例化</li><li><code>Instrumentation</code>负责Activity的创建和实例化</li><li>Application和Activity的创建和实例化其实都是利用的Classloader和反射机制</li><li>四大组件的实例化代码都在<code>AppComponentFactory</code>中</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Activity启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件压缩格式</title>
      <link href="/2020/08/22/ji-chu/wen-jian-ya-suo-ge-shi/"/>
      <url>/2020/08/22/ji-chu/wen-jian-ya-suo-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><p>zlib 是一个压缩，解压数据的工具库，只是单纯的数据压缩，不管数据来源。</p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip 只能压缩单个文件</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>tar 压缩多个文件，通常与gzip配合使用。比如linux上常见的. tar. gz</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip 用于压缩多个文件的格式。可以使用多种压缩算法。</p><h2 id="7zip"><a href="#7zip" class="headerlink" title="7zip"></a>7zip</h2><p>7zip 一种新的压缩格式，拥有很高的压缩比。</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>rar一种专利文件格式，编码器有专利，解码器源码已经公开。一般用于windows平台。</p><h2 id="deflate算法"><a href="#deflate算法" class="headerlink" title="deflate算法"></a>deflate算法</h2><p>deflate 算法，无损压缩算法，zlib中有实现源码，7zip中的实现压缩率更高，广泛用于png图像压缩。</p><h2 id="inflate算法"><a href="#inflate算法" class="headerlink" title="inflate算法"></a>inflate算法</h2><p>inflate算法 gzip png等使用的解压缩算法，linux内核解压也是用的这个算法。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Hook之拦截Activity的启动</title>
      <link href="/2020/08/22/android/hook-zhi-lan-jie-activity-de-qi-dong/"/>
      <url>/2020/08/22/android/hook-zhi-lan-jie-activity-de-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>Android中的插件化和热修复已经应用了很多年了,这里面涉及的主要就是Hook,即反射 + 代理的技巧去实现一些常规代码无法实现的功能.</p><p>之前有说过Hook点击事件的方式,这里讲一下拦截Activity的Hook方法,这也是插件化的基础.</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在进行Hook之前,我们必须熟悉源码,找到可以反射的的点,然后进行替换,这里要拦截Activity的启动,那么肯定得看下Activity的启动流程.具体的就不说了,其实最后会执行到<code>Instrumentation</code>中的<code>execStartActivity</code>方法.</p><p>有下面这些点我们可以知道:</p><ul><li>应用层可以访问到<code>Instrumentation</code>类,因此可以实现一个它的子类,重写一些方法进行替换</li><li><code>Activity</code>和<code>ActivityThread</code>中持有了<code>Instrumentation</code>对象,字段名为<code>mInstrumentation</code>,因此可以利用反射获取到这个字段</li><li>启动Activity肯定会调用到<code>Instrumentation#execStartActivity</code>方法,因此这个就是替换点了</li></ul><p>看到上面的3个点,思路基本上就清晰了.从<code>Activity</code>或者<code>ActivityThread</code>中反射拿到<code>mInstrumentation</code>字段,然后替换成自己的<code>Instrumentation</code>实现,重写<code>execStartActivity</code>方法,然后在应用代码中进行替换.</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>其实有两种思路,一个是从<code>Activity</code>入手,一个是从<code>ActivityThread</code>入手.</p><h2 id="从Activity入手"><a href="#从Activity入手" class="headerlink" title="从Activity入手"></a>从<code>Activity</code>入手</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">hookInstrumentationWithActivity</span><span class="token punctuation">(</span>sourceActivity<span class="token operator">:</span>Activity<span class="token punctuation">,</span> callback<span class="token operator">:</span> ActivityStartingCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">val</span> instrumentationField <span class="token operator">=</span> Activity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mInstrumentation"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instrumentationField<span class="token punctuation">.</span>isAccessible<span class="token punctuation">)</span><span class="token punctuation">{</span>            instrumentationField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> originInstrumentation<span class="token operator">:</span>Instrumentation <span class="token operator">=</span> instrumentationField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceActivity<span class="token punctuation">)</span> <span class="token keyword">as</span> Instrumentation        instrumentationField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sourceActivity<span class="token punctuation">,</span><span class="token function">ProxyInstrumentation</span><span class="token punctuation">(</span>originInstrumentation<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>这种方式,需要传入Activity对象,并不是很实用.</p><h2 id="从ActivityThread入手"><a href="#从ActivityThread入手" class="headerlink" title="从ActivityThread入手"></a>从<code>ActivityThread</code>入手</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">hookInstrumentation</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> ActivityStartingCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取ActivityThread类</span>        <span class="token keyword">val</span> activityThreadClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.app.ActivityThread"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> currentActivityThreadMethod <span class="token operator">=</span> activityThreadClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"currentActivityThread"</span><span class="token punctuation">)</span>        currentActivityThreadMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">val</span> currentActivityThread <span class="token operator">=</span> currentActivityThreadMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> mInstrumentationField <span class="token operator">=</span> activityThreadClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mInstrumentation"</span><span class="token punctuation">)</span>        mInstrumentationField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">val</span> mInstrumentation <span class="token operator">=</span> mInstrumentationField<span class="token punctuation">[</span>currentActivityThread<span class="token punctuation">]</span> <span class="token keyword">as</span> Instrumentation        <span class="token keyword">val</span> proxyInstrumentation<span class="token operator">:</span> Instrumentation <span class="token operator">=</span> <span class="token function">ProxyInstrumentation</span><span class="token punctuation">(</span>mInstrumentation<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//替换</span>        mInstrumentationField<span class="token punctuation">[</span>currentActivityThread<span class="token punctuation">]</span> <span class="token operator">=</span> proxyInstrumentation    <span class="token punctuation">}</span></code></pre><p>这种方式不需要传入Activity,直接在Application初始化过程中注入即可.</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/jiangkang/KTools" target="_blank" rel="noopener">https://github.com/jiangkang/KTools</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio查看和调试AOSP源码</title>
      <link href="/2020/08/21/android/androidstudio-cha-kan-he-diao-shi-aosp-yuan-ma/"/>
      <url>/2020/08/21/android/androidstudio-cha-kan-he-diao-shi-aosp-yuan-ma/</url>
      
        <content type="html"><![CDATA[<p>之前说过使用VSCode阅读AOSP源码的方法,但是作为Android开发,还是对Android Studio熟悉一些,这里看下如何使用Android Studio查看AOSP源码.</p><p>如果你之前没完整的编译过AOSP,可以按照下面的流程进行配置:</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><pre class=" language-shell"><code class="language-shell">source build/envsetup.shmake idegen</code></pre><p>如果这一步成功了,没有报错,那么恭喜你,可以继续下一步了,如果报错了,到文章后面查看有没有你遇到的问题.</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><pre class=" language-shell"><code class="language-shell">sudo ./development/tools/idegen/idegen.sh</code></pre><p>这一步会在根目录下生成<code>android.ipr</code>和<code>android.iml</code>两个文件</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>使用Android Studio,选择<code>Open an existing Android Studio Project</code>打开上面生成的<code>android.ipr</code>文件即可</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>这一步要设置下JDK以及SDK:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_sdk.png" alt="选择SDK"></p><p>这里需要按照自己下载的源码版本选择对应的SDK.</p><p><img src="https://oss.jiangkang.tech/jk/aosp_jdk.png" alt="设置JDK"></p><p><img src="https://oss.jiangkang.tech/jk/aosp_sdk_jdk.png" alt="SDK设置JDK"></p><p>这一步需要新建一个不带classpath的JDK(点击+号,新建一个,改个名字,然后删除classpath就行),这个操作的话就会使用AOSP中的JDK环境了.</p><h2 id="调试源码"><a href="#调试源码" class="headerlink" title="调试源码"></a>调试源码</h2><p>可以找个模拟器,比如Genymotion,启动模拟器,然后在Android Studio里面选择对应的进程,就可以正常的进行调试了:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_debug.png" alt="调试源码"></p><h2 id="按需加载源码"><a href="#按需加载源码" class="headerlink" title="按需加载源码"></a>按需加载源码</h2><p>如果一次性将所有源码都加载到Android Studio,第一次索引时间可能会非常久(半个小时都有可能).这个时候可以修改<code>android.iml</code>来让Android Studio不要加载哪些模块:</p><p>在<code>android.iml</code>中搜索<code>excludeFolder</code>,然后在下面新增一些你不想加载的模块即可:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/bionic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/bootable<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/build<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/cts<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/developers<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/development<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/device<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/docs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/external<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/hardware<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/kernel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/out<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/pdk<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/platform_testing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/prebuilts<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/sdk<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/system<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/toolchain<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/tools<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/.repo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>当然,<strong>如果你的电脑性能非常好,可以不用修改这些,一次性加载就行</strong></p><p>如果不想手动修改<code>android.iml</code>文件,还可以在Android Studio中操作:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_exclude_modules.jpg" alt="exclude"></p><p>被你排除的module会显示为橙色,正常加载的module为灰色.</p><h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><ul><li><p>Could not find a supported mac sdk: [“10.10” “10.11” “10.12” “10.13” “10.14”]</p><p>在我的Macbook Pro上是出现了这个问题的,其实就是当前AOSP的soong编译工具还不支持MacOS 10.15,而我使用的正好是10.15,因此找到<code>build/soong/cc/config/x86_darwin_host.go</code>文件,并新增10.15支持即可:</p><pre class=" language-go"><code class="language-go">    darwinSupportedSdkVersions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token string">"10.10"</span><span class="token punctuation">,</span>        <span class="token string">"10.11"</span><span class="token punctuation">,</span>        <span class="token string">"10.12"</span><span class="token punctuation">,</span>        <span class="token string">"10.13"</span><span class="token punctuation">,</span>        <span class="token string">"10.14"</span><span class="token punctuation">,</span>        <span class="token string">"10.15"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></code></pre><p><strong>结尾那个逗号一定要带上,要不然会报错</strong></p><p>如果你不知道自己当前使用的sdk版本,可以使用下面的命令:</p><pre class=" language-shell"><code class="language-shell">find /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs -iname "*.sdk"</code></pre></li><li><p>Java代码跳转错误</p><p><img src="https://oss.jiangkang.tech/jk/activitythread.png" alt="image-20200821235334709"></p><p>比如<code>ActivityThread</code>中有:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManager<span class="token punctuation">.</span>PROCESS_STATE_UNKNOWN<span class="token punctuation">;</span></code></pre><p>一般不处理会“飘红”报错,那是因为引用的<code>ActivityManager</code>路径错了,引用到了test中去了.</p><p>有两种解决办法: </p><ul><li><p>修改<code>android.iml</code>中的<code>&lt;oderEntry&gt;</code>和 <code>&lt;sourceFolder&gt;</code>,对于不需要的module先<code>exclude</code>,<code>exclude</code>无效再查看<code>&lt;orderEntry&gt;</code>,再不行就删除对应的<code>&lt;sourceFolder&gt;</code></p></li><li><p>最干脆的办法,其实原理也和上面一样</p><p>把dependencies里一些乱七八糟的依赖都删掉,一劳永逸.(如果害怕删错了,可以找到对应的jar包删除)</p><p><img src="https://oss.jiangkang.tech/jk/aosp.png" alt="image-20200822000213857"></p></li></ul></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://liuwangshu.cn/framework/aosp/4-import-aosp.html" target="_blank" rel="noopener">https://liuwangshu.cn/framework/aosp/4-import-aosp.html</a></li><li><a href="http://wuxiaolong.me/2018/08/15/AOSP3/" target="_blank" rel="noopener">http://wuxiaolong.me/2018/08/15/AOSP3/</a></li><li><a href="https://stackoverflow.com/questions/50760701/could-not-find-a-supported-mac-sdk-10-10-10-11-10-12-10-13" target="_blank" rel="noopener">https://stackoverflow.com/questions/50760701/could-not-find-a-supported-mac-sdk-10-10-10-11-10-12-10-13</a></li><li><a href="https://liuwangshu.cn/framework/aosp/5-debug-aosp.html" target="_blank" rel="noopener">https://liuwangshu.cn/framework/aosp/5-debug-aosp.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MultiDex原理分析</title>
      <link href="/2020/08/19/android/multidex-yuan-li-fen-xi/"/>
      <url>/2020/08/19/android/multidex-yuan-li-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>单个Dex文件,即Dalvik Executable,代码中可调用的引用总数最多为64K(65536个).</p><h2 id="版本差异"><a href="#版本差异" class="headerlink" title="版本差异"></a>版本差异</h2><ul><li><p>Android 5.0 之前</p><p>使用的是Dalvik虚拟机,默认情况下Dalvik会限制每个APK只能使用一个classes.dex字节码文件.</p><p>为了绕过这一限制,可以使用<code>multidex</code>库,进行分dex.</p><p>在运行时,multidex会使用特殊的ClassLoader搜索对应方法的的所有dex文件,而不只是classes.dex.</p></li><li><p>Android 5.0 及更高版本</p><p>使用ART虚拟机,支持从APK加载多个Dex文件.</p><p>ART虚拟机在APP安装时会进行预编译,会扫描classesN.dex文件,并将它们编译成<code>.oat</code>文件,因此不需要使用multidex.</p></li></ul><p>一般把classes.dex,叫做primary dex,或者主要dex.</p><h2 id="指定主要dex中必须包含的类"><a href="#指定主要dex中必须包含的类" class="headerlink" title="指定主要dex中必须包含的类"></a>指定主要dex中必须包含的类</h2><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            multiDexKeepFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'multidex-config.txt'</span><span class="token punctuation">)</span>            <span class="token punctuation">...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>multidex-config.txt</code>中的格式如下:</p><pre class=" language-properties"><code class="language-properties">com/example/MyClass.classcom/example/MyOtherClass.class</code></pre><p>还有一个<code>multiDexKeepProguard</code>经常与上面的<code>multiDexKeepFile</code>搭配使用.</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们使用的基本上都是<code>MultiDex.install(context)</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">install</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断当前虚拟机是否已经支持了多个dex文件,比如如果是ART虚拟机,java.vm.version 的majorversion >=2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VM_MULTIDEX_CAPABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"VM has multidex support, MultiDex support library is disabled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ApplicationInfo applicationInfo <span class="token operator">=</span> <span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doInstallation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>applicationInfo<span class="token punctuation">.</span>sourceDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// base.apk</span>                <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>applicationInfo<span class="token punctuation">.</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// /data/data/packageName/</span>                CODE_CACHE_SECONDARY_FOLDER_NAME<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// "secondary-dexes"</span>                NO_KEY_PREFIX<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// ""</span>                <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>来看一下具体的安装过程:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doInstallation</span><span class="token punctuation">(</span>Context mainContext<span class="token punctuation">,</span> File sourceApk<span class="token punctuation">,</span> File dataDir<span class="token punctuation">,</span>            String secondaryFolderName<span class="token punctuation">,</span> String prefsKeyPrefix<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> reinstallOnPatchRecoverableException<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>                IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span>                InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span>                ClassNotFoundException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>installedApk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首次执行肯定不包含</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApk<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            installedApk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Android 5.0及以上版本,log提示不需要</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">></span> MAX_SUPPORTED_SDK_VERSION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"MultiDex is not guaranteed to work in SDK version "</span>                        <span class="token operator">+</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">+</span> <span class="token string">": SDK version higher than "</span>                        <span class="token operator">+</span> MAX_SUPPORTED_SDK_VERSION <span class="token operator">+</span> <span class="token string">" should be backed by "</span>                        <span class="token operator">+</span> <span class="token string">"runtime with built-in multidex capabilty but it's not the "</span>                        <span class="token operator">+</span> <span class="token string">"case here: java.vm.version=\""</span>                        <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.vm.version"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 可用用来加载Dex字节码的ClassLoader,multidex会修改它的pathList属性以添加额外的Dex文件</span>            <span class="token comment" spellcheck="true">// 这里返回的ClassLoder一定是BaseDexClassLoader或者它的子类,因为只有他们才可以加载Dex字节码</span>            ClassLoader loader <span class="token operator">=</span> <span class="token function">getDexClassloader</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清理/data/data/packageName/secondary-dexes/下的文件</span>            <span class="token function">clearOldDexDir</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建并获取/data/data/packageName/code_cache/secondary-dexes/</span>            File dexDir <span class="token operator">=</span> <span class="token function">getDexDir</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">,</span> dataDir<span class="token punctuation">,</span> secondaryFolderName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 会创建一个Multidex.lock的空文件,用于文件锁,防止该操作与dexopt并行执行</span>            MultiDexExtractor extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiDexExtractor</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">,</span> dexDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加载dex文件,把次要的dex每个都写入zip中</span>            List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> files <span class="token operator">=</span>                        extractor<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">,</span> prefsKeyPrefix<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关键,加载次要dex</span>            <span class="token function">installSecondaryDexes</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> dexDir<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里面其实就是解压APK,从APK中获取到Dex,并且把次要dex都打包成zip,后续处理:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">installSecondaryDexes</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> File dexDir<span class="token punctuation">,</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> files<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span>            InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span>            ClassNotFoundException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// >= Android 4.4</span>                V19<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">,</span> dexDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Androd 4.0 &lt;= x &lt; Android 4.4</span>                V14<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Android 4.0以下</span>                V4<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>看一下Android 4.4以上的逻辑:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">install</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> additionalClassPathEntries<span class="token punctuation">,</span>                File optimizedDirectory<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>                        NoSuchFieldException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span>                        IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到BaseDexClassLoader子类的pathList Field </span>            <span class="token comment" spellcheck="true">// 这里会从当前classloader找,找不到就找父类的              </span>            Field pathListField <span class="token operator">=</span> <span class="token function">findField</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token string">"pathList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object dexPathList <span class="token operator">=</span> pathListField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>IOException<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关键:将次要dex添加到dexElements中              </span>            <span class="token function">expandFieldArray</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> <span class="token string">"dexElements"</span><span class="token punctuation">,</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>File<span class="token operator">></span><span class="token punctuation">(</span>additionalClassPathEntries<span class="token punctuation">)</span><span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span>                    suppressedExceptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">expandFieldArray</span><span class="token punctuation">(</span>Object instance<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> extraElements<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>            IllegalAccessException <span class="token punctuation">{</span>        Field jlrField <span class="token operator">=</span> <span class="token function">findField</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> original <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> jlrField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> combined <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>                original<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> original<span class="token punctuation">.</span>length <span class="token operator">+</span> extraElements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> original<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>extraElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> extraElements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        jlrField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> combined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用makeDexElements,将次要的dex添加到elmentents中</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>                Object dexPathList<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span>                ArrayList<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span>                        NoSuchMethodException <span class="token punctuation">{</span>            Method makeDexElements <span class="token operator">=</span>                    <span class="token function">findMethod</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> <span class="token string">"makeDexElements"</span><span class="token punctuation">,</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> File<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                            ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> makeDexElements<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> files<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span>                    suppressedExceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span>            List<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTrusted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Element<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">[</span>files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> elementsPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 加载Dex,构造DexFile对象</span>              DexFile dex <span class="token operator">=</span> null<span class="token punctuation">;</span>              dex <span class="token operator">=</span> <span class="token function">loadDexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 将dex添加到elemnts中</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>dex <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>dex<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>dex <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isTrusted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                dex<span class="token punctuation">.</span><span class="token function">setTrusted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>elementsPos <span class="token operator">!=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          elements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> elementsPos<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用Native方法打开Dex文件,构造DexFile对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DexFile <span class="token function">loadDexFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">,</span>                                       Element<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optimizedDirectory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            String optimizedPath <span class="token operator">=</span> <span class="token function">optimizedPathFor</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> DexFile<span class="token punctuation">.</span><span class="token function">loadDex</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> optimizedPath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要做的就是Hook <code>BaseDexClassLoader</code>,找到其中的pathList字段,并将dex封装到Element中,添加到dexPathList的elements中.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>multidex的关键其实就是利用反射机制,Hook <code>BaseDexClassLoader</code>及其子类中的<code>pathList</code>,将除了主要dex的其他dex都利用classloader加载到pathList中.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> MultiDex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP启动流程分析</title>
      <link href="/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/"/>
      <url>/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>之前也写过Application启动流程之类的文章,但是总感觉这个程度不够,再来总结下.</p><p>先把脑子里那一堆忘掉,想一想要启动一个Application需要干什么:</p><ul><li><p>需要知道app可执行文件的位置</p><p>即apk中的dex文件,或者经过dexopt优化过后的dex文件,在APK安装的时候信息已经被记录在了手机上.</p></li><li><p>创建app进程</p><p>Android是基于Linux的,创建进程的方式一般有两种,fork和exec,在Android中应用进程都是从zygote进程fork的.</p></li><li><p>进程创建了得执行一个main()入口方法,把应用跑起来</p><p>main()入口在<code>ActivityThread</code>中</p></li><li><p>Android还比较特殊,需要启动一个主界面,即Launch Activity</p><p>APK安装时已经把Activity的各种信息保存了,因此找到对应APP的Launch Activity即可</p></li></ul><p>再把流程走一遍吧!</p><h2 id="点击桌面上的App-Icon"><a href="#点击桌面上的App-Icon" class="headerlink" title="点击桌面上的App Icon"></a>点击桌面上的App Icon</h2><p>Launcher 应用中 点击APP Icon之后会调用:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 启动目标APP</span><span class="token function">startAppShortcutOrInfoActivity</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span>AppInfo<span class="token punctuation">)</span> tag<span class="token punctuation">,</span> launcher<span class="token punctuation">,</span>                    sourceContainer <span class="token operator">==</span> null <span class="token operator">?</span> CONTAINER_ALL_APPS<span class="token operator">:</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startAppShortcutOrInfoActivity</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> ItemInfo item<span class="token punctuation">,</span> Launcher launcher<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> String sourceContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent<span class="token punctuation">;</span>        intent <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        launcher<span class="token punctuation">.</span><span class="token function">startActivitySafely</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> item<span class="token punctuation">,</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Launcher中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startActivitySafely</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> Intent intent<span class="token punctuation">,</span> ItemInfo item<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> String sourceContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">startActivitySafely</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> item<span class="token punctuation">,</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> v <span class="token keyword">instanceof</span> <span class="token class-name">BubbleTextView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BubbleTextView btv <span class="token operator">=</span> <span class="token punctuation">(</span>BubbleTextView<span class="token punctuation">)</span> v<span class="token punctuation">;</span>            btv<span class="token punctuation">.</span><span class="token function">setStayPressed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addOnResumeCallback</span><span class="token punctuation">(</span>btv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最终还是会调用到<code>startActivity()</code></p><h2 id="Activity-startActivity"><a href="#Activity-startActivity" class="headerlink" title="Activity#startActivity()"></a>Activity#startActivity()</h2><pre class=" language-java"><code class="language-java">activity<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivityForResult</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequiresPermission</span> Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Bundle options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mParent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Instrumentation<span class="token punctuation">.</span>ActivityResult ar <span class="token operator">=</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">execStartActivity</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span> mMainThread<span class="token punctuation">.</span><span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mToken<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                    intent<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mMainThread<span class="token punctuation">.</span><span class="token function">sendActivityResult</span><span class="token punctuation">(</span>                    mToken<span class="token punctuation">,</span> mEmbeddedID<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> ar<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ar<span class="token punctuation">.</span><span class="token function">getResultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>这里的<code>mMainThread</code>即是<code>ActivityThread</code>,不过不是目标应用的ActivityThread.</p><p>后面依次经历如下类的调用:</p><ol><li>Instrumentation#execStartActivity()</li><li>ActivityTaskManagerService#startActivityAsUser()</li><li>ActivityStartController#obtainStarter()</li><li>ActivityStarter#startActivity() -&gt; ActivityStarter#startActivityUnchecked()</li><li>RootActivityContainer#resumeFocusedStacksTopActivities()</li><li>ActivityStack#resumeTopActivityUncheckedLocked()  -&gt; ActivityStack#resumeTopActivityInnerLocked()</li><li>ActivityStackSupervisor#startSpecificActivityLocked()</li><li>目标app如果有线程正在运行,则ActivityStackSupervisor#realStartActivityLocked()</li><li>目标app如果没有线程在运行,则会发送一个Handler Message,调用ActivityManagerInternal#startProcess()</li></ol><h2 id="启动app进程"><a href="#启动app进程" class="headerlink" title="启动app进程"></a>启动app进程</h2><p>从<code>ActivityManagerInternal#startProcess()</code>方法开始看:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** Starts a given process. */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> String hostingType<span class="token punctuation">,</span> ComponentName hostingName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityManagerService</code>中有一个内部类<code>LocalService</code>就是继承的<code>ActivityManagerInternal</code>,因此看一下startProcess的实现方法:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> String hostingType<span class="token punctuation">,</span> ComponentName hostingName<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//传入了进程名字,目标进程的applicationInfo,activity的组件名</span>                    <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* intentFlags */</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">HostingRecord</span><span class="token punctuation">(</span>hostingType<span class="token punctuation">,</span> hostingName<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* allowWhileBooting */</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* isolated */</span><span class="token punctuation">,</span>                            <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* keepIfLarge */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">final</span> ProcessRecord <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span>            ApplicationInfo info<span class="token punctuation">,</span> <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> <span class="token keyword">int</span> intentFlags<span class="token punctuation">,</span>            HostingRecord hostingRecord<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowWhileBooting<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> isolated<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepIfLarge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的mProcessList专门处理app 进程相关的逻辑</span>        <span class="token keyword">return</span> mProcessList<span class="token punctuation">.</span><span class="token function">startProcessLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> intentFlags<span class="token punctuation">,</span>                hostingRecord<span class="token punctuation">,</span> allowWhileBooting<span class="token punctuation">,</span> isolated<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* isolatedUid */</span><span class="token punctuation">,</span> keepIfLarge<span class="token punctuation">,</span>                null <span class="token comment" spellcheck="true">/* ABI override */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* entryPoint */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* entryPointArgs */</span><span class="token punctuation">,</span>                null <span class="token comment" spellcheck="true">/* crashHandler */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到<code>ProcessList</code>中看下:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> ProcessRecord <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> <span class="token keyword">int</span> intentFlags<span class="token punctuation">,</span> HostingRecord hostingRecord<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> allowWhileBooting<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isolated<span class="token punctuation">,</span> <span class="token keyword">int</span> isolatedUid<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepIfLarge<span class="token punctuation">,</span>            String abiOverride<span class="token punctuation">,</span> String entryPoint<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> entryPointArgs<span class="token punctuation">,</span> Runnable crashHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProcessRecord app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据进程名和uid,获取进程信息,ProcessList中有一个Map存储了processName,uid到ProcessRecord的映射</span>        <span class="token comment" spellcheck="true">// 获取的是正在运行的进程的信息,如果之前没运行过这里当然是null</span>        app <span class="token operator">=</span> <span class="token function">getProcessRecordLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> keepIfLarge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkSlow</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"startProcess: after getProcessRecord"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProcessList<span class="token punctuation">.</span><span class="token function">killProcessGroup</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> app<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span><span class="token function">handleAppDiedLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建新的ProcessRecord</span>            app <span class="token operator">=</span> <span class="token function">newProcessRecordLocked</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> processName<span class="token punctuation">,</span> isolated<span class="token punctuation">,</span> isolatedUid<span class="token punctuation">,</span> hostingRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span>crashHandler <span class="token operator">=</span> crashHandler<span class="token punctuation">;</span>            app<span class="token punctuation">.</span>isolatedEntryPoint <span class="token operator">=</span> entryPoint<span class="token punctuation">;</span>            app<span class="token punctuation">.</span>isolatedEntryPointArgs <span class="token operator">=</span> entryPointArgs<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If this is a new package in the process, add the package to the list</span>            app<span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> info<span class="token punctuation">.</span>longVersionCode<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mProcessStats<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关键:启动app进程</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> hostingRecord<span class="token punctuation">,</span> abiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> success <span class="token operator">?</span> app <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>ProcessRecord app<span class="token punctuation">,</span> HostingRecord hostingRecord<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> disableHiddenApiChecks<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mountExtStorageFull<span class="token punctuation">,</span>            String abiOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// abi</span>            String requiredAbi <span class="token operator">=</span> <span class="token punctuation">(</span>abiOverride <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> abiOverride <span class="token operator">:</span> app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredAbi <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                requiredAbi <span class="token operator">=</span> Build<span class="token punctuation">.</span>SUPPORTED_ABIS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 指令集</span>            String instructionSet <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instructionSet <span class="token operator">=</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getInstructionSet</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 启动进程,进程的入口在ActivityThread.启动成功返回新进程的pid,否则抛出异常</span>            <span class="token keyword">final</span> String entryPoint <span class="token operator">=</span> <span class="token string">"android.app.ActivityThread"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实际启动</span>            <span class="token keyword">return</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>hostingRecord<span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> app<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span>                    startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 进程启动失败,清理相关数据</span>            mService<span class="token punctuation">.</span><span class="token function">forceStopPackageLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>userId<span class="token punctuation">,</span> <span class="token string">"start failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里默认是<strong>异步</strong>的方式启动进程,即在一个单独的线程中启动进程:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// service是ActivityManagerService,handler是一个ServiceThread(HandlerThread)中的handler            </span>mService<span class="token punctuation">.</span>mProcStartHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 启动进程</span>       <span class="token keyword">final</span> Process<span class="token punctuation">.</span>ProcessStartResult startResult <span class="token operator">=</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>hostingRecord<span class="token punctuation">,</span>                       entryPoint<span class="token punctuation">,</span> app<span class="token punctuation">,</span> app<span class="token punctuation">.</span>startUid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span>              app<span class="token punctuation">.</span>seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> app<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">handleProcessStartedLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> startResult<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">startProcess</span><span class="token punctuation">(</span>HostingRecord hostingRecord<span class="token punctuation">,</span> String entryPoint<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>            String seInfo<span class="token punctuation">,</span> String requiredAbi<span class="token punctuation">,</span> String instructionSet<span class="token punctuation">,</span> String invokeWith<span class="token punctuation">,</span>            <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动进程</span>            startResult <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>processName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>dataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>PROC_START_SEQ_IDENT <span class="token operator">+</span> app<span class="token punctuation">.</span>startSeq<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其实这个方法里有一个判断,即regular_zygote,app_zygote,webview_zygote.其实这三个判断,在HostingRecord中可以简单的看出来区别:</p><ul><li>regular_zygote,一般是各种Activity的启动时候用的</li><li>app_zygote,一般是各种Service启动的时候用的</li><li>webview_zygote,当然是webview用的</li></ul><p>后面就进入了<code>Process</code>中了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ProcessStartResult <span class="token function">start</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> String processClass<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> String niceName<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String seInfo<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@NonNull</span> String abi<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String instructionSet<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String appDataDir<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String invokeWith<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String packageName<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> zygoteArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// ZYGOTE_PROCESS是ZygoteProcess,processClass,即前面传入的ActivityThread,niceName是包名</span>        <span class="token keyword">return</span> ZYGOTE_PROCESS<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>processClass<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>                    abi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">/*useUsapPool=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> zygoteArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">startViaZygote</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> String processClass<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> String niceName<span class="token punctuation">,</span>                                                      <span class="token keyword">final</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span>                                                      <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>                                                      <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String seInfo<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@NonNull</span> String abi<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String instructionSet<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String appDataDir<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String invokeWith<span class="token punctuation">,</span>                                                      <span class="token keyword">boolean</span> startChildZygote<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String packageName<span class="token punctuation">,</span>                                                      <span class="token keyword">boolean</span> useUsapPool<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> extraArgs<span class="token punctuation">)</span>                                                      <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> argsForZygote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --runtime-args, --setuid=, --setgid=,</span>        <span class="token comment" spellcheck="true">// and --setgroups= must go first</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--runtime-args"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--setuid="</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--setgid="</span> <span class="token operator">+</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--runtime-flags="</span> <span class="token operator">+</span> runtimeFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_READ<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_FULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_INSTALLER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-installer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_LEGACY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-legacy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--target-sdk-version="</span> <span class="token operator">+</span> targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --setgroups is a comma-separated list</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gids <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> gids<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"--setgroups="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> gids<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>gids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>niceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--nice-name="</span> <span class="token operator">+</span> niceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>seInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--seinfo="</span> <span class="token operator">+</span> seInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instructionSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--instruction-set="</span> <span class="token operator">+</span> instructionSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>appDataDir <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--app-data-dir="</span> <span class="token operator">+</span> appDataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--invoke-with"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invokeWith<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startChildZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--start-child-zygote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--package-name="</span> <span class="token operator">+</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 入口:"android.app.ActivityThread"</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>processClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extraArgs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>argsForZygote<span class="token punctuation">,</span> extraArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不使用系统图形驱动,则不会使用usap pool</span>            <span class="token keyword">return</span> <span class="token function">zygoteSendArgsAndGetResult</span><span class="token punctuation">(</span><span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">,</span>                                              useUsapPool<span class="token punctuation">,</span>                                              argsForZygote<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>USAP</code>就是unspecialized app process 的意思.</p><p>这里分两步:</p><ol><li><p>打开zygote 的socket 连接</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ZygoteState <span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span>String abi<span class="token punctuation">)</span> <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 连接到64位的zygote socket</span>            <span class="token function">attemptConnectionToPrimaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> primaryZygoteState<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mZygoteSecondarySocketAddress <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打开32位的zygote socket</span>                <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> secondaryZygoteState<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"Error connecting to zygote"</span><span class="token punctuation">,</span> ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"Unsupported zygote ABI: "</span> <span class="token operator">+</span> abi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>对于Android而言,这里首先会尝试打开64位的zygote socket,如果失败才会尝试32位的zygote.然后返回一个连接状态ZygoteState.</p><p>不管是64位还是32位的zygote socket,过程都是一样的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptConnectionToPrimaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryZygoteState <span class="token operator">==</span> null <span class="token operator">||</span> primaryZygoteState<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// mZygoteSocketAddress 即 名为"zygote"的LocalSocketAddress</span>            primaryZygoteState <span class="token operator">=</span>                    ZygoteState<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mZygoteSocketAddress<span class="token punctuation">,</span> mUsapPoolSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetApiBlacklistExemptions</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessLogSampleRate</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessStatslogSampleRate</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState <span class="token operator">==</span> null <span class="token operator">||</span> secondaryZygoteState<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// "zygote_secondary"</span>            secondaryZygoteState <span class="token operator">=</span>                    ZygoteState<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mZygoteSecondarySocketAddress<span class="token punctuation">,</span>                            mUsapPoolSecondarySocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对一些API的调用做一些限制</span>            <span class="token function">maybeSetApiBlacklistExemptions</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessLogSampleRate</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessStatslogSampleRate</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>具体的连接过程看下面:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">static</span> ZygoteState <span class="token function">connect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LocalSocketAddress zygoteSocketAddress<span class="token punctuation">,</span>                <span class="token annotation punctuation">@Nullable</span> LocalSocketAddress usapSocketAddress<span class="token punctuation">)</span>                <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输入输出流</span>            DataInputStream zygoteInputStream<span class="token punctuation">;</span>            BufferedWriter zygoteOutputWriter<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// zygote使用的是LocalSocket</span>            <span class="token keyword">final</span> LocalSocket zygoteSessionSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接socket</span>                zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 绑定对应的输入输出流</span>                zygoteInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zygoteOutputWriter <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>                                <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                Zygote<span class="token punctuation">.</span>SOCKET_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将输入输出流等信息封装到ZygoteState中</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteState</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">,</span> usapSocketAddress<span class="token punctuation">,</span>                                   zygoteSessionSocket<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">,</span> zygoteOutputWriter<span class="token punctuation">,</span>                                   <span class="token function">getAbiList</span><span class="token punctuation">(</span>zygoteOutputWriter<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>到这里已经建立起了和zygote的local socket连接.</p></li><li><p>通过建立的local socket 连接发送命令并且返回结果</p><p>这里发送的命令都在前面组装的<code>argsForZygote</code>中,在这里其实就是使用zygote 启动(fork) 指定的进程的命令.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">attemptZygoteSendArgsAndGetResult</span><span class="token punctuation">(</span>            ZygoteState zygoteState<span class="token punctuation">,</span> String msgStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> BufferedWriter zygoteWriter <span class="token operator">=</span> zygoteState<span class="token punctuation">.</span>mZygoteOutputWriter<span class="token punctuation">;</span>            <span class="token keyword">final</span> DataInputStream zygoteInputStream <span class="token operator">=</span> zygoteState<span class="token punctuation">.</span>mZygoteInputStream<span class="token punctuation">;</span>            zygoteWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msgStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            zygoteWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// fork结果</span>            Process<span class="token punctuation">.</span>ProcessStartResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Process<span class="token punctuation">.</span>ProcessStartResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// fork进程成功,返回进程的pid</span>            result<span class="token punctuation">.</span>pid <span class="token operator">=</span> zygoteInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>usingWrapper <span class="token operator">=</span> zygoteInputStream<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"fork() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zygoteState<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"IO Exception while communicating with Zygote - "</span>                    <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><p>经历了这些步骤之后,app 进程也就创建成功了,再来看下zygote具体是如何响应fork请求的.</p><h2 id="Zygote-fork-app进程"><a href="#Zygote-fork-app进程" class="headerlink" title="Zygote fork app进程"></a>Zygote fork app进程</h2><p>ZygoteServer和ZygoteConnection中会收到socket请求,并做对应的处理:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个parsedArgs就是上面传入的各种启动参数       </span>pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkAndSpecialize</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mUid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGids<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mRuntimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mMountExternal<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mSeInfo<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">,</span> fdsToClose<span class="token punctuation">,</span> fdsToIgnore<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mStartChildZygote<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mInstructionSet<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mAppDataDir<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到Zygote中看看:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forkAndSpecialize</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span> String seInfo<span class="token punctuation">,</span> String niceName<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fdsToClose<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fdsToIgnore<span class="token punctuation">,</span> <span class="token keyword">boolean</span> startChildZygote<span class="token punctuation">,</span> String instructionSet<span class="token punctuation">,</span> String appDataDir<span class="token punctuation">,</span>            <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">preFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用native方法fork app进程,niceName是进程名</span>        <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">nativeForkAndSpecialize</span><span class="token punctuation">(</span>                uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> fdsToClose<span class="token punctuation">,</span>                fdsToIgnore<span class="token punctuation">,</span> startChildZygote<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回0,表示此时是子进程执行,即app进程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Zygote<span class="token punctuation">.</span><span class="token function">disableExecuteOnly</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">postForkCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到<code>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</code>中看看:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// nice_name是进程名</span><span class="token keyword">static</span> jint <span class="token function">com_android_internal_os_Zygote_nativeForkAndSpecialize</span><span class="token punctuation">(</span>        JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jclass<span class="token punctuation">,</span> jint uid<span class="token punctuation">,</span> jint gid<span class="token punctuation">,</span> jintArray gids<span class="token punctuation">,</span>        jint runtime_flags<span class="token punctuation">,</span> jobjectArray rlimits<span class="token punctuation">,</span>        jint mount_external<span class="token punctuation">,</span> jstring se_info<span class="token punctuation">,</span> jstring nice_name<span class="token punctuation">,</span>        jintArray managed_fds_to_close<span class="token punctuation">,</span> jintArray managed_fds_to_ignore<span class="token punctuation">,</span> jboolean is_child_zygote<span class="token punctuation">,</span>        jstring instruction_set<span class="token punctuation">,</span> jstring app_data_dir<span class="token punctuation">,</span> jboolean is_top_app<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fork操作</span>    pid_t pid <span class="token operator">=</span> <span class="token function">ForkCommon</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fds_to_close<span class="token punctuation">,</span> fds_to_ignore<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 子进程,即app 进程执行下面的逻辑</span>    <span class="token comment" spellcheck="true">// 这里主要是设置线程名等逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">SpecializeCommon</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtime_flags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span>                       capabilities<span class="token punctuation">,</span> capabilities<span class="token punctuation">,</span>                       mount_external<span class="token punctuation">,</span> se_info<span class="token punctuation">,</span> nice_name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                       is_child_zygote <span class="token operator">==</span> JNI_TRUE<span class="token punctuation">,</span> instruction_set<span class="token punctuation">,</span> app_data_dir<span class="token punctuation">,</span>                       is_top_app <span class="token operator">==</span> JNI_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进程fork之后,会执行下面的逻辑(ZygoteConnection.java中):</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Runnable <span class="token function">handleChildProc</span><span class="token punctuation">(</span>ZygoteArguments parsedArgs<span class="token punctuation">,</span> FileDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> descriptors<span class="token punctuation">,</span>            FileDescriptor pipeFd<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置进程名</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最初传参没有带这个参数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            WrapperInit<span class="token punctuation">.</span><span class="token function">execApplication</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                    VMRuntime<span class="token punctuation">.</span><span class="token function">getCurrentInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    pipeFd<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"WrapperInit.execApplication unexpectedly returned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 普通app会走这个分支</span>                <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">zygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                        parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* classLoader */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">childZygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                        parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* classLoader */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 再来看一下<code>ZygoteInit</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runnable <span class="token function">zygoteInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeInit<span class="token punctuation">.</span><span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteInit<span class="token punctuation">.</span><span class="token function">nativeZygoteInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RuntimeInit<span class="token punctuation">.</span><span class="token function">applicationInit</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> 这个方法里干了很多重要的事情:</p><ul><li><p>设置异常处理的逻辑和一些崩溃日志的输出逻辑</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 应用到VM中的所有线程,pre handler不可替换,default handler可以替换</span>        LoggingHandler loggingHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeHooks<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionPreHandler</span><span class="token punctuation">(</span>loggingHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我们常见的异常处理</span>        Thread<span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KillApplicationHandler</span><span class="token punctuation">(</span>loggingHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoggingHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> mTriggered <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mApplicationObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Process<span class="token punctuation">.</span>SYSTEM_UID <span class="token operator">==</span> Process<span class="token punctuation">.</span><span class="token function">myUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">Clog_e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"*** FATAL EXCEPTION IN SYSTEM PROCESS: "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里就是我们最常见的崩溃信息</span>                StringBuilder message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// The "FATAL EXCEPTION" string is still used on Android even though</span>                <span class="token comment" spellcheck="true">// apps can set a custom UncaughtExceptionHandler that renders uncaught</span>                <span class="token comment" spellcheck="true">// exceptions non-fatal.</span>                message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"FATAL EXCEPTION: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> String processName <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">currentProcessName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>processName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Process: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>processName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"PID: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">Clog_e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>具体的异常捕获话题就不在这里写了,偏题了.</p></li><li><p>找到ActivityThread的入口方法,并反射调用</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> Runnable <span class="token function">applicationInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置APP内存使用上限和targetSdkVersion</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetHeapUtilization</span><span class="token punctuation">(</span><span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetSdkVersion</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Arguments args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arguments</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到ActivityThread的main方法</span>        <span class="token keyword">return</span> <span class="token function">findStaticMain</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>startClass<span class="token punctuation">,</span> args<span class="token punctuation">.</span>startArgs<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><pre><code>  protected static Runnable findStaticMain(String className, String[] argv,          ClassLoader classLoader) {      Class&lt;?&gt; cl;      try {          // 反射获取到ActivityThread          cl = Class.forName(className, true, classLoader);      } catch (ClassNotFoundException ex) {          throw new RuntimeException(                  &quot;Missing class when invoking static main &quot; + className,                  ex);      }      Method m;      try {          // 获取到main方法          m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });      } catch (NoSuchMethodException ex) {          throw new RuntimeException(                  &quot;Missing static main on &quot; + className, ex);      } catch (SecurityException ex) {          throw new RuntimeException(                  &quot;Problem getting static main on &quot; + className, ex);      }      int modifiers = m.getModifiers();      if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {          throw new RuntimeException(                  &quot;Main method is not public and static on &quot; + className);      }      // 包装到一个Runnable中      return new MethodAndArgsCaller(m, argv);  }</code></pre><pre><code>  ```java      static class MethodAndArgsCaller implements Runnable {          /** method to call */          private final Method mMethod;          /** argument array */          private final String[] mArgs;          public MethodAndArgsCaller(Method method, String[] args) {              mMethod = method;              mArgs = args;          }          public void run() {              try {                  // 执行ActivityThread.main()                  mMethod.invoke(null, new Object[] { mArgs });              } catch (IllegalAccessException ex) {                  throw new RuntimeException(ex);              } catch (InvocationTargetException ex) {                  Throwable cause = ex.getCause();                  if (cause instanceof RuntimeException) {                      throw (RuntimeException) cause;                  } else if (cause instanceof Error) {                      throw (Error) cause;                  }                  throw new RuntimeException(ex);              }          }      }</code></pre><p>  到这里ActivityThread.main()就被成功执行了.</p><p>  那么实际上这个返回的Runnable是谁运行的,在什么线程里运行的呢?</p><p>  答案是在<code>ZygoteServer</code>的<code>runSelectLoop</code>方法中会再处理一下,最后交由ZygoteInit去执行.</p><h2 id="ActivityThread-main"><a href="#ActivityThread-main" class="headerlink" title="ActivityThread.main()"></a>ActivityThread.main()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//主线程 Looper</span>        Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键方法,会将APP的Application对象与这个新的app进程联系起来</span>        thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainThreadHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sMainThreadHandler <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最为关键的调用就是attach方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// mgr就是ActivityManagerService</span><span class="token keyword">final</span> IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    mgr<span class="token punctuation">.</span><span class="token function">attachApplication</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后会调用到<code>ApplicationThread</code>中的<code>bindApplication()</code>方法:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">bindApplication</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo appInfo<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span>ProviderInfo<span class="token operator">></span> providers<span class="token punctuation">,</span> ComponentName instrumentationName<span class="token punctuation">,</span>                ProfilerInfo profilerInfo<span class="token punctuation">,</span> Bundle instrumentationArgs<span class="token punctuation">,</span>                IInstrumentationWatcher instrumentationWatcher<span class="token punctuation">,</span>                IUiAutomationConnection instrumentationUiConnection<span class="token punctuation">,</span> <span class="token keyword">int</span> debugMode<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> enableBinderTracking<span class="token punctuation">,</span> <span class="token keyword">boolean</span> trackAllocation<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> isRestrictedBackupMode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> persistent<span class="token punctuation">,</span> Configuration config<span class="token punctuation">,</span>                CompatibilityInfo compatInfo<span class="token punctuation">,</span> Map services<span class="token punctuation">,</span> Bundle coreSettings<span class="token punctuation">,</span>                String buildSerial<span class="token punctuation">,</span> AutofillOptions autofillOptions<span class="token punctuation">,</span>                ContentCaptureOptions contentCaptureOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将进程信息封装到AppBindData中,然后利用Handler传输</span>            AppBindData data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppBindData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span>processName <span class="token operator">=</span> processName<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>appInfo <span class="token operator">=</span> appInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>providers <span class="token operator">=</span> providers<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationName <span class="token operator">=</span> instrumentationName<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationArgs <span class="token operator">=</span> instrumentationArgs<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationWatcher <span class="token operator">=</span> instrumentationWatcher<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationUiAutomationConnection <span class="token operator">=</span> instrumentationUiConnection<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>debugMode <span class="token operator">=</span> debugMode<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>enableBinderTracking <span class="token operator">=</span> enableBinderTracking<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>trackAllocation <span class="token operator">=</span> trackAllocation<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>restrictedBackupMode <span class="token operator">=</span> isRestrictedBackupMode<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>persistent <span class="token operator">=</span> persistent<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>compatInfo <span class="token operator">=</span> compatInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>initProfilerInfo <span class="token operator">=</span> profilerInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>buildSerial <span class="token operator">=</span> buildSerial<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>autofillOptions <span class="token operator">=</span> autofillOptions<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>contentCaptureOptions <span class="token operator">=</span> contentCaptureOptions<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// H是ApplicationThread中的一个Handler</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>BIND_APPLICATION<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这里会发送一个<code>BIND_APPLICATION</code>消息,Handler接收到之后会进行处理:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleBindApplication</span><span class="token punctuation">(</span>AppBindData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置UI线程为敏感线程</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">registerSensitiveThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 告诉ART虚拟机进程名</span>        Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>processName<span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">setProcessPackageName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传递数据目录给ART,用于缓存信息</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">setProcessDataDirectory</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// data.info 是LoadedApk对象,即表示一个新APK的信息</span>        data<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token function">getPackageInfoNoCheck</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">,</span> data<span class="token punctuation">.</span>compatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        HardwareRenderer<span class="token punctuation">.</span><span class="token function">setPackageName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建应用的 context</span>        <span class="token keyword">final</span> ContextImpl appContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 硬件加速</span>        <span class="token function">setupGraphicsSupport</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">basicInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Application对象</span>        Application app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里非常重要的是:传入的instrumentation对象为null</span>        app <span class="token operator">=</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>restrictedBackupMode<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        mInitialApplication <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不是backup模式的话,会安装ContentProvider</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>restrictedBackupMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>providers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">installContentProviders</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> data<span class="token punctuation">.</span>providers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Instrument 测试通常在这个时机启动测试线程,因此在这里onCreate</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>instrumentationArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Application的onCreate()方法</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">callApplicationOnCreate</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 预加载字体资源</span>        FontsContract<span class="token punctuation">.</span><span class="token function">setApplicationContextForResources</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ApplicationInfo info <span class="token operator">=</span>                        <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>                                data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                PackageManager<span class="token punctuation">.</span>GET_META_DATA <span class="token comment" spellcheck="true">/*flags*/</span><span class="token punctuation">,</span>                                UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">final</span> <span class="token keyword">int</span> preloadedFontsResource <span class="token operator">=</span> info<span class="token punctuation">.</span>metaData<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>                          ApplicationInfo<span class="token punctuation">.</span>METADATA_PRELOADED_FONTS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>preloadedFontsResource <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              data<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preloadFonts</span><span class="token punctuation">(</span>preloadedFontsResource<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个过程中做了很多事,但是主要就以下这些:</p><ul><li>告诉ART虚拟机一些信息,比如应用的包名,数据目录等</li><li>各种调试功能,Profile功能判断与设置</li><li>告诉虚拟机当前UI线程是敏感线程</li><li>硬件加速的支持</li><li>创建LoadedApk对象</li><li>创建Context对象</li><li><strong>在创建Application之前</strong>,创建Instrumentation,用于监视app与系统的交互</li><li><strong>创建Application对象</strong></li><li>安装ContentProvider</li><li>利用Instrumentation执行Application#onCreate()回调</li></ul><h2 id="Application对象的创建"><a href="#Application对象的创建" class="headerlink" title="Application对象的创建"></a>Application对象的创建</h2><p>上面已经说过,会调用<code>LoadedAPk#makeApplication()</code>方法去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Application <span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceDefaultAppClass<span class="token punctuation">,</span>            Instrumentation instrumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mApplication <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mApplication<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Application app <span class="token operator">=</span> null<span class="token punctuation">;</span>        String appClass <span class="token operator">=</span> mApplicationInfo<span class="token punctuation">.</span>className<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认的Application</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>forceDefaultAppClass <span class="token operator">||</span> <span class="token punctuation">(</span>appClass <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            appClass <span class="token operator">=</span> <span class="token string">"android.app.Application"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mPackageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置线程的Context ClassLoader</span>                <span class="token function">initializeJavaContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建Context</span>            ContextImpl appContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>mActivityThread<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建Application对象</span>            app <span class="token operator">=</span> mActivityThread<span class="token punctuation">.</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">newApplication</span><span class="token punctuation">(</span>                    cl<span class="token punctuation">,</span> appClass<span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            appContext<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span>        mActivityThread<span class="token punctuation">.</span>mAllApplications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        mApplication <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Rewrite the R 'constants' for all library apks.</span>        SparseArray<span class="token operator">&lt;</span>String<span class="token operator">></span> packageIdentifiers <span class="token operator">=</span> <span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssignedPackageIdentifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0x01</span> <span class="token operator">||</span> id <span class="token operator">==</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">rewriteRValues</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其实还是调用的Instrumentation去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Application <span class="token function">newApplication</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>             ClassNotFoundException <span class="token punctuation">{</span>        Application app <span class="token operator">=</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">instantiateApplication</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最后会进入到<code>AppComponentFactory</code>中利用ClassLoader去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Application <span class="token function">instantiateApplication</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的ClassLoader就是LoadedApk的ClassLoader</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Application<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里Application对象就创建成功了,并且调用了Application的<code>attach(context)</code>方法.</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/* package */</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">attachBaseContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLoadedApk <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">getImpl</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>attach</code>方法子类是不可以重写的,但是<code>attachBaseContext</code>可以,这里可以看到Application还持有了LoadedApk对象.</p><h2 id="Application-onCreate-执行"><a href="#Application-onCreate-执行" class="headerlink" title="Application#onCreate()执行"></a>Application#onCreate()执行</h2><p>在application对象<code>attach(context)</code>之后,Instrumentation会中会调用<code>Application#onCreate()</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callApplicationOnCreate</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其实在调用<code>Application#onCreate()</code>之前,可以在<code>Instrumentation</code>中插入一些钩子逻辑,这个在前面的代码中可以看到端倪:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p><code>Instrumentation</code>的<code>onCreate()</code>是一个空方法,可以实现自己的<code>Instrumentation</code>以插入一些逻辑,以在应用代码执行前做一些特殊的处理.</p><p>到这里Application就已经创建完成,并且执行了onCreate了.剩下的就是其中Launcher Activity的流程了,这篇文章源码流程已经够多了,后面单独写一篇文章梳理下Activity的启动流程吧!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Application其实也是通过ClassLoader加载的</li><li>zygote fork出了进程,但是并不代表执行了ActivityThread的main方法</li><li>zygote是java世界的进程,fork出 app进程之后,app进程也拥有一份拷贝数据</li><li>Instrumentation和LoadedApk在Application的启动过程中很重要,可以利用它做很多事情</li><li>全局的异常捕获与处理也是在这个阶段设置的</li><li>堆内存的使用上限也是这个过程设置的</li><li>Context的创建,主线程Looper等都是在这个过程中进行的</li><li>Debug模式,Profile模式的逻辑判断也是在这个过程进行的</li><li>zygote的通信机制:local socket + file descriptor</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> APP启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APK安装流程分析-普通APP的安装</title>
      <link href="/2020/08/11/android/apk-an-zhuang-liu-cheng-fen-xi-pu-tong-app-de-an-zhuang/"/>
      <url>/2020/08/11/android/apk-an-zhuang-liu-cheng-fen-xi-pu-tong-app-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Android系统的代码总是在不断迭代的,具体的类和方法本身并不重要,关键是了解流程与主要的路径</p><p>本文基于AOSP master分支 2020年8月,Android 11 已经处于beta版</p></blockquote><h2 id="三种安装方式"><a href="#三种安装方式" class="headerlink" title="三种安装方式"></a>三种安装方式</h2><ul><li>系统级app安装</li><li>普通app安装</li><li>adb安装</li></ul><p>这里看一下普通APP的安装.</p><p>在分析之前,想一下如果是我们来安装apk,需要怎么做:</p><ol><li><p>apk实际上是一个zip包,先解压,要不然只能测量下大小了,当然也可以不解压直接查看zip包的内容</p></li><li><p>系统重启之后我们依然要快速显示和启动app,那么肯定得存一份APP信息到手机上,那么存什么信息呢?</p><ul><li>可执行文件的位置,在Android里跑的是dex,或者dex处理过后的机器码,因此这里应该是dex或者oat文件的位置</li><li>应用有一些特殊的功能,比如可以用来打开文档,网页等,因此需要把这些信息注册到一个系统表里,可以快速查询,Android中应也有这么一个表</li></ul><p>而且最好是把apk的资源,可执行文件等内部数据放到一个文件夹下,这样卸载的时候可以直接删除目录.</p></li><li><p>zip包解压了,信息也存了,为了安全,应该把对应的可执行文件和资源文件复制到指定的路径,如果有so库,还要让程序知道去哪里找so文件</p></li><li><p>检查手机上之前是否已经安装了这个app,如果安装了,比较一下版本,签名,再确定怎么处理</p></li><li><p>删除apk包以节省空间</p></li></ol><h2 id="APK解压缩"><a href="#APK解压缩" class="headerlink" title="APK解压缩"></a>APK解压缩</h2><p>APK的解析在Java中的入口在<code>PackageParser</code>中,但是实际解压的操作在Native层,也就是<code>ApkAssets</code>中,<code>ApkAssets</code>中会调用libziparchive库去解压缩APK.</p><pre class=" language-cpp"><code class="language-cpp">int32_t <span class="token function">OpenArchive</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">::</span>android<span class="token operator">::</span>base<span class="token operator">::</span>utf8<span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_BINARY <span class="token operator">|</span> O_CLOEXEC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Unable to open '%s': %s"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> kIoError<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int32_t <span class="token function">OpenArchiveFd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">,</span>                      <span class="token keyword">bool</span> assume_ownership<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> assume_ownership<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> debug_file_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> int32_t <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>ZipArchive<span class="token operator">*</span> archive<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  int32_t result <span class="token operator">=</span> <span class="token function">MapCentralDirectory</span><span class="token punctuation">(</span>debug_file_name<span class="token punctuation">,</span> archive<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">!=</span> kSuccess <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token function">ParseZipArchive</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int32_t <span class="token function">OpenArchiveFd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">,</span>                      <span class="token keyword">bool</span> assume_ownership<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> assume_ownership<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> debug_file_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解压的具体的过程就不分析了,使用解压库就行,来看下Manifest.xml信息的提取.</p><p><code>ApkAssets.java</code>中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> XmlResourceParser <span class="token function">openXml</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> nativeXmlPtr <span class="token operator">=</span> <span class="token function">nativeOpenXml</span><span class="token punctuation">(</span>mNativePtr<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>XmlBlock block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBlock</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> nativeXmlPtr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XmlResourceParser parser <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">newParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// If nativeOpenXml doesn't throw, it will always return a valid native pointer,</span>                <span class="token comment" spellcheck="true">// which makes newParser always return non-null. But let's be paranoid.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"block.newParser() returned a null parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> parser<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>frameworks/base/core/jni/android_content_res_ApkAssets.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> jlong <span class="token function">NativeOpenXml</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jclass <span class="token comment" spellcheck="true">/*clazz*/</span><span class="token punctuation">,</span> jlong ptr<span class="token punctuation">,</span> jstring file_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ScopedUtfChars <span class="token function">path_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ApkAssets<span class="token operator">*</span> apk_assets <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> ApkAssets<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里就是打开Manifest文件的入口</span>  std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span> apk_assets<span class="token operator">-</span><span class="token operator">></span><span class="token function">Open</span><span class="token punctuation">(</span>path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                  Asset<span class="token operator">::</span>AccessMode<span class="token operator">::</span>ACCESS_RANDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"java/io/FileNotFoundException"</span><span class="token punctuation">,</span> path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// DynamicRefTable is only needed when looking up resource references. Opening an XML file</span>  <span class="token comment" spellcheck="true">// directly from an ApkAssets has no notion of proper resource references.</span>  std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ResXMLTree<span class="token operator">></span> xml_tree <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ResXMLTree<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token comment" spellcheck="true">/*dynamicRefTable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  status_t err <span class="token operator">=</span> xml_tree<span class="token operator">-</span><span class="token operator">></span><span class="token function">setTo</span><span class="token punctuation">(</span>asset<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asset<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  asset<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"java/io/FileNotFoundException"</span><span class="token punctuation">,</span> <span class="token string">"Corrupt XML binary file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>jlong<span class="token operator">></span><span class="token punctuation">(</span>xml_tree<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>AppAssets.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> ApkAssets<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">,</span> Asset<span class="token operator">::</span>AccessMode mode<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>  <span class="token function">CHECK</span><span class="token punctuation">(</span>zip_handle_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">::</span>ZipEntry entry<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// manifest 文件</span>  int32_t result <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">FindEntry</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断压缩方式,是否使用的是Deflate压缩算法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>method <span class="token operator">==</span> kCompressDeflated<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>FileMap<span class="token operator">></span> map <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>FileMap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>path_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">GetFileDescriptor</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>                     entry<span class="token punctuation">.</span>compressed_length<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*readOnly*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span>        Asset<span class="token operator">::</span><span class="token function">createFromCompressedMap</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>uncompressed_length<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to decompress '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"'."</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> asset<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Store压缩方法,即不压缩</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>FileMap<span class="token operator">></span> map <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>FileMap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>path_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">GetFileDescriptor</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>                     entry<span class="token punctuation">.</span>uncompressed_length<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*readOnly*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span> Asset<span class="token operator">::</span><span class="token function">createFromUncompressedMap</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> asset<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Android中的资源主要是Deflate和Stored两种压缩方式,其中Stored实际并不压缩数据,只是转换成字节数据存储而已.</p><p>Manifest.xml使用了Deflate压缩算法进行压缩,因此这里需要对应的解压出来.</p><p>其他的几个步骤,在零零碎碎的源码中找吧.</p><h2 id="普通APP安装"><a href="#普通APP安装" class="headerlink" title="普通APP安装"></a>普通APP安装</h2><p>先看一个简单的下载并安装apk的例子:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span>intent<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>     flags <span class="token operator">+=</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK     flags <span class="token operator">+=</span> Intent<span class="token punctuation">.</span>FLAG_GRANT_READ_URI_PERMISSION     type <span class="token operator">=</span> <span class="token string">"application/vnd.android.package-archive"</span>     <span class="token keyword">data</span> <span class="token operator">=</span> FileProvider<span class="token punctuation">.</span><span class="token function">getUriForFile</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"com.jiangkang.ktools"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">}</span>context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span></code></pre><p>这里使用<code>ACTION_VIEW</code>,最终会调用到PacakgeInstaller APP中.</p><p>Android 10的PacakgeInstaller源码在framworks/base/packages/PackageInstaller下,看一下它的Manifest.xml来确定下谁是入口:</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.InstallStart<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:style/Theme.Translucent.NoTitleBar<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/vnd.android.package-archive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>package<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.content.pm.action.CONFIRM_INSTALL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><p>可以看到PackageInstaller支持的action以及协议,即content协议和package协议.</p><p>进入了<code>InstallStart</code>之后,根据状态的不同可能会经过<code>InstallStaging</code>等页面后进入到<code>PacakgeInstallerActivity</code>,然后就是不同的安装进度了,<code>InstallInstalling</code>,<code>InstallFailed</code>,<code>InstallSuccess</code>:</p><p>来看一下关键的对象:</p><pre class=" language-java"><code class="language-java">PackageManager mPm <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>PackageInstaller mInstaller <span class="token operator">=</span> <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> PackageInstaller<span class="token punctuation">.</span>SessionInfo info <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>resolvedBaseCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后就是开始安装APP了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Start subactivity to actually install the application</span>        Intent newIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">,</span>                mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// apk file uri</span>        newIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 安装过程处理 Activity</span>        newIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallInstalling<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String installerPackageName <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">,</span> mOriginatingURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReferrerURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">,</span> mReferrerURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingUid <span class="token operator">!=</span> PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>UID_UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>installerPackageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">,</span>                    installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"downloaded app uri="</span><span class="token operator">+</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>newIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>来看下InstallInstalling中的处理逻辑:</p><pre class=" language-java"><code class="language-java">ApplicationInfo appInfo <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>mPackageURI <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 使用pacakge协议,即package:com.xxx,安装手机上已有的APP</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installExistingPackage</span><span class="token punctuation">(</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">launchSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 安装APK文件</span>  <span class="token comment" spellcheck="true">// 将安装信息封装到SessionParams中</span>PackageInstaller<span class="token punctuation">.</span>SessionParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstaller<span class="token punctuation">.</span>SessionParams</span><span class="token punctuation">(</span>                        PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>MODE_FULL_INSTALL<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallAsInstantApp</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setReferrerUri</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setOriginatingUri</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setOriginatingUid</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span>                        UID_UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallerPackageName</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                        Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallReason</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_REASON_USER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// apk文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解析APK文件,获取APP信息</span>PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setAppPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallLocation</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>installLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>PackageHelper<span class="token punctuation">.</span><span class="token function">calculateInstalledSize</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>abiOverride<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mInstallId <span class="token operator">=</span> InstallEventReceiver                            <span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventResultPersister<span class="token punctuation">.</span>GENERATE_NEW_ID<span class="token punctuation">,</span>                                    <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>mSessionId <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将信息保存到SessionParams中,并返回一个sessionId,后面会用到这个sessionid,在onResume的时候会启动一个后台任务去读取APK文件:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InstallingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span>            PackageInstaller<span class="token punctuation">.</span>Session<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isDone<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> PackageInstaller<span class="token punctuation">.</span>Session <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根据sessionID获取到之前存储的session</span>                session <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            session<span class="token punctuation">.</span><span class="token function">setStagingProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 读取APK文件</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> sizeBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> session                            <span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span><span class="token string">"PackageInstaller"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> numRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>numRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">fsync</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">float</span> fraction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> numRead <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                                session<span class="token punctuation">.</span><span class="token function">addProgress</span><span class="token punctuation">(</span>fraction<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> session<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Could not write package"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// apk文件读取完毕</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent broadcastIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BROADCAST_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_RECEIVER_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>EventResultPersister<span class="token punctuation">.</span>EXTRA_ID<span class="token punctuation">,</span> mInstallId<span class="token punctuation">)</span><span class="token punctuation">;</span>                PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>                        InstallInstalling<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                        mInstallId<span class="token punctuation">,</span>                        broadcastIntent<span class="token punctuation">,</span>                        PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//  此处关键</span>                session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">.</span><span class="token function">getIntentSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abandonSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要是读取APK文件到Session中,并更新安装进度.读取完毕之后发送一个广播.</p><p>此处的关键是就是<code>session.commit()</code>方法.</p><p>这里会调用PackageManagerService中.首先进入的是Copy阶段:</p><h3 id="复制APK"><a href="#复制APK" class="headerlink" title="复制APK"></a>复制APK</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">installStage</span><span class="token punctuation">(</span>ActiveInstallSession activeInstallSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// COPY 阶段</span>        <span class="token keyword">final</span> Message msg <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>INIT_COPY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> InstallParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallParams</span><span class="token punctuation">(</span>activeInstallSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> params<span class="token punctuation">;</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> INIT_COPY<span class="token operator">:</span> <span class="token punctuation">{</span>                    HandlerParams params <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerParams<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        params<span class="token punctuation">.</span><span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个copy阶段会进行一些判断,比如存储空间是否足够,如果不够会试图清理一下缓存,如果之前已经存在了APK,则直接覆盖,但是如果存在APK验证器,则必须在copy之前进行验证,只有验证通过之后才可以开始复制APK.</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mVerificationCompleted <span class="token operator">&amp;&amp;</span> mEnableRollbackCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_DRY_RUN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String packageName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        PackageLite packageInfo <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        packageName <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Can't parse package at "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        observer<span class="token punctuation">.</span><span class="token function">onPackageInstalled</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> mRet<span class="token punctuation">,</span> <span class="token string">"Dry run"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Observer no longer exists."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mRet <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 复制APK</span>                    mRet <span class="token operator">=</span> mArgs<span class="token punctuation">.</span><span class="token function">copyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 复制完成之后进入下一阶段</span>                <span class="token function">processPendingInstall</span><span class="token punctuation">(</span>mArgs<span class="token punctuation">,</span> mRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">copyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"copyApk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span>staged<span class="token punctuation">)</span> <span class="token punctuation">{</span>                codeFile <span class="token operator">=</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">;</span>                resourceFile <span class="token operator">=</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">;</span>                <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建要复制的文件路径</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> isEphemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> File tempDir <span class="token operator">=</span>                        mInstallerService<span class="token punctuation">.</span><span class="token function">allocateStageDirLegacy</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> isEphemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>                codeFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>                resourceFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to create copy file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 实际复制操作</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManagerServiceUtils<span class="token punctuation">.</span><span class="token function">copyPackage</span><span class="token punctuation">(</span>                    origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to copy package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// so文件</span>            <span class="token keyword">final</span> File libraryRoot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>codeFile<span class="token punctuation">,</span> LIB_DIR_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            NativeLibraryHelper<span class="token punctuation">.</span>Handle handle <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handle <span class="token operator">=</span> NativeLibraryHelper<span class="token punctuation">.</span>Handle<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>codeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> NativeLibraryHelper<span class="token punctuation">.</span><span class="token function">copyNativeBinariesWithOverride</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> libraryRoot<span class="token punctuation">,</span>                        abiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Copying native libraries failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>APK会被复制到/data/app下:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">getDataAppDirectory</span><span class="token punctuation">(</span>String volumeUuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getDataDirectory</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实际的copy过程如下,使用了FileDescriptor:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">copyPackage</span><span class="token punctuation">(</span>String packagePath<span class="token punctuation">,</span> File targetDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packagePath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> File packageFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析APK文件</span>            <span class="token comment" spellcheck="true">// 1. 解析Manifest文件,得到各种信息如版本号等</span>            <span class="token comment" spellcheck="true">// 2. 收集签名信息</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 复制到指定位置,并重命名为base.apk,一般为/data/app/packageName-xxx/base.apk</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> targetDir<span class="token punctuation">,</span> <span class="token string">"base.apk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">copyFile</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> targetDir<span class="token punctuation">,</span>                            <span class="token string">"split_"</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".apk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> <span class="token operator">|</span> IOException <span class="token operator">|</span> ErrnoException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to copy package at "</span> <span class="token operator">+</span> packagePath <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>String sourcePath<span class="token punctuation">,</span> File targetDir<span class="token punctuation">,</span> String targetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ErrnoException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>FileUtils<span class="token punctuation">.</span><span class="token function">isValidExtFilename</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid filename: "</span> <span class="token operator">+</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Copying "</span> <span class="token operator">+</span> sourcePath <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> File targetFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetDir<span class="token punctuation">,</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> FileDescriptor targetFd <span class="token operator">=</span> Os<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Os<span class="token punctuation">.</span><span class="token function">chmod</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream source <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetFd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>复制之前,会使用<code>PacakgeParser</code>解析APK中的mannifest文件,得到一些应用信息,并且还会获取签名信息.</p><p>然后就是复制apk文件,并且复制APK中的so文件到指定的路径.</p><p>复制完成之后,进入下一阶段<code>processPendingInstall(mArgs, mRet);</code></p><h2 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPendingInstall</span><span class="token punctuation">(</span><span class="token keyword">final</span> InstallArgs args<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> currentStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>mMultiPackageInstallParams <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            args<span class="token punctuation">.</span>mMultiPackageInstallParams<span class="token punctuation">.</span><span class="token function">tryProcessInstallRequest</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            PackageInstalledInfo res <span class="token operator">=</span> <span class="token function">createPackageInstalledInfo</span><span class="token punctuation">(</span>currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">processInstallRequestsAsync</span><span class="token punctuation">(</span>                    res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">,</span>                    Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstallRequest</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>对于包含split APP的安装过程暂时不分析,这里指分析单个完整APK的安装流程.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processInstallRequestsAsync</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">,</span>            List<span class="token operator">&lt;</span>InstallRequest<span class="token operator">></span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">doPreInstall</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">installPackagesTracedLI</span><span class="token punctuation">(</span>installRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">doPostInstall</span><span class="token punctuation">(</span>                            request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">restoreAndPostInstall</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">PostInstallData</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实际安装步骤在<code>installPackagesLI(requests)</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackagesLI</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>InstallRequest<span class="token operator">></span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ScanResult<span class="token operator">></span> preparedScans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> InstallArgs<span class="token operator">></span> installArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PackageInstalledInfo<span class="token operator">></span> installResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PrepareResult<span class="token operator">></span> prepareResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> VersionInfo<span class="token operator">></span> versionInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PackageSetting<span class="token operator">></span> lastStaticSharedLibSettings <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span> createdAppId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installPackagesLI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO(b/109941548): remove this once we've pulled everything from it and into</span>                <span class="token comment" spellcheck="true">//                    scan, reconcile or commit.</span>                <span class="token keyword">final</span> PrepareResult prepareResult<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"preparePackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    prepareResult <span class="token operator">=</span> <span class="token function">preparePackageLI</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrepareFailure</span> prepareFailure<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>prepareFailure<span class="token punctuation">.</span>error<span class="token punctuation">,</span>                            prepareFailure<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>origPackage <span class="token operator">=</span> prepareFailure<span class="token punctuation">.</span>conflictingPackage<span class="token punctuation">;</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>origPermission <span class="token operator">=</span> prepareFailure<span class="token punctuation">.</span>conflictingPermission<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setReturnCode</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>installerPackageName <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>installerPackageName<span class="token punctuation">;</span>                <span class="token keyword">final</span> String packageName <span class="token operator">=</span> prepareResult<span class="token punctuation">.</span>packageToScan<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                prepareResults<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> prepareResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                installResults<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                installArgs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ScanResult<span class="token operator">></span> scanResults <span class="token operator">=</span> <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>                            prepareResult<span class="token punctuation">.</span>packageToScan<span class="token punctuation">,</span> prepareResult<span class="token punctuation">.</span>parseFlags<span class="token punctuation">,</span>                            prepareResult<span class="token punctuation">.</span>scanFlags<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>ScanResult result <span class="token operator">:</span> scanResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> preparedScans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>                                    PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_DUPLICATE_PACKAGE<span class="token punctuation">,</span>                                    <span class="token string">"Duplicate package "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName                                            <span class="token operator">+</span> <span class="token string">" in multi-package install request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        createdAppId<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token function">optimisticallyRegisterAppId</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        versionInfos<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                <span class="token function">getSettingsVersionForPackage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>staticSharedLibraryInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> PackageSetting sharedLibLatestVersionSetting <span class="token operator">=</span>                                    <span class="token function">getSharedLibLatestVersionSetting</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedLibLatestVersionSetting <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                lastStaticSharedLibSettings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                        sharedLibLatestVersionSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Scanning Failed."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ReconcileRequest reconcileRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReconcileRequest</span><span class="token punctuation">(</span>preparedScans<span class="token punctuation">,</span> installArgs<span class="token punctuation">,</span>                    installResults<span class="token punctuation">,</span>                    prepareResults<span class="token punctuation">,</span>                    mSharedLibraries<span class="token punctuation">,</span>                    Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span><span class="token punctuation">,</span> versionInfos<span class="token punctuation">,</span>                    lastStaticSharedLibSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>            CommitRequest commitRequest <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ReconciledPackage<span class="token operator">></span> reconciledPackages<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"reconcilePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reconciledPackages <span class="token operator">=</span> <span class="token function">reconcilePackagesLocked</span><span class="token punctuation">(</span>                            reconcileRequest<span class="token punctuation">,</span> mSettings<span class="token punctuation">.</span>mKeySetManagerService<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReconcileFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Reconciliation failed..."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"commitPackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    commitRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitRequest</span><span class="token punctuation">(</span>reconciledPackages<span class="token punctuation">,</span>                            sUserManager<span class="token punctuation">.</span><span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">commitPackagesLocked</span><span class="token punctuation">(</span>commitRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                    success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>PrepareResult result <span class="token operator">:</span> prepareResults<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>freezer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            result<span class="token punctuation">.</span>freezer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">executePostCommitSteps</span><span class="token punctuation">(</span>commitRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>ScanResult result <span class="token operator">:</span> preparedScans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>createdAppId<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>request<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">cleanUpAppIdCreation</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// TODO(patb): create a more descriptive reason than unknown in future release</span>                <span class="token comment" spellcheck="true">// mark all non-failure installs as UNKNOWN so we do not treat them as success</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_UNKNOWN<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PrepareResult result <span class="token operator">:</span> prepareResults<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>freezer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span>freezer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里分为4个步骤:</p><ol><li><p>prepare</p><p>使用PackageParser解析APK,获取各种信息,检查是否有静态共享库,有的话放在内部存储中.决定安装方式(更新,还是新安装)之类的逻辑.</p></li><li><p>scan</p><p>扫描APK,更新共享库和Settings信息</p></li><li><p>reconcile</p><p>新旧包以及签名相关的逻辑</p></li><li><p>commit</p><p>更新设置</p></li></ol><p>其实都是对APK文件进行一系列的检查验证,以确保最后可以安装成功.然后就是真实的安装了:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executePostCommitSteps</span><span class="token punctuation">(</span>CommitRequest commitRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ReconciledPackage reconciledPkg <span class="token operator">:</span> commitRequest<span class="token punctuation">.</span>reconciledPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> instantApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>scanResult<span class="token punctuation">.</span>request<span class="token punctuation">.</span>scanFlags                            <span class="token operator">&amp;</span> PackageManagerService<span class="token punctuation">.</span>SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg <span class="token operator">=</span> reconciledPkg<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">;</span>            <span class="token keyword">final</span> String packageName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>            <span class="token function">prepareAppDataAfterInstallLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>prepareResult<span class="token punctuation">.</span>clearCodeCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span> FLAG_STORAGE_DE <span class="token operator">|</span> FLAG_STORAGE_CE                        <span class="token operator">|</span> FLAG_STORAGE_EXTERNAL <span class="token operator">|</span> Installer<span class="token punctuation">.</span>FLAG_CLEAR_CODE_CACHE_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>prepareResult<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mDexManager<span class="token punctuation">.</span><span class="token function">notifyPackageUpdated</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                        pkg<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> pkg<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Prepare the application profiles for the new code paths.</span>            <span class="token comment" spellcheck="true">// This needs to be done before invoking dexopt so that any install-time profile</span>            <span class="token comment" spellcheck="true">// can be used for optimizations.</span>            mArtManagerService<span class="token punctuation">.</span><span class="token function">prepareAppProfiles</span><span class="token punctuation">(</span>                    pkg<span class="token punctuation">,</span>                    <span class="token function">resolveUserIds</span><span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>installArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">/* updateReferenceProfileContent= */</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check whether we need to dexopt the app.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// NOTE: it is IMPORTANT to call dexopt:</span>            <span class="token comment" spellcheck="true">//   - after doRename which will sync the package data from PackageParser.Package and</span>            <span class="token comment" spellcheck="true">//     its corresponding ApplicationInfo.</span>            <span class="token comment" spellcheck="true">//   - after installNewPackageLIF or replacePackageLIF which will update result with the</span>            <span class="token comment" spellcheck="true">//     uid of the application (pkg.applicationInfo.uid).</span>            <span class="token comment" spellcheck="true">//     This update happens in place!</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// We only need to dexopt if the package meets ALL of the following conditions:</span>            <span class="token comment" spellcheck="true">//   1) it is not an instant app or if it is then dexopt is enabled via gservices.</span>            <span class="token comment" spellcheck="true">//   2) it is not debuggable.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// Note that we do not dexopt instant apps by default. dexopt can take some time to</span>            <span class="token comment" spellcheck="true">// complete, so we skip this step during installation. Instead, we'll take extra time</span>            <span class="token comment" spellcheck="true">// the first time the instant app starts. It's preferred to do it this way to provide</span>            <span class="token comment" spellcheck="true">// continuous progress to the useur instead of mysteriously blocking somewhere in the</span>            <span class="token comment" spellcheck="true">// middle of running an instant app. The default behaviour can be overridden</span>            <span class="token comment" spellcheck="true">// via gservices.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> performDexopt <span class="token operator">=</span>                    <span class="token punctuation">(</span><span class="token operator">!</span>instantApp <span class="token operator">||</span> Global<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Global<span class="token punctuation">.</span>INSTANT_APP_DEXOPT_ENABLED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_DEBUGGABLE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>performDexopt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Compile the layout resources.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>SystemProperties<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>PRECOMPILE_LAYOUTS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"compileLayouts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mViewCompiler<span class="token punctuation">.</span><span class="token function">compileLayouts</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"dexopt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Do not run PackageDexOptimizer through the local performDexOpt</span>                <span class="token comment" spellcheck="true">// method because `pkg` may not be in `mPackages` yet.</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token comment" spellcheck="true">// Also, don't fail application installs if the dexopt step fails.</span>                DexoptOptions dexoptOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DexoptOptions</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span>                        REASON_INSTALL<span class="token punctuation">,</span>                        DexoptOptions<span class="token punctuation">.</span>DEXOPT_BOOT_COMPLETE                                <span class="token operator">|</span> DexoptOptions<span class="token punctuation">.</span>DEXOPT_INSTALL_WITH_DEX_METADATA_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>                mPackageDexOptimizer<span class="token punctuation">.</span><span class="token function">performDexOpt</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* instructionSets */</span><span class="token punctuation">,</span>                        <span class="token function">getOrCreateCompilerPackageStats</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span>                        mDexManager<span class="token punctuation">.</span><span class="token function">getPackageUseInfoOrDefault</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">,</span>                        dexoptOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Notify BackgroundDexOptService that the package has been changed.</span>            <span class="token comment" spellcheck="true">// If this is an update of a package which used to fail to compile,</span>            <span class="token comment" spellcheck="true">// BackgroundDexOptService will remove it from its blacklist.</span>            <span class="token comment" spellcheck="true">// TODO: Layering violation</span>            BackgroundDexOptService<span class="token punctuation">.</span><span class="token function">notifyPackageChanged</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要分为两部:</p><ol><li>调用Installer创建APP数据</li><li>如果so库是32为,创建symlink,64位的so库不需要</li></ol><pre class=" language-java"><code class="language-java">ceDataInode <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">createAppData</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>                    appId<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> app<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>primaryCpuAbi <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>VMRuntime<span class="token punctuation">.</span><span class="token function">is64BitAbi</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> String nativeLibPath <span class="token operator">=</span> app<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mInstaller<span class="token punctuation">.</span><span class="token function">linkNativeLibraryDirectory</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span>                            nativeLibPath<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstallerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to link native for "</span> <span class="token operator">+</span> packageName <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                    </code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">createAppData</span><span class="token punctuation">(</span>String uuid<span class="token punctuation">,</span> String packageName<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> appId<span class="token punctuation">,</span>            String seInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstallerException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkBeforeRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mInstalld<span class="token punctuation">.</span><span class="token function">createAppData</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> appId<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>                    targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> InstallerException<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>Installer</code>中的操作基本上都是委托给守护进程<code>installd</code>去完成的.</p><p>Installer中通过Binder机制获取到intalld服务,真实的执行逻辑在native层:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        IBinder binder <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"installd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                binder<span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeathRecipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binderDied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installd died; reconnecting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                binder <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstalld <span class="token operator">=</span> IInstalld<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">invalidateMounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstallerException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installd not found; trying again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BackgroundThread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> DateUtils<span class="token punctuation">.</span>SECOND_IN_MILLIS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>应用发出Intent,要求应用内安装APK;</li><li>PackageInstaller APP 中的<code>InstallStart</code>Activity接收到Intent,解析数据;</li><li>转到PackageInstallerActivity展示界面,用户确认之后开始进入安装过程;</li><li>请求PackageManagerService去完成安装,这里会复制APK到指定目录中,并进行签名验证</li><li>通过binder机制请求<code>installd</code>守护进程去完成安装过程.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> APK安装流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池源码分析</title>
      <link href="/2020/07/29/android/java-xian-cheng-chi-yuan-ma-fen-xi/"/>
      <url>/2020/07/29/android/java-xian-cheng-chi-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="几种预定义的线程池"><a href="#几种预定义的线程池" class="headerlink" title="几种预定义的线程池"></a>几种预定义的线程池</h3><ul><li><p><code>newFixedThreadPool</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><code>newSingleThreadExecutor</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><code>newCachedThreadPool</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里使用的<code>SynchronousQueue</code>并不存储任务,因此这个线程池如果来了任务直接交给线程去执行,如果没有空闲的线程就创建,否则复用.</p></li></ul><h3 id="submit-vs-execute"><a href="#submit-vs-execute" class="headerlink" title="submit vs execute"></a>submit vs execute</h3><p>有两种提交任务的方式:</p><ul><li><p>execute(Runnable r)</p><p>不返回结果</p></li><li><p>submit(Runnbale r)</p><p>有一个Future的返回结果.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,使用submit()提交Runnable,会使用一个<code>RUnnableFuture</code>包装Runnable,以返回任务结果.</p></li></ul><h2 id="ThreadPoolExecutor中线程池的几种状态"><a href="#ThreadPoolExecutor中线程池的几种状态" class="headerlink" title="ThreadPoolExecutor中线程池的几种状态"></a>ThreadPoolExecutor中线程池的几种状态</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span></code></pre><p>翻译成二进制即:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">CAPACITY</span><span class="token punctuation">:</span>  <span class="token attr-value">00011111111111111111111111111111</span><span class="token attr-name">RUNNING</span><span class="token punctuation">:</span>   <span class="token attr-value">11100000000000000000000000000000</span><span class="token attr-name">SHUTDOWN</span><span class="token punctuation">:</span>  <span class="token attr-value">00000000000000000000000000000000</span><span class="token attr-name">STOP</span><span class="token punctuation">:</span>      <span class="token attr-value">00100000000000000000000000000000</span><span class="token attr-name">TIDYING</span><span class="token punctuation">:</span>   <span class="token attr-value">01000000000000000000000000000000</span><span class="token attr-name">TERMINATED</span><span class="token punctuation">:</span><span class="token attr-value">01100000000000000000000000000000</span></code></pre><p>线程池的控制状态存放在一个AtomicInteger中,一共32位:</p><ul><li><p>高3位表示5种运行状态,即runState</p><p>为什么用3位表示?其实这里就是个简单的状态机而已,2位最多表示4种状态,3位最多表示8种状态,因此这里选择3位来表示.</p></li><li><p>低29位表示有效线程数,即workerCount</p></li></ul><h3 id="线程池的5种状态"><a href="#线程池的5种状态" class="headerlink" title="线程池的5种状态"></a>线程池的5种状态</h3><ul><li><p>Running</p><p>可以接受新任务和处理队列中的任务</p></li><li><p>Shutdown</p><p>不接受新任务,但是可以处理队列中的任务</p></li><li><p>Stop</p><p>不接受新任务,也不处理队列中的任务,并且中断正在处理的任务</p></li><li><p>Tidying</p><p>所有的任务已经终止了.workerCount = 0,过渡到这个状态的线程将会调用<code>terminated()</code>方法</p></li><li><p>Terminated</p><p><code>terminated()</code>已经执行完毕</p></li></ul><p><img src="https://oss.jiangkang.tech/jk/thread_pool_state.png" alt="线程池状态转换"></p><p>再来看一下这些位操作:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 打包和拆包,ctlOf是打包,runStateOf是获取runState,workerCountOf是获取workerCount</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">runStateLessThan</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">&lt;</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">>=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5种状态,只有Running是小于0的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">&lt;</span> SHUTDOWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>        <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * This class will never be serialized, but we provide a         * serialVersionUID to suppress a javac warning.         */</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6138294804551838833L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Thread this worker is running in.  Null if factory fails. */</span>        <span class="token keyword">final</span> Thread thread<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Initial task to run.  Possibly null. */</span>        Runnable firstTask<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Per-thread task counter */</span>        <span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Creates with given first task and thread from ThreadFactory.         * @param firstTask the first task (null if none)         */</span>        <span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** Delegates main run loop to outer runWorker  */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Lock methods</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// The value 0 represents the unlocked state.</span>        <span class="token comment" spellcheck="true">// The value 1 represents the locked state.</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Worker本身也是Runnable,run的时候实际上运行的也是任务,而且Worker持有了Thread和Runnable,并且为线程增加了中断控制的能力.</p><p>从代码上可以看出,Worker是复用的,不同的任务(Runnable)可能会添加到同一个Worker中,换句话说一个Worker对应一个线程,一个线程可能会运行多个任务.</p><h2 id="execute-Runnable-r-执行过程"><a href="#execute-Runnable-r-执行过程" class="headerlink" title="execute(Runnable r)执行过程"></a>execute(Runnable r)执行过程</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程状态,多线程环境的复杂性导致丑陋的代码</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程数小于corePoolSize </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 线程池处于runnable状态,并且任务入队成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再检查下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retry<span class="token operator">:</span>        <span class="token comment" spellcheck="true">// 一些没法添加任务的场景</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>            <span class="token comment" spellcheck="true">// 不是Running状态 &amp;&amp; (不处于Shutdown状态 or 队列为空)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                   firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 线程数达到极限,或者核心模式下,线程数大于等于corePoolSize,或者非核心模式下,线程数大于等于maxiumPoolSize</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                    wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span> retry<span class="token punctuation">;</span>                c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                    <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>                mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                    <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                    <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                        <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加worker</span>                        <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                            largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                        workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// worker添加之后,启动线程</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>                <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>基本上都是一些状态判断,然后试图添加worker.</p><p>状态何时会启动线程,执行任务.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看看注释说明得了,把机制弄清楚.</p><p>代码写的真的是一言难尽.if else太多,各种稀奇古怪的判断看起来真的没什么意思.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor</title>
      <link href="/2020/07/29/android/threadpoolexecutor/"/>
      <url>/2020/07/29/android/threadpoolexecutor/</url>
      
        <content type="html"><![CDATA[<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span></code></pre><h3 id="corePoolSize-maxiumPoolSize"><a href="#corePoolSize-maxiumPoolSize" class="headerlink" title="corePoolSize/maxiumPoolSize"></a>corePoolSize/maxiumPoolSize</h3><ul><li><p>运行的线程数 &lt; corePoolSize</p><p>创建新线程,不管其他线程是否处于Idle状态</p></li><li><p>corePoolSize &lt; 运行的线程数 &lt; maxiumPoolSize</p><p>只有当队列满的时候,才会创建新线程</p></li><li><p>corePoolSize = maxiumPoolSize</p><p>固定大小的线程池</p></li><li><p>maxiumPoolSize = Integer.MAX_VALUE</p><p>容纳任意数量的并发任务</p></li></ul><h3 id="keepAliveTime-unit"><a href="#keepAliveTime-unit" class="headerlink" title="keepAliveTime/unit"></a>keepAliveTime/unit</h3><p>如果线程池当前线程数超过corePoolSize,多余的线程如果在IDLE状态下超过keepAliveTime就会被终止.</p><p>使用Long.MAX_VALUE TimeUnit＃NANOSECONDS作为keepAliveTime,可以阻止空闲线程在关闭前被终止.</p><p>默认情况下,keepAliveTime策略应用在线程数超过corePoolSize的情况.但是使用<a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)" target="_blank" rel="noopener">allowCoreThreadTimeOut(boolean)</a>方法,只要keepAliveTime大于0,也可以应用到核心线程.</p><h3 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h3><p>任何<code>BlockingQueue</code>的实现都可以用来传递和持有提交的任务.</p><ul><li><p>运行线程数 &lt; corePoolSize时</p><p>Executor倾向于创建新线程而不是将任务入队</p></li><li><p>运行线程数 &gt;= corePoolSize时</p><p>Executor倾向于将任务入队,而不是创建新线程</p></li><li><p>任务请求不能入队(比如队列已满)</p><p>如果运行线程数不超过maxiumPoolSize,则创建新线程,否则,被拒绝</p></li></ul><p>常见的三种队列对应三种入队策略:</p><ul><li><p>直接转移,队列不缓存任务</p><p>这里可以使用<code>SynchronousQueue</code>,这个队列是没有内部缓存的,也就是说来一个任务马上就会转移出去,可能是复用线程,创建线程,或者直接被拒绝.通常为了防止任务频繁被拒绝,可以将maxiumPoolSize设置为无限大,即Integer.MAX_VALUE.</p><p><code>Executors#newCachedThreadPool()</code>就属于这种策略.</p></li><li><p>无界队列</p><p>比如使用<code>LinkedBlockingQueue</code>,当corePoolSize个线程都在忙时,新任务只能在队列里等待.因此,线程数不会超过corePoolSize,<strong>设置的maxiumPoolSize没有任何作用.</strong>适合于那种任务之间没有任何依赖的场景.不过当任务处理时间比较久时,会导致队列增长过快.</p></li><li><p>有界队列</p><p>比如使用<code>ArrayBlockingQueue</code>,当设置了有限的maxiumPoolSize时可以防止系统资源被耗尽,但是相对更难控制.往往都需要在队列大小与最大线程数之间进行折衷.</p><p>如果使用了大的队列,少的线程数可以节约CPU,系统资源,和线程上下文切换的开销,但是会导致任务吞吐量变低,如果任务频繁的被阻塞,系统有时候也会多调度一些进程(会超过你设置的限制);</p><p>如果使用了小队列,多线程数,会使CPU更加忙碌,但是可能导致过载,反而降低吞吐量.</p></li></ul><p>我们可以使用<code>getQueue()</code>方法获取当前队列,不过<strong>只建议在debug和监控的时候使用这个方法.</strong></p><p>如果想取消排队任务,可以使用<code>remove(Runnable r)</code>或者<code>purge()</code>方法.</p><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><p>  即<code>RejectedExecutionHandler</code>,当Executor关闭时,或者使用有界队列,并且线程数达到了maxiumPoolSize,新任务会被拒绝.</p><p>目前有4种预定义的拒绝策略:</p><ul><li><p>直接抛异常</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AbortPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token function">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                                <span class="token string">" rejected from "</span> <span class="token operator">+</span>                                                e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre></li><li><p>如果线程池没有关闭,直接调用Runnable的run方法继续执行(在调用者线程)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CallerRunsPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Executes task r in the caller's thread, unless the executor         * has been shut down, in which case the task is discarded.         *         * @param r the runnable task requested to be executed         * @param e the executor attempting to execute this task         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>直接丢弃任务,不执行</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>丢掉队列中最久的任务,添加新任务</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardOldestPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在实际应用过程中,我们一般都会自定义拒绝策略,做一些特殊处理.</p></li></ul><h3 id="Hook方法"><a href="#Hook方法" class="headerlink" title="Hook方法"></a>Hook方法</h3><p><code>ThreadPoolExecutor</code>中有两个protected的方法:</p><ul><li>beforeExecute(Thread t, Runnable r)</li><li>afterExecute(Thread t, Runnable r)</li></ul><p>这两个方法分别在任务执行前后被调用.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git不常见操作</title>
      <link href="/2020/07/27/ji-chu/git-bu-chang-jian-cao-zuo/"/>
      <url>/2020/07/27/ji-chu/git-bu-chang-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="删除所有commit记录"><a href="#删除所有commit记录" class="headerlink" title="删除所有commit记录"></a>删除所有commit记录</h2><pre class=" language-shell"><code class="language-shell">git checkout --orphan local_branchgit add -Agit commit -am "reset commits"git branch -D master git branch -m mastergit push -f origin master</code></pre><h2 id="Git-refusing-to-merge-unrelated-histories"><a href="#Git-refusing-to-merge-unrelated-histories" class="headerlink" title="Git refusing to merge unrelated histories"></a>Git refusing to merge unrelated histories</h2><p>git pull的时候提示这个错误,可以通过下面的方式解决:</p><pre class=" language-shell"><code class="language-shell">git pull origin master --allow-unrelated-histories</code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2020/07/26/android/java-fan-she/"/>
      <url>/2020/07/26/android/java-fan-she/</url>
      
        <content type="html"><![CDATA[<p>关于反射原理性的知识可以看看类加载流程，对象实例化流程相关的文章，这里说一下反射的常用使用方法。</p><h2 id="获取Class"><a href="#获取Class" class="headerlink" title="获取Class"></a>获取Class</h2><ul><li><p>Class.forName</p></li><li><p>ClassA.class</p></li><li><p>classA.getClass</p></li></ul><h3 id="Class常见方法"><a href="#Class常见方法" class="headerlink" title="Class常见方法"></a>Class常见方法</h3><ul><li><p>isPrimitive()</p><p>是否为基础类型,如int,long,byte,boolean,char,short,double等</p></li><li><p>getFiled()</p><p>返回所有<strong>public</strong>成员变量的field对象,包括从父类继承的field对象</p></li><li><p>getDeclaredField()</p><p>返回当前<strong>类本身所有的field</strong>,包括private的field,但是不包括从父类继承的</p></li><li><p>getMethods()/getMethod()/getDeclaredField()</p><p>与上面的Field相同</p><p>getMethods()返回类的所有public方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Method <span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span></code></pre><p>后面传的是参数的类型</p></li><li><p>getConstructors()/ getConstructor(Class&lt;?&gt;… parameterTypes)/getDeclaredConstructors()/getDeclaredConstructor()</p><p>获取构造方法</p></li></ul><h2 id="Field常用方法"><a href="#Field常用方法" class="headerlink" title="Field常用方法"></a>Field常用方法</h2><ul><li><p><strong>get(Object obj)</strong></p><p>获取Filed的值,如果不是静态字段,需要传入类的对象,如果是静态字段,传入null或者任何对象都可以.</p></li><li><p><strong>set(Object obj, Object value)</strong></p><p>将Object的这个Filed的值设置成value</p></li><li><p>setAccessible(true)</p><p>修改之前设置Field可以被访问</p></li><li><p>getType()</p><p>返回Filed 的类型class,如果属性是泛型,这个方法只能获取到接口类型,即HashMap&lt;K,V&gt;,只能获取到HashMap</p></li><li><p>getGenericType()</p><p>返回属性声明的Type对象,如果是泛型,可以获取到具体的参数类型,不如HashMap&lt;K,V&gt;</p></li><li><p>getName()</p><p>获取Field声明的时候的名字</p></li><li><p>getAnnotations()/getDeclearedAnnotation()/getAnnotation()</p><p>获取这个Field上的注解</p></li><li><p>getModifiers()</p><p>获取Filed上的修饰符,返回的是一个int,需要使用<code>Modifier</code>类才能知道具体的修饰符是什么(public,private,static,final等)</p></li><li><p>isEnumConstant()</p><p>判断这个Field是否为枚举类型</p></li><li><p>isSynthetic()</p><p>判断这个Filed是否为复合类型,即是否为编译期自动生成的Field</p></li></ul><h2 id="Method常用方法"><a href="#Method常用方法" class="headerlink" title="Method常用方法"></a>Method常用方法</h2><ul><li><p>invoke(Object obj, Object… args)</p><p>执行该Method,obj是对象(如果是静态方法可以直接传null),args是入参,这个方法返回值总是对象,如果是基本类型,则返回包装类型,比如int返回Integer.</p></li></ul><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><ul><li><p>newInstance(Object … initargs)</p><p>通过构造方法创建对象,传入的参数是构造方法的参数.</p><p><code>Class.newInstance()</code>也可以用来创建对象,它获取的是类的默认构造方法(无参),并存在缓存机制保存实例对象.</p></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>反射包中也有一个Array.</p><ul><li><p>创建数组</p><p>newInstance()</p></li><li><p>setXX</p></li><li><p>getXX</p></li><li><p>getLength()</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hook点击事件</title>
      <link href="/2020/07/25/android/hook-dian-ji-shi-jian/"/>
      <url>/2020/07/25/android/hook-dian-ji-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>Hook的本质就是就是利用Java反射机制,将源码中一些类的对象替换自己实现的对象,以实现一些特殊的操作.</p><p>基本上所有Hook的入门都会从Hook一个View的点击事件开始.</p><p>Hook之前,一般都得先看看源码,以找到如何反射,如何替换比较合适.</p><h2 id="view-setOnClickListener"><a href="#view-setOnClickListener" class="headerlink" title="view.setOnClickListener()"></a>view.setOnClickListener()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> OnClickListener l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isClickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mOnClickListener <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListenerInfo <span class="token function">getListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mListenerInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mListenerInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mListenerInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mListenerInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>ListenerInfo</code>是<code>View</code>的一个内部类.</p><p>如果我们想在点击View的时候进行一些特殊的操作,其实只要将mOnClickListener替换成我们自己的OnClickListener就行了,</p><h2 id="拿到-getListenerInfo-方法"><a href="#拿到-getListenerInfo-方法" class="headerlink" title="拿到 getListenerInfo()方法"></a>拿到 <code>getListenerInfo()</code>方法</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> getListenerInfoMethod <span class="token operator">=</span> View<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getListenerInfo"</span><span class="token punctuation">)</span>getListenerInfoMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="执行getListenerInfo-方法-获取View对应的ListenerInfo对象"><a href="#执行getListenerInfo-方法-获取View对应的ListenerInfo对象" class="headerlink" title="执行getListenerInfo()方法,获取View对应的ListenerInfo对象"></a>执行<code>getListenerInfo()</code>方法,获取<code>View</code>对应的<code>ListenerInfo</code>对象</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> listenerInfo <span class="token operator">=</span> getListenerInfoMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></code></pre><h2 id="拿到ListenerInfo中的mOnClickListener-Field"><a href="#拿到ListenerInfo中的mOnClickListener-Field" class="headerlink" title="拿到ListenerInfo中的mOnClickListener Field"></a>拿到<code>ListenerInfo</code>中的<code>mOnClickListener</code> Field</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> listenerInfoClz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.view.View\<span class="token interpolation variable">$ListenerInfo</span>"</span><span class="token punctuation">)</span><span class="token keyword">val</span> mOnClickListener <span class="token operator">=</span> listenerInfoClz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mOnClickListener"</span><span class="token punctuation">)</span>mOnClickListener<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="拿到业务传入的OnClickListener对象"><a href="#拿到业务传入的OnClickListener对象" class="headerlink" title="拿到业务传入的OnClickListener对象"></a>拿到业务传入的OnClickListener对象</h2><p>由于我们一般不会去显式的修改业务逻辑,所以需要保存一个原始的OnClickListener对象,以保证业务的正常执行.</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> originOnClickListener <span class="token operator">=</span> mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token keyword">as</span> View<span class="token punctuation">.</span>OnClickListener</code></pre><h2 id="设置一个新的OnClickListener对象-并持有之前的原始OnClickListener对象"><a href="#设置一个新的OnClickListener对象-并持有之前的原始OnClickListener对象" class="headerlink" title="设置一个新的OnClickListener对象,并持有之前的原始OnClickListener对象"></a>设置一个新的OnClickListener对象,并持有之前的原始OnClickListener对象</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 新的listener</span><span class="token keyword">val</span> hookedOnClickListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener <span class="token operator">=</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span>originOnClickListener<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 赋值新的listener</span>mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token operator">=</span> hookedOnClickListener</code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> originListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> View<span class="token punctuation">.</span><span class="token function">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//点击之前</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onClick: before"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 执行原始的点击逻辑</span>        originListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//点击之后</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onClick: after"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"hook"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里基本就OK了,但是观察上面代码,其实需要传入一个View对象,并且需要获取View的原始点击事件,因此hook操作要放到设置点击事件之后,实用性并不是很高.</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> HackActivity <span class="token operator">:</span> <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_hack<span class="token punctuation">)</span>        packageManager<span class="token punctuation">.</span><span class="token function">getInstalledPackages</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        btn_hook_OnClick<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            ToastUtils<span class="token punctuation">.</span><span class="token function">showShortToast</span><span class="token punctuation">(</span><span class="token string">"点击了Button"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">hookOnClickListener</span><span class="token punctuation">(</span>btn_hook_OnClick<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">hookOnClickListener</span><span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//getListenerInfo()</span>            <span class="token keyword">val</span> getListenerInfoMethod <span class="token operator">=</span> View<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getListenerInfo"</span><span class="token punctuation">)</span>            getListenerInfoMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">// 调用getListenerInfo()方法，得到ListenerInfo对象</span>            <span class="token keyword">val</span> listenerInfo <span class="token operator">=</span> getListenerInfoMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//得到View的mOnClickListener Field</span>            <span class="token keyword">val</span> listenerInfoClz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.view.View\<span class="token interpolation variable">$ListenerInfo</span>"</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> mOnClickListener <span class="token operator">=</span> listenerInfoClz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mOnClickListener"</span><span class="token punctuation">)</span>            mOnClickListener<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">// 获取到原来的listener值</span>            <span class="token keyword">val</span> originOnClickListener <span class="token operator">=</span> mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token keyword">as</span> View<span class="token punctuation">.</span>OnClickListener            <span class="token comment" spellcheck="true">// 新的listener</span>            <span class="token keyword">val</span> hookedOnClickListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener <span class="token operator">=</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span>originOnClickListener<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 赋值新的listener</span>            mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token operator">=</span> hookedOnClickListener        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/jiangkang/KTools" target="_blank" rel="noopener">https://github.com/jiangkang/KTools</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WLAN基础知识</title>
      <link href="/2020/07/25/ji-chu/wlan-ji-chu-zhi-shi/"/>
      <url>/2020/07/25/ji-chu/wlan-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/WLAN.png" alt="WLAN"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WLAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS上使用Wireshark抓包802.11</title>
      <link href="/2020/07/24/ji-chu/macos-shang-shi-yong-wireshark-zhua-bao-802-11/"/>
      <url>/2020/07/24/ji-chu/macos-shang-shi-yong-wireshark-zhua-bao-802-11/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/wlan_wireshark.png" alt="操作界面"></p><p><img src="https://oss.jiangkang.tech/jk/image-20200724192240420.png" alt="image-20200724192240420"></p><ol><li>工具栏 点击 Capture</li><li>点击 Options (如果没Stop,点击下Stop)</li><li>找到WI-FI,然后按照上面两张图进行设置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 802.11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端设备标识符</title>
      <link href="/2020/07/23/ji-chu/yi-dong-duan-she-bei-biao-shi-fu/"/>
      <url>/2020/07/23/ji-chu/yi-dong-duan-she-bei-biao-shi-fu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/uid.png" alt="设备标识符"></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设备标识符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-区分Debug,Release,Profile模式</title>
      <link href="/2020/07/18/flutter/flutter-qu-fen-debug-release-profile-mo-shi/"/>
      <url>/2020/07/18/flutter/flutter-qu-fen-debug-release-profile-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>Flutter中如果需要在Debug模式下输出一些信息,或者做一些特殊的逻辑,但是Release模式下又不需要的话,就需要可以判断当前的APK或者ipa是否为debug模式.这里有两种方式可以用来判断:</p><h2 id="使用dart-vm-product属性"><a href="#使用dart-vm-product属性" class="headerlink" title="使用dart.vm.product属性"></a>使用<code>dart.vm.product</code>属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 是否为Release模式</span><span class="token keyword">const</span> bool isReleaseMode <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.product"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果<code>dart.vm.product</code>属性值为true,则为Release模式,否则不是Release模式.</p><p><strong>但是这种方式不能用来区分Debug和Profile模式.</strong></p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 判断是否为Debug模式</span>bool <span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  bool inDebug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>inDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> inDebug<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Debug模式下,是可以使用断言功能的,但是Profile和Release包下,断言被禁用了,因此可以用来判断是否为Debug模式.</p><p><strong>但是不能用于区分Profile模式和Release模式.</strong></p><p>既然上面两种方法都没法区分profile模式,因此大概看了下源码:</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// List the preconfigured build options for a given build mode.</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">buildModeOptions</span><span class="token punctuation">(</span>BuildMode mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>debug<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=false'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=false'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions,local-var-info,debugger-stops,instance-field-initializers,keep-unreachable-code,avoid-closure-call-instructions'</span><span class="token punctuation">,</span>        <span class="token string">'--enable-asserts'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>profile<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=true'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=false'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>release<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=false'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=true'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string">'Unknown BuildMode: $mode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的代码可以看出来,我们可以使用<code>dart.vm.profile</code>来判断是否为profile模式.因此得出下面完整的判断方案:</p><h2 id="完整的方案"><a href="#完整的方案" class="headerlink" title="完整的方案"></a>完整的方案</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 判断是否为Debug模式</span>bool <span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  bool inDebug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>inDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> inDebug<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 判断编译模式</span>String <span class="token function">getCompileMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> bool isProfile <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.profile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> bool isReleaseMode <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.product"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"debug"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"profile"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isReleaseMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"release"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Unknown type"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-路由跳转</title>
      <link href="/2020/07/12/flutter/flutter-lu-you-tiao-zhuan/"/>
      <url>/2020/07/12/flutter/flutter-lu-you-tiao-zhuan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/20200719173617.png" alt="路由跳转"></p><p>前端页面开发中,路由的概念并不陌生,比如Android中经常会封装一些路由框架,通过一个name跳转指定的Acitivity以进行一定程度的解耦.</p><p>在Flutter中同样也有路由的概念,但是由于Dart语言比较古老落后,Flutter的路由跳转在一定程度上比较丑陋.</p><p>在Flutter中,我们一般使用<code>Navigator</code>进行路由跳转.</p><h2 id="最简单的跳转方法"><a href="#最简单的跳转方法" class="headerlink" title="最简单的跳转方法"></a>最简单的跳转方法</h2><pre class=" language-dart"><code class="language-dart">    Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用一个封装好的<code>MaterialPageRouter</code>作为<code>Router</code>的实现.</p><p>当要返回时,可以用<code>pop</code>:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者:</p><pre class=" language-dart"><code class="language-dart"> Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用路由名字进行跳转"><a href="#使用路由名字进行跳转" class="headerlink" title="使用路由名字进行跳转"></a>使用路由名字进行跳转</h2><p>当项目中的页面比较多的时候,如果再用上面的方法进行跳转,到后面就很难维护了,不利于拓展,因为我们必须引用到指定的页面Widget.</p><p>很容易想到,Flutter的Navigator提供了一个方法,使用一个routerName就可以跳转到指定的页面Widget,而不需要直接依赖页面Widget,这就需要建立一个name到页面的映射了,我们一般在APP的入口处进行设置:</p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// Start the app with the "/" named route. In this case, the app starts</span>  <span class="token comment" spellcheck="true">// on the FirstScreen widget.</span>  initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// When navigating to the "/" route, build the FirstScreen widget.</span>    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FirstScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// When navigating to the "/second" route, build the SecondScreen widget.</span>    <span class="token string">'/second'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">SecondScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当需要跳转的时候,执行下面的方法:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">'/second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当需要返回的时候,执行下面的方法:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="传参跳转"><a href="#传参跳转" class="headerlink" title="传参跳转"></a>传参跳转</h2><p>页面直接的跳转不免会遇到需要传递参数的情形,如果是直接跳转,直接在页面的构造方法中传入参数即可.</p><p>传递的参数是一个Object,可以是你自己定义的类实例,也可以是数字,字符串等:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于不带名字的路由跳转,可以通过RouteSettings进行传参:</p><pre class=" language-dart"><code class="language-dart">        Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          context<span class="token punctuation">,</span>          <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">DetailScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 传参args</span>            settings<span class="token punctuation">:</span> <span class="token function">RouteSettings</span><span class="token punctuation">(</span>              arguments<span class="token punctuation">:</span> args<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么如何在页面中获取到传入的参数呢?</p><p>答案是需要使用<code>ModalRoute.of(context)</code>:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> Object args <span class="token operator">=</span> ModalRoute<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments</code></pre><p>其中args可以是任何你定义的类,假设这里要传入的是一个Dog对象:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>  <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那些的时候就可以是:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> Dog dog <span class="token operator">=</span> ModalRoute<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>String name <span class="token operator">=</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">;</span>int age <span class="token operator">=</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">;</span></code></pre><p>除了在页面Widget中解析参数以外,还可以在<code>MaterialApp#onGenerateRoute()</code>中:</p><h3 id="使用MaterialApp-onGenerateRoute"><a href="#使用MaterialApp-onGenerateRoute" class="headerlink" title="使用MaterialApp#onGenerateRoute()"></a>使用MaterialApp#onGenerateRoute()</h3><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  onGenerateRoute<span class="token punctuation">:</span> <span class="token punctuation">(</span>settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>settings<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"/dog"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> Dog dog <span class="token operator">=</span> settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">DogPage</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实不管是在页面中解析参数,还是在onGenerateRoute中解析参数,我们需要都只是一个RouteSettings对象,这个对象中持有了路由名字和传递的参数,因此可以通过它将两者联系起来:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RouteSettings</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">RouteSettings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token keyword">final</span> Object arguments<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'${objectRuntimeType(this, '</span>RouteSettings<span class="token string">')}("$name", $arguments)'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="返回路由结果"><a href="#返回路由结果" class="headerlink" title="返回路由结果"></a>返回路由结果</h2><p>在Android中跳转Activity,在返回到当前页的时候需要从页面带回来一些数据,Android中是通过<code>onActivityForResult</code>实现的,在Flutter中则是通过异步函数调用实现的.在跳转的时候保存一个Future对象的结果即可:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    context<span class="token punctuation">,</span>    <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">SelectionScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么在页面退出/返回的时候任何传递结果呢?</p><p>答案是<code>pop</code>方法中可以携带一个结果对象,类型可以自定义:</p><pre class=" language-dart"><code class="language-dart"> Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-转场动画(页面跳转动画)</title>
      <link href="/2020/07/12/flutter/flutter-zhuan-chang-dong-hua/"/>
      <url>/2020/07/12/flutter/flutter-zhuan-chang-dong-hua/</url>
      
        <content type="html"><![CDATA[<p>在Android中专场动画比较常见,就是从一个Activity/Fragment跳转到另一个Activity/Fragment之间的过渡状态.Flutter也提供了对转场动画的支持.</p><h2 id="路由跳转的一般方式"><a href="#路由跳转的一般方式" class="headerlink" title="路由跳转的一般方式"></a>路由跳转的一般方式</h2><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> targetPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以使用<code>PageRouteBuilder</code>:</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">final</span> router <span class="token operator">=</span> <span class="token function">PageRouteBuilder</span><span class="token punctuation">(</span>      pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>          Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      transitionsBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>          Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">,</span> Widget child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// child是pageBuilder中返回的，一般在这里处理转场动画</span>        <span class="token keyword">return</span> child<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>pageBuilder中return的page会作为transionBuilder中的child参数传入,而且pageBuilder仅在router被创建时调用一次.</p><p>至于<code>animation</code>,<code>secondaryAnimation</code>参数,就是在push router的时候从0变化到1,pop的时候从1变化到0.</p><p>下面看下如何控制页面进入/退出的方向;</p><h2 id="控制页面进入-退出的方向"><a href="#控制页面进入-退出的方向" class="headerlink" title="控制页面进入/退出的方向"></a>控制页面进入/退出的方向</h2><pre class=" language-dart"><code class="language-dart">  Route <span class="token function">_createPageRouter</span><span class="token punctuation">(</span>SlideDirection slideDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">PageRouteBuilder</span><span class="token punctuation">(</span>pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span>        Animation animation<span class="token punctuation">,</span> Animation secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">ImageDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> transitionsBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>        Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">,</span> Widget child<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> begin <span class="token operator">=</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>slideDirection <span class="token operator">==</span> SlideDirection<span class="token punctuation">.</span>right2left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        begin <span class="token operator">=</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> end <span class="token operator">=</span> Offset<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>      <span class="token keyword">var</span> curve <span class="token operator">=</span> Curves<span class="token punctuation">.</span>ease<span class="token punctuation">;</span>      <span class="token keyword">var</span> tween <span class="token operator">=</span> <span class="token function">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">:</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token function">CurveTween</span><span class="token punctuation">(</span>curve<span class="token punctuation">:</span> curve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> offsetAnimation <span class="token operator">=</span> animation<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span>tween<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">SlideTransition</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>        position<span class="token punctuation">:</span> offsetAnimation<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>这里利用了Animation + SlideTransition来实现效果,其中SlideTransition用于一个widget从相对于正常位置的一个偏移动画到正常位置.</p><h2 id="源码项目"><a href="#源码项目" class="headerlink" title="源码项目"></a>源码项目</h2><p>[<a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><video src="https://webplus-cn-hangzhou-s-5d0e2c1c3cec684ce2209709.oss-cn-hangzhou.aliyuncs.com/jk/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB.mov" width="300px"      controls="controls" ></video></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程-桌面程序的启动</title>
      <link href="/2020/06/29/android/android-xi-tong-qi-dong-liu-cheng-zhuo-mian-cheng-xu-de-qi-dong/"/>
      <url>/2020/06/29/android/android-xi-tong-qi-dong-liu-cheng-zhuo-mian-cheng-xu-de-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://www.jiangkang.tech/2020/06/26/android/android-xi-tong-qi-dong-liu-cheng-systemserver-fen-xi/">Android启动流程-SystemServer分析</a>中有提到,在SystemServer启动“Other”类型服务的时候,最后阶段会执行ActivityManagerService的<code>systemReady()</code>方法,这里就是启动桌面程序的入口.</p><pre class=" language-java"><code class="language-java">        mActivityManagerService<span class="token punctuation">.</span><span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartSystemUI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">startSystemUi</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> windowManagerF<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reportWtf</span><span class="token punctuation">(</span><span class="token string">"starting System UI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Wait for all packages to be prepared</span>            mPackageManagerService<span class="token punctuation">.</span><span class="token function">waitForAppDataPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// It is now okay to let the various system services start their</span>            <span class="token comment" spellcheck="true">// third party code...</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"PhaseThirdPartyAppsCanStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startBootPhase</span><span class="token punctuation">(</span>                    SystemService<span class="token punctuation">.</span>PHASE_THIRD_PARTY_APPS_CAN_START<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> BOOT_TIMINGS_TRACE_LOG<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityManagerService</code>中的systemReady()方法中有这么一段:</p><pre class=" language-java"><code class="language-java">mAtmInternal<span class="token punctuation">.</span><span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span>currentUserId<span class="token punctuation">,</span> <span class="token string">"systemReady"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityTaskManagerService</code>中有实现:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mGlobalLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRootActivityContainer<span class="token punctuation">.</span><span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>最终会执行到<code>RootActivityContainer</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> homeStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mActivityDisplays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> displayId <span class="token operator">=</span> mActivityDisplays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>mDisplayId<span class="token punctuation">;</span>            homeStarted <span class="token operator">|=</span> <span class="token function">startHomeOnDisplay</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> homeStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">startHomeOnDisplay</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">,</span> <span class="token keyword">int</span> displayId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowInstrumenting<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> fromHomeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Fallback to top focused display if the displayId is invalid.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>displayId <span class="token operator">==</span> INVALID_DISPLAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            displayId <span class="token operator">=</span> <span class="token function">getTopDisplayFocusedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mDisplayId<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Intent homeIntent <span class="token operator">=</span> null<span class="token punctuation">;</span>        ActivityInfo aInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>displayId <span class="token operator">==</span> DEFAULT_DISPLAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取Home Intent</span>            homeIntent <span class="token operator">=</span> mService<span class="token punctuation">.</span><span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aInfo <span class="token operator">=</span> <span class="token function">resolveHomeActivity</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> homeIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldPlaceSecondaryHomeOnDisplay</span><span class="token punctuation">(</span>displayId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Pair<span class="token operator">&lt;</span>ActivityInfo<span class="token punctuation">,</span> Intent<span class="token operator">></span> info <span class="token operator">=</span> <span class="token function">resolveSecondaryHomeActivity</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>            aInfo <span class="token operator">=</span> info<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            homeIntent <span class="token operator">=</span> info<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aInfo <span class="token operator">==</span> null <span class="token operator">||</span> homeIntent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canStartHomeOnDisplay</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">,</span> displayId<span class="token punctuation">,</span> allowInstrumenting<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Updates the home component of the intent.</span>        homeIntent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> aInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>homeIntent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Updates the extra information of the intent.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromHomeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            homeIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>WindowManagerPolicy<span class="token punctuation">.</span>EXTRA_FROM_HOME_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Update the reason for ANR debugging to verify if the user activity is the one that</span>        <span class="token comment" spellcheck="true">// actually launched.</span>        <span class="token keyword">final</span> String myReason <span class="token operator">=</span> reason <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> UserHandle<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>                aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> displayId<span class="token punctuation">;</span>        mService<span class="token punctuation">.</span><span class="token function">getActivityStartController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startHomeActivity</span><span class="token punctuation">(</span>homeIntent<span class="token punctuation">,</span> aInfo<span class="token punctuation">,</span> myReason<span class="token punctuation">,</span>                displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><p>这里会找到桌面程序的Intent:</p><pre class=" language-java"><code class="language-java">    Intent <span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>mTopAction<span class="token punctuation">,</span> mTopData <span class="token operator">!=</span> null <span class="token operator">?</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>mTopData<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>mTopComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_DEBUG_TRIAGED_MISSING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFactoryTest <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_LOW_LEVEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_HOME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intent<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>剩下的就是启动桌面程序了.</p><blockquote><p>Launcher的启动流程代码写的不是一般的混乱,启动Launcher的时候会有好几次的防护,针对Launcher启动崩溃也做了相应的处理.</p><p>没有经过debug,可能存在其他的路径启动Launcher,后续如果还有兴趣的话再补充.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程-ART虚拟机的启动</title>
      <link href="/2020/06/28/android/android-xi-tong-qi-dong-liu-cheng-art-xu-ni-ji-de-qi-dong/"/>
      <url>/2020/06/28/android/android-xi-tong-qi-dong-liu-cheng-art-xu-ni-ji-de-qi-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="启动JVM的通用流程"><a href="#启动JVM的通用流程" class="headerlink" title="启动JVM的通用流程"></a>启动JVM的通用流程</h2><ol><li><p>加载虚拟机实现的动态链接库(Android中是so文件);</p><p>一般通过<code>dlopen</code>方法加载so文件.</p></li><li><p>设置启动参数,并使用<code>JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*)</code>方法创建虚拟机;</p></li></ol><p>这个时候就可以执行Java程序了.</p><p>我这里用C++写了个简单的例子,用来创建JVM:</p><h2 id="C-创建虚拟机"><a href="#C-创建虚拟机" class="headerlink" title="C++创建虚拟机"></a>C++创建虚拟机</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> jvmHandler <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span>            <span class="token string">"../libjvm.dylib"</span><span class="token punctuation">,</span>            RTLD_NOW <span class="token operator">|</span> RTLD_NODELETE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jvmHandler <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"load libjvm.dylib failed"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    JavaVM <span class="token operator">*</span>javaVm<span class="token punctuation">;</span>    JNIEnv <span class="token operator">*</span>jniEnv<span class="token punctuation">;</span>    JavaVMInitArgs vmInitArgs<span class="token punctuation">;</span>    JavaVMOption <span class="token operator">*</span>options <span class="token operator">=</span> <span class="token keyword">new</span> JavaVMOption<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    options<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>optionString <span class="token operator">=</span> <span class="token string">"-Djava.class.path=."</span><span class="token punctuation">;</span>    options<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>optionString <span class="token operator">=</span> <span class="token string">"-version"</span><span class="token punctuation">;</span>    vmInitArgs<span class="token punctuation">.</span>version <span class="token operator">=</span> JNI_VERSION_1_4<span class="token punctuation">;</span>    vmInitArgs<span class="token punctuation">.</span>nOptions <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    vmInitArgs<span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">;</span>    vmInitArgs<span class="token punctuation">.</span>ignoreUnrecognized <span class="token operator">=</span> JNI_TRUE<span class="token punctuation">;</span>    <span class="token keyword">auto</span> status <span class="token operator">=</span> <span class="token function">JNI_CreateJavaVM</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>javaVm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>jniEnv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmInitArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> javaVm <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> jniEnv <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Create JavaVM failed!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    jclass <span class="token class-name">cls</span> <span class="token operator">=</span> jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"Main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> JNI_TRUE <span class="token operator">||</span> cls <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionDescribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>jvmHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"find class Main failed!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    jmethodID mehtodTestId <span class="token operator">=</span> jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jniEnv<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> mehtodTestId<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    javaVm<span class="token operator">-</span><span class="token operator">></span><span class="token function">DestroyJavaVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码没什么好说的,按照指定的流程加载就行,实际运用的时候启动参数得设置很多.</p><p>在使用app_process创建并启动zygote进程之前,会先启动虚拟机.</p><p>在AndroidRuntime::start()方法中有这么一段代码:</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/* start the virtual machine */</span>    JniInvocation jni_invocation<span class="token punctuation">;</span>    jni_invocation<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JNIEnv<span class="token operator">*</span> env<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startVm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mJavaVM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span> zygote<span class="token punctuation">,</span> primary_zygote<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">onVmCreated</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>JniInvocation</code>其实是一个中间层,通过这个中国层,那些使用JNI invocation API的应用可以动态选择JNI的实现方式.在Android中就是动态选择Dalvik虚拟机和ART虚拟机(可通过<em>persist.sys.dalvik.vm.lib.2</em>指定)</p><pre class=" language-cpp"><code class="language-cpp">  <span class="token keyword">bool</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> library<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">JniInvocationInit</span><span class="token punctuation">(</span>impl_<span class="token punctuation">,</span> library<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在<code>libnativehelper/JniInvocation.c</code>中:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 默认库</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> kDefaultJniInvocationLibrary <span class="token operator">=</span> <span class="token string">"libart.so"</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">JniInvocationInit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> JniInvocationImpl<span class="token operator">*</span> instance<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> library_name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __ANDROID__</span>  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>PROP_VALUE_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>  <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token comment" spellcheck="true">// 获取虚拟机库名,这里是libart.so</span>  library_name <span class="token operator">=</span> <span class="token function">JniInvocationGetLibrary</span><span class="token punctuation">(</span>library_name<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用dlopen加载虚拟机库</span>  DlLibrary library <span class="token operator">=</span> <span class="token function">DlOpenLibrary</span><span class="token punctuation">(</span>library_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>library_name<span class="token punctuation">,</span> kDefaultJniInvocationLibrary<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Nothing else to try.</span>      <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Failed to dlopen %s: %s"</span><span class="token punctuation">,</span> library_name<span class="token punctuation">,</span> <span class="token function">DlGetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Note that this is enough to get something like the zygote</span>    <span class="token comment" spellcheck="true">// running, we can't property_set here to fix this for the future</span>    <span class="token comment" spellcheck="true">// because we are root and not the system user. See</span>    <span class="token comment" spellcheck="true">// RuntimeInit.commonInit for where we fix up the property to</span>    <span class="token comment" spellcheck="true">// avoid future fallbacks. http://b/11463182</span>    <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Falling back from %s to %s after dlopen error: %s"</span><span class="token punctuation">,</span>          library_name<span class="token punctuation">,</span> kDefaultJniInvocationLibrary<span class="token punctuation">,</span> <span class="token function">DlGetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    library_name <span class="token operator">=</span> kDefaultJniInvocationLibrary<span class="token punctuation">;</span>    library <span class="token operator">=</span> <span class="token function">DlOpenLibrary</span><span class="token punctuation">(</span>library_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Failed to dlopen %s: %s"</span><span class="token punctuation">,</span> library<span class="token punctuation">,</span> <span class="token function">DlGetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找对应JNI接口</span>  DlSymbol JNI_GetDefaultJavaVMInitArgs_ <span class="token operator">=</span> <span class="token function">FindSymbol</span><span class="token punctuation">(</span>library<span class="token punctuation">,</span> <span class="token string">"JNI_GetDefaultJavaVMInitArgs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>JNI_GetDefaultJavaVMInitArgs_ <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  DlSymbol JNI_CreateJavaVM_ <span class="token operator">=</span> <span class="token function">FindSymbol</span><span class="token punctuation">(</span>library<span class="token punctuation">,</span> <span class="token string">"JNI_CreateJavaVM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>JNI_CreateJavaVM_ <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  DlSymbol JNI_GetCreatedJavaVMs_ <span class="token operator">=</span> <span class="token function">FindSymbol</span><span class="token punctuation">(</span>library<span class="token punctuation">,</span> <span class="token string">"JNI_GetCreatedJavaVMs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>JNI_GetCreatedJavaVMs_ <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  instance<span class="token operator">-</span><span class="token operator">></span>jni_provider_library_name <span class="token operator">=</span> library_name<span class="token punctuation">;</span>  instance<span class="token operator">-</span><span class="token operator">></span>jni_provider_library <span class="token operator">=</span> library<span class="token punctuation">;</span>  instance<span class="token operator">-</span><span class="token operator">></span>JNI_GetDefaultJavaVMInitArgs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">jint</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> JNI_GetDefaultJavaVMInitArgs_<span class="token punctuation">;</span>  instance<span class="token operator">-</span><span class="token operator">></span>JNI_CreateJavaVM <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">jint</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> JNIEnv<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> JNI_CreateJavaVM_<span class="token punctuation">;</span>  instance<span class="token operator">-</span><span class="token operator">></span>JNI_GetCreatedJavaVMs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">jint</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>JavaVM<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> jsize<span class="token punctuation">,</span> jsize<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> JNI_GetCreatedJavaVMs_<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里默认就是libart.so,然后使用dlopen系统调用进行加载,查找主要的JNI接口.然后将接口的实现切换为ART虚拟机.</p><p>在startVM中,首先会初始化大量的启动参数,然后就调用JNI_CreateJavaVM()方法创建ART虚拟机:</p><pre class=" language-cpp"><code class="language-cpp">    initArgs<span class="token punctuation">.</span>version <span class="token operator">=</span> JNI_VERSION_1_4<span class="token punctuation">;</span>    initArgs<span class="token punctuation">.</span>options <span class="token operator">=</span> mOptions<span class="token punctuation">.</span><span class="token function">editArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initArgs<span class="token punctuation">.</span>nOptions <span class="token operator">=</span> mOptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initArgs<span class="token punctuation">.</span>ignoreUnrecognized <span class="token operator">=</span> JNI_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Initialize the VM.     *     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.     * If this call succeeds, the VM is ready, and we can start issuing     * JNI calls.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JNI_CreateJavaVM</span><span class="token punctuation">(</span>pJavaVM<span class="token punctuation">,</span> pEnv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>initArgs<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"JNI_CreateJavaVM failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个时候ART虚拟机就创建成功了.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
            <tag> ART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的Deep Link与 APP Link</title>
      <link href="/2020/06/28/android/android-zhong-de-deeplink-yu-applink/"/>
      <url>/2020/06/28/android/android-zhong-de-deeplink-yu-applink/</url>
      
        <content type="html"><![CDATA[<h2 id="Deep-link"><a href="#Deep-link" class="headerlink" title="Deep link"></a>Deep link</h2><p>其实就是一种intent过滤器.可以直接进入APP特定的Activity.</p><p>如果APP中存在多个符合要求的Activity,会弹出一个选择框.</p><img src="https://oss.jiangkang.tech/jk/app-disambiguation_2x.png" alt="img" style="zoom:50%;" /><h2 id="App-link"><a href="#App-link" class="headerlink" title="App link"></a>App link</h2><p>一种特殊的deep link,需要验证网站网址.</p><p>用一个assetlinks.json文件进行配置.</p><p>不会显示选择对话框.</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>autoVerify</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.BROWSABLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><p>两个地方需要注意:</p><ul><li><p>android:autoVerify=”true”</p></li><li><p>生成的链接文件放在网站域名指定的地方: </p><pre><code>https://domain.name/.well-known/assetlinks.json</code></pre></li></ul><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><p><img src="https://oss.jiangkang.tech/jk/image-20200628105731883.png" alt="image-20200628105731883"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://developer.android.com/training/app-links/verify-site-associations" target="_blank" rel="noopener">https://developer.android.com/training/app-links/verify-site-associations</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Link </tag>
            
            <tag> APP Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程-Native方法的注册</title>
      <link href="/2020/06/28/android/android-xi-tong-qi-dong-liu-cheng-native-fang-fa-de-zhu-ce/"/>
      <url>/2020/06/28/android/android-xi-tong-qi-dong-liu-cheng-native-fang-fa-de-zhu-ce/</url>
      
        <content type="html"><![CDATA[<p>在使用app_process 创建zygote进程的过程中会执行下面这些操作:</p><ul><li>创建ART虚拟机</li><li>注册Native方法</li><li>找到ZygoteInit,通过反射调用它的main方法进入Java世界</li></ul><p>这里说一下注册Native方法的一些细节.</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/*     * Register android functions.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startReg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Unable to register all android natives\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>源码在<code>frameworks/base/core/jni/AndroidRuntime.cpp</code>中.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* * Register android native functions with the VM. */</span><span class="token comment" spellcheck="true">/*static*/</span> <span class="token keyword">int</span> AndroidRuntime<span class="token operator">::</span><span class="token function">startReg</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ATRACE_NAME</span><span class="token punctuation">(</span><span class="token string">"RegisterAndroidNatives"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * This hook causes all future threads created in this process to be     * attached to the JavaVM.  (This needs to go away in favor of JNI     * Attach calls.)     */</span>    <span class="token function">androidSetCreateThreadFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>android_create_thread_fn<span class="token punctuation">)</span> javaCreateThreadEtc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGV</span><span class="token punctuation">(</span><span class="token string">"--- registering native functions ---\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Every "register" function calls one or more things that return     * a local reference (e.g. FindClass).  Because we haven't really     * started the VM yet, they're all getting stored in the base frame     * and never released.  Use Push/Pop to manage the storage.     */</span>    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PushLocalFrame</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">register_jni_procs</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PopLocalFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PopLocalFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//createJavaThread("fubar", quickTest, (void*) "hello");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="要注册的方法"><a href="#要注册的方法" class="headerlink" title="要注册的方法"></a>要注册的方法</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> RegJNIRec gRegJNI<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_RuntimeInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ZygoteInit_nativeZygoteInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SystemClock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_EventLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_Log<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_MemoryIntArray<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_PathParser<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_StatsLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_StatsLogInternal<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_admin_SecurityLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_AssetManager<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_StringBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_XmlBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_ApkAssets<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_text_AndroidCharacter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_text_Hyphenator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_KeyCharacterMap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Process<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SystemProperties<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Binder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Parcel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HidlMemory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HidlSupport<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwBinder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwBlob<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwParcel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwRemoteBinder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_NativeHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_VintfObject<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_VintfRuntimeInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Canvas<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// This needs to be before register_android_graphics_Graphics, or the latter</span>    <span class="token comment" spellcheck="true">// will not be able to find the jmethodID for ColorSpace.get().</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ColorSpace<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Graphics<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_DisplayEventReceiver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_RenderNode<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_RenderNodeAnimator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_DisplayListCanvas<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputApplicationHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputWindowHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_TextureLayer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_ThreadedRenderer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_Surface<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_SurfaceControl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_SurfaceSession<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_CompositionSamplingListener<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_TextureView<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_view_animation_NativeInterpolatorFactoryHelper<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_google_android_gles_jni_EGLImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_google_android_gles_jni_GLImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGL14<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGL15<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGLExt<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES10<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES10Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES11<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES11Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES20<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES30<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES31<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES31Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES32<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Bitmap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_BitmapFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_BitmapRegionDecoder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ByteBufferStreamAdaptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Camera<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_CreateJavaOutputStreamAdaptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_CanvasProperty<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ColorFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_DrawFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_FontFamily<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_GraphicBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ImageDecoder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_AnimatedImageDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Interpolator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_MaskFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Movie<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_NinePatch<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Paint<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Path<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_PathMeasure<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_PathEffect<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Picture<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Region<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Shader<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_SurfaceTexture<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Typeface<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_YuvImage<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_AnimatedVectorDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_VectorDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_fonts_Font<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_fonts_FontFamily<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfDocument<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfEditor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfRenderer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_text_MeasuredText<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_text_LineBreaker<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_CursorWindow<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteConnection<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteGlobal<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteDebug<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Debug<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_FileObserver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_GraphicsEnvironment<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SELinux<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Trace<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_UEventObserver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_net_LocalSocketImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_net_NetworkUtils<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_MemoryFile<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SharedMemory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ClassLoaderFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_Zygote<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ZygoteInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_util_VirtualRefBasePtr<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_Camera<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_CameraMetadata<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_legacy_LegacyCameraDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_legacy_PerfMeasurement<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_DngCreator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_HardwareBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SensorManager<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SerialPort<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SoundTrigger<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbDeviceConnection<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbRequest<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_location_ActivityRecognitionHardware<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioEffectDescriptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioSystem<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioRecord<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioTrack<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioAttributes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioProductStrategies<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioVolumeGroups<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioVolumeGroupChangeHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_MicrophoneInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_RemoteDisplay<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_ToneGenerator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_midi<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_server_NetworkManagementSocketTagger<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_ddm_DdmHandleNativeHeap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupDataInput<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupDataOutput<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_FileBackupHelperBase<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupHelperDispatcher<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_backup_FullBackup<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_Activity<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_ActivityThread<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_NativeActivity<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_jar_StrictJarFile<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputChannel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputEventReceiver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputEventSender<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputQueue<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_KeyEvent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_MotionEvent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_PointerIcon<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_VelocityTracker<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_ObbScanner<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_Configuration<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_animation_PropertyValuesHolder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_security_Scrypt<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_content_NativeLibraryHelper<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_AtomicDirectory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_FuseAppLoop<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_KernelCpuUidBpfMapReader<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_KernelSingleUidTimeReader<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其中<code>register_xx</code>其实是一个函数指针,遍历的时候会依次执行这些方法:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">register_jni_procs</span><span class="token punctuation">(</span><span class="token keyword">const</span> RegJNIRec array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size_t count<span class="token punctuation">,</span> JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">mProc</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> NDEBUG</span>            <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"----------!!! %s failed to load\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">register_com_android_internal_os_RuntimeInit</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> JNINativeMethod methods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"nativeFinishInit"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>com_android_internal_os_RuntimeInit_nativeFinishInit<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"nativeSetExitWithoutCleanup"</span><span class="token punctuation">,</span> <span class="token string">"(Z)V"</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>com_android_internal_os_RuntimeInit_nativeSetExitWithoutCleanup<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"com/android/internal/os/RuntimeInit"</span><span class="token punctuation">,</span>        methods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到需要传入用到JNI方法的Java类名以及用到的Native方法签名.</p><p>实际注册操作都是通过<code>jniRegisterNativeMethods</code>方法:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span> <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> gMethods<span class="token punctuation">,</span> <span class="token keyword">int</span> numMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>env<span class="token operator">-</span><span class="token operator">></span>functions<span class="token punctuation">,</span> className<span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现在<code>libnativehelper/JNIHelp.c</code>中:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">jniRegisterNativeMethods</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span>    <span class="token keyword">const</span> JNINativeMethod<span class="token operator">*</span> methods<span class="token punctuation">,</span> <span class="token keyword">int</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ALOGV</span><span class="token punctuation">(</span><span class="token string">"Registering %s's %d native methods..."</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>    jclass <span class="token class-name">clazz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOG_ALWAYS_FATAL_IF</span><span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>                         <span class="token string">"Native registration unable to find class '%s'; aborting..."</span><span class="token punctuation">,</span>                         className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">RegisterNatives</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> methods<span class="token punctuation">,</span> numMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">DeleteLocalRef</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Failure to register natives is fatal. Try to report the corresponding exception,</span>    <span class="token comment" spellcheck="true">// otherwise abort with generic failure message.</span>    jthrowable thrown <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionOccurred</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thrown <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">struct</span> ExpandableString summary<span class="token punctuation">;</span>        <span class="token function">ExpandableStringInitialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>summary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetExceptionSummary</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> thrown<span class="token punctuation">,</span> <span class="token operator">&amp;</span>summary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ALOGF</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> summary<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ExpandableStringRelease</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>summary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">DeleteLocalRef</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ALOGF</span><span class="token punctuation">(</span><span class="token string">"RegisterNatives failed for '%s'; aborting..."</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些要注册的Native方法实现大部分都在<code>frameworks/base/core/jni</code>下.</p><p>我门来看一下Canvas中Native方法的注册:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> JNINativeMethod gMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"nGetNativeFinalizer"</span><span class="token punctuation">,</span> <span class="token string">"()J"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>getNativeFinalizer<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nFreeCaches"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>freeCaches<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nFreeTextLayoutCaches"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>freeTextLayoutCaches<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSetCompatibilityVersion"</span><span class="token punctuation">,</span> <span class="token string">"(I)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>setCompatibilityVersion<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ------------ @FastNative ----------------</span>    <span class="token punctuation">{</span><span class="token string">"nInitRaster"</span><span class="token punctuation">,</span> <span class="token string">"(J)J"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>initRaster<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSetBitmap"</span><span class="token punctuation">,</span> <span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>setBitmap<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nGetClipBounds"</span><span class="token punctuation">,</span><span class="token string">"(JLandroid/graphics/Rect;)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>getClipBounds<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ------------ @CriticalNative ----------------</span>    <span class="token punctuation">{</span><span class="token string">"nIsOpaque"</span><span class="token punctuation">,</span><span class="token string">"(J)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>isOpaque<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nGetWidth"</span><span class="token punctuation">,</span><span class="token string">"(J)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>getWidth<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nGetHeight"</span><span class="token punctuation">,</span><span class="token string">"(J)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>getHeight<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSave"</span><span class="token punctuation">,</span><span class="token string">"(JI)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>save<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSaveLayer"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFJI)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>saveLayer<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSaveLayerAlpha"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFII)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>saveLayerAlpha<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSaveUnclippedLayer"</span><span class="token punctuation">,</span><span class="token string">"(JIIII)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>saveUnclippedLayer<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nRestoreUnclippedLayer"</span><span class="token punctuation">,</span><span class="token string">"(JIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>restoreUnclippedLayer<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nGetSaveCount"</span><span class="token punctuation">,</span><span class="token string">"(J)I"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>getSaveCount<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nRestore"</span><span class="token punctuation">,</span><span class="token string">"(J)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>restore<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nRestoreToCount"</span><span class="token punctuation">,</span><span class="token string">"(JI)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>restoreToCount<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nGetMatrix"</span><span class="token punctuation">,</span> <span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>getMatrix<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSetMatrix"</span><span class="token punctuation">,</span><span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>setMatrix<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nConcat"</span><span class="token punctuation">,</span><span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>concat<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nRotate"</span><span class="token punctuation">,</span><span class="token string">"(JF)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>rotate<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nScale"</span><span class="token punctuation">,</span><span class="token string">"(JFF)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>scale<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSkew"</span><span class="token punctuation">,</span><span class="token string">"(JFF)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>skew<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nTranslate"</span><span class="token punctuation">,</span><span class="token string">"(JFF)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>translate<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nQuickReject"</span><span class="token punctuation">,</span><span class="token string">"(JJ)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>quickRejectPath<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nQuickReject"</span><span class="token punctuation">,</span><span class="token string">"(JFFFF)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>quickRejectRect<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nClipRect"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFI)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>clipRect<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nClipPath"</span><span class="token punctuation">,</span><span class="token string">"(JJI)Z"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>clipPath<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nSetDrawFilter"</span><span class="token punctuation">,</span> <span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>setPaintFilter<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If called from Canvas these are regular JNI</span><span class="token comment" spellcheck="true">// If called from DisplayListCanvas they are @FastNative</span><span class="token keyword">static</span> <span class="token keyword">const</span> JNINativeMethod gDrawMethods<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"nDrawColor"</span><span class="token punctuation">,</span><span class="token string">"(JII)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawColor<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawColor"</span><span class="token punctuation">,</span><span class="token string">"(JJJI)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawColorLong<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawPaint"</span><span class="token punctuation">,</span><span class="token string">"(JJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawPaint<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawPoint"</span><span class="token punctuation">,</span> <span class="token string">"(JFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawPoint<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawPoints"</span><span class="token punctuation">,</span> <span class="token string">"(J[FIIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawPoints<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawLine"</span><span class="token punctuation">,</span> <span class="token string">"(JFFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawLine<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawLines"</span><span class="token punctuation">,</span> <span class="token string">"(J[FIIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawLines<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawRect"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawRect<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawRegion"</span><span class="token punctuation">,</span> <span class="token string">"(JJJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawRegion <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawRoundRect"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawRoundRect<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawDoubleRoundRect"</span><span class="token punctuation">,</span> <span class="token string">"(JFFFFFFFFFFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawDoubleRoundRectXY<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawDoubleRoundRect"</span><span class="token punctuation">,</span> <span class="token string">"(JFFFF[FFFFF[FJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawDoubleRoundRectRadii<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawCircle"</span><span class="token punctuation">,</span><span class="token string">"(JFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawCircle<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawOval"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawOval<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawArc"</span><span class="token punctuation">,</span><span class="token string">"(JFFFFFFZJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawArc<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawPath"</span><span class="token punctuation">,</span><span class="token string">"(JJJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawPath<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawVertices"</span><span class="token punctuation">,</span> <span class="token string">"(JII[FI[FI[II[SIIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>drawVertices<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawNinePatch"</span><span class="token punctuation">,</span> <span class="token string">"(JJJFFFFJII)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>drawNinePatch<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawBitmapMatrix"</span><span class="token punctuation">,</span> <span class="token string">"(JJJJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>drawBitmapMatrix<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawBitmapMesh"</span><span class="token punctuation">,</span> <span class="token string">"(JJII[FI[IIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>drawBitmapMesh<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawBitmap"</span><span class="token punctuation">,</span><span class="token string">"(JJFFJIII)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawBitmap<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawBitmap"</span><span class="token punctuation">,</span><span class="token string">"(JJFFFFFFFFJII)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawBitmapRect<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawBitmap"</span><span class="token punctuation">,</span> <span class="token string">"(J[IIIFFIIZJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>CanvasJNI<span class="token operator">::</span>drawBitmapArray<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawText"</span><span class="token punctuation">,</span><span class="token string">"(J[CIIFFIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextChars<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawText"</span><span class="token punctuation">,</span><span class="token string">"(JLjava/lang/String;IIFFIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextString<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawTextRun"</span><span class="token punctuation">,</span><span class="token string">"(J[CIIIIFFZJJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextRunChars<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawTextRun"</span><span class="token punctuation">,</span><span class="token string">"(JLjava/lang/String;IIIIFFZJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextRunString<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawTextOnPath"</span><span class="token punctuation">,</span><span class="token string">"(J[CIIJFFIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextOnPathChars<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"nDrawTextOnPath"</span><span class="token punctuation">,</span><span class="token string">"(JLjava/lang/String;JFFIJ)V"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> CanvasJNI<span class="token operator">::</span>drawTextOnPathString<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">register_android_graphics_Canvas</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">RegisterMethodsOrDie</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"android/graphics/Canvas"</span><span class="token punctuation">,</span> gMethods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">RegisterMethodsOrDie</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"android/graphics/BaseCanvas"</span><span class="token punctuation">,</span> gDrawMethods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gDrawMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">RegisterMethodsOrDie</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"android/graphics/BaseRecordingCanvas"</span><span class="token punctuation">,</span> gDrawMethods<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gDrawMethods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用JNIEnv的<code>RegisterNatives</code>方法实际上就是在Java的native方法名与C++中的JNI调用方法签名之间建立一个映射关系,从而避免了在C++中必须写那些丑陋的方法名了.</p><p>而<code>RegisterNatives</code>的使用在JNI开发中还是非常常见的,比如我们经常会在JNI_Onload方法中注册Native方法,还是会使用到<code>RegisterNatives</code>方法.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>灵活使用<code>ReigsterNatives</code>方法,不一定必须在<code>JNI_OnLoad()</code>方法中调用,也可以自行调用</p></li><li><p>JNI中绝大部分方法都在JNIEnv中;</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
            <tag> Native方法注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程-SystemServer分析</title>
      <link href="/2020/06/26/android/android-xi-tong-qi-dong-liu-cheng-systemserver-fen-xi/"/>
      <url>/2020/06/26/android/android-xi-tong-qi-dong-liu-cheng-systemserver-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>app_process64在启动zygote进程的时候,会从zygote进程fork出system_server进程.</p><p>system_server的入口在SystemServer.java中</p><p>在<a href="https://www.jiangkang.tech/2020/06/25/android/android-xi-tong-qi-dong-liu-cheng-zygote-fen-xi/">Android启动流程-Zygote分析</a>中已经详细写了system_server的创建过程,这里就不多说了,主要说一下system_server主要做了哪些事.</p><h2 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h2><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 切换runtime,即dalvik 还是 art</span>  SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.dalvik.vm.lib.2"</span><span class="token punctuation">,</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">vmLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化native service</span>  System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"android_servers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化系统context.</span>  <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  创建 system service manager.</span>  mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setStartInfo</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">,</span>  mRuntimeStartElapsedTime<span class="token punctuation">,</span> mRuntimeStartUptime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Prepare the thread pool for init tasks that can be parallelized</span>  SystemServerInitThreadPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 启动service</span>  <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从上面的代码可以看出来,system_server主要做了下面这些事:</p><ol><li>加载libandroid_servers.so</li><li>创建系统Context</li><li>创建SystemServiceManager,并添加到LocalServices中</li><li>依次启动启动服务,核心服务,和一些其他服务</li><li>在当前线程开启Looper机制</li></ol><h2 id="加载libandroid-servers-so"><a href="#加载libandroid-servers-so" class="headerlink" title="加载libandroid_servers.so"></a>加载libandroid_servers.so</h2><p>查看<code>frameworks/base/services/Android.bp</code>:</p><pre class=" language-bp"><code class="language-bp">cc_library_shared {    name: "libandroid_servers",    defaults: ["libservices.core-libs"],    whole_static_libs: ["libservices.core"],}</code></pre><p>可知<code>libservices.core</code>中的所有内容会链接到libandroid_servers中,而 <code>libservices.core</code>在<code>frameworks/base/services/core/jni/</code>下多个JNI文件:</p><pre class=" language-bp"><code class="language-bp">cc_library_static {    name: "libservices.core",    defaults: ["libservices.core-libs"],    srcs: [        "BroadcastRadio/JavaRef.cpp",        "BroadcastRadio/NativeCallbackThread.cpp",        "BroadcastRadio/BroadcastRadioService.cpp",        "BroadcastRadio/Tuner.cpp",        "BroadcastRadio/TunerCallback.cpp",        "BroadcastRadio/convert.cpp",        "BroadcastRadio/regions.cpp",        "com_android_server_AlarmManagerService.cpp",        "com_android_server_adb_AdbDebuggingManager.cpp",        "com_android_server_am_BatteryStatsService.cpp",        "com_android_server_connectivity_Vpn.cpp",        "com_android_server_ConsumerIrService.cpp",        "com_android_server_devicepolicy_CryptoTestHelper.cpp",        "com_android_server_HardwarePropertiesManagerService.cpp",        "com_android_server_input_InputManagerService.cpp",        "com_android_server_lights_LightsService.cpp",        "com_android_server_location_GnssLocationProvider.cpp",        "com_android_server_locksettings_SyntheticPasswordManager.cpp",        "com_android_server_net_NetworkStatsService.cpp",        "com_android_server_power_PowerManagerService.cpp",        "com_android_server_security_VerityUtils.cpp",        "com_android_server_SerialService.cpp",        "com_android_server_storage_AppFuseBridge.cpp",        "com_android_server_SystemServer.cpp",        "com_android_server_TestNetworkService.cpp",        "com_android_server_tv_TvUinputBridge.cpp",        "com_android_server_tv_TvInputHal.cpp",        "com_android_server_vr_VrManagerService.cpp",        "com_android_server_UsbAlsaJackDetector.cpp",        "com_android_server_UsbDeviceManager.cpp",        "com_android_server_UsbDescriptorParser.cpp",        "com_android_server_UsbMidiDevice.cpp",        "com_android_server_UsbHostManager.cpp",        "com_android_server_VibratorService.cpp",        "com_android_server_PersistentDataBlockService.cpp",        "com_android_server_GraphicsStatsService.cpp",        "com_android_server_am_AppCompactor.cpp",        "com_android_server_am_LowMemDetector.cpp",        "onload.cpp",        ":lib_networkStatsFactory_native",    ],    include_dirs: [        "frameworks/base/libs",        "frameworks/native/services",        "system/gatekeeper/include",    ],    header_libs: [        "bionic_libc_platform_headers",    ],}cc_defaults {    name: "libservices.core-libs",    shared_libs: [        "libadb_pairing_server",        "libadb_pairing_connection",        "libandroid_runtime",        "libandroidfw",        "libaudioclient",        "libbase",        "libappfuse",        "libbinder",        "libcutils",        "libcrypto",        "liblog",        "libhardware",        "libhardware_legacy",        "libhidlbase",        "libkeystore_binder",        "libmtp",        "libnativehelper",        "libutils",        "libui",        "libinput",        "libinputflinger",        "libinputflinger_base",        "libinputservice",        "libschedulerservicehidl",        "libsensorservice",        "libsensorservicehidl",        "libstatshidl",    "libgui",        "libusbhost",        "libtinyalsa",        "libEGL",        "libGLESv2",        "libnetutils",        "libhidlbase",        "libutils",        "libhwui",        "libbpf_android",        "libnetdbpf",        "libnetdutils",        "libpsi",        "android.hardware.audio.common@2.0",        "android.hardware.broadcastradio@1.0",        "android.hardware.broadcastradio@1.1",        "android.hardware.contexthub@1.0",        "android.hardware.gnss@1.0",        "android.hardware.gnss@1.1",        "android.hardware.gnss@2.0",        "android.hardware.gnss.measurement_corrections@1.0",        "android.hardware.gnss.visibility_control@1.0",        "android.hardware.input.classifier@1.0",        "android.hardware.ir@1.0",        "android.hardware.light@2.0",        "android.hardware.power@1.0",        "android.hardware.power@1.1",        "android.hardware.power.stats@1.0",        "android.hardware.thermal@1.0",        "android.hardware.tv.input@1.0",        "android.hardware.vibrator-cpp",        "android.hardware.vibrator@1.0",        "android.hardware.vibrator@1.1",        "android.hardware.vibrator@1.2",        "android.hardware.vibrator@1.3",        "android.hardware.vr@1.0",        "android.frameworks.schedulerservice@1.0",        "android.frameworks.sensorservice@1.0",        "android.frameworks.stats@1.0",    "android.system.suspend@1.0",        "suspend_control_aidl_interface-cpp",    ],    static_libs: [        "android.hardware.broadcastradio@common-utils-1x-lib",    ],    product_variables: {        arc: {            shared_libs: [                "libarcbridge",                "libarcbridgeservice",                "libarctimer",                "libbase",                "libcap",                "libchrome",                "libmojo",            ],        }    }}</code></pre><p>因此,这个so其实包含了<code>frameworks/base/services/core/jni/</code>下的内容.并且依赖了一些基础的so文件.</p><h2 id="创建SystemContext-和SystemUiContext"><a href="#创建SystemContext-和SystemUiContext" class="headerlink" title="创建SystemContext 和SystemUiContext"></a>创建SystemContext 和SystemUiContext</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActivityThread activityThread <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">systemMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mSystemContext <span class="token operator">=</span> activityThread<span class="token punctuation">.</span><span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mSystemContext<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>DEFAULT_SYSTEM_THEME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Context systemUiContext <span class="token operator">=</span> activityThread<span class="token punctuation">.</span><span class="token function">getSystemUiContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemUiContext<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>DEFAULT_SYSTEM_THEME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>笼统的说,这个方法主要就是为了创建SystemContext和SystemUiContext.<br><strong>SystemContext和SystemUiContext都是<code>ContextImpl</code>对象,并且都是单例.</strong><br>这里创建的SystemContext与SystemUiContext共享相同的LoadedApk,即context中的packageInfo.</p><p>这里创建ActivityThread的时候,会判断机型,如果是低端机,就禁止使用Thread Renderer:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ActivityThread <span class="token function">systemMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The system process on low-memory devices do not get to use hardware</span>        <span class="token comment" spellcheck="true">// accelerated drawing, since this can add too much overhead to the</span>        <span class="token comment" spellcheck="true">// process.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ActivityManager<span class="token punctuation">.</span><span class="token function">isHighEndGfx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadedRenderer<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ThreadedRenderer<span class="token punctuation">.</span><span class="token function">enableForegroundTrimming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>attach的过程如下:</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> system<span class="token punctuation">,</span> <span class="token keyword">long</span> startSeq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sCurrentActivityThread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        mSystemThread <span class="token operator">=</span> system<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>system<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非system进程时执行这个分支</span>            android<span class="token punctuation">.</span>ddm<span class="token punctuation">.</span>DdmHandleAppName<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"&lt;pre-initialized>"</span><span class="token punctuation">,</span>                                                    UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RuntimeInit<span class="token punctuation">.</span><span class="token function">setApplicationObject</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mgr<span class="token punctuation">.</span><span class="token function">attachApplication</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Watch for getting close to heap limit.</span>            BinderInternal<span class="token punctuation">.</span><span class="token function">addGcWatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mSomeActivitiesChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> dalvikMax <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> dalvikUsed <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dalvikUsed <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>dalvikMax<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_MEMORY_TRIM<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Dalvik max="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dalvikMax<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span>                                <span class="token operator">+</span> <span class="token string">" total="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span>                                <span class="token operator">+</span> <span class="token string">" used="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dalvikUsed<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mSomeActivitiesChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            ActivityTaskManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">releaseSomeActivities</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// system_server进程时执行这个分支</span>            android<span class="token punctuation">.</span>ddm<span class="token punctuation">.</span>DdmHandleAppName<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"system_process"</span><span class="token punctuation">,</span>                    UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">basicInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                mInitialApplication <span class="token operator">=</span> context<span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                        <span class="token string">"Unable to instantiate Application():"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ViewRootImpl<span class="token punctuation">.</span>ConfigChangedCallback configChangedCallback                <span class="token operator">=</span> <span class="token punctuation">(</span>Configuration globalConfig<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// We need to apply this change to the resources immediately, because upon returning</span>                <span class="token comment" spellcheck="true">// the view hierarchy will be informed about it.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">.</span><span class="token function">applyConfigurationToResourcesLocked</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* compat */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">updateLocaleListFromAppContext</span><span class="token punctuation">(</span>mInitialApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            mResourcesManager<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// This actually changed the resources! Tell everyone about it.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingConfiguration <span class="token operator">==</span> null                            <span class="token operator">||</span> mPendingConfiguration<span class="token punctuation">.</span><span class="token function">isOtherSeqNewer</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPendingConfiguration <span class="token operator">=</span> globalConfig<span class="token punctuation">;</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>CONFIGURATION_CHANGED<span class="token punctuation">,</span> globalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ViewRootImpl<span class="token punctuation">.</span><span class="token function">addConfigCallback</span><span class="token punctuation">(</span>configChangedCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ActiviyThread的主要作用是:</p><ul><li>管理应用进程的主线程执行</li><li>调度,执行activity,broadcast和其他操作</li></ul><p>attach的这个操作会创建一个AppContext(其实也是ContextImpl对象),并通过LoadedApk创建一个默认的Application(android.app.Application).</p><h2 id="创建SystemServiceManager"><a href="#创建SystemServiceManager" class="headerlink" title="创建SystemServiceManager"></a>创建SystemServiceManager</h2><p>创建SystemServiceManager,然后将其添加到一个Map中,后续统一处理.</p><h2 id="启动各种服务"><a href="#启动各种服务" class="headerlink" title="启动各种服务"></a>启动各种服务</h2><p>分成三类服务:</p><ul><li>BootStrap</li><li>Core</li><li>Other</li></ul><p>所有服务均是SystemService的实现类,通过SystemServiceManager启动服务的时候,会调用service的onStart()方法启动服务.</p><h2 id="Bootstrap-Service"><a href="#Bootstrap-Service" class="headerlink" title="Bootstrap Service"></a>Bootstrap Service</h2><ul><li>WatchDog<br>其实就是一个Thread对象,当启动过程中发生死锁,可以使system_server崩溃</li><li>Installer<br>使用之前创建的SystemServiceManager对象启动Installer Service.<br>Installer service在启动的时候会通过Binder机制请求installd(一个守护进程,用于安装apk)</li><li>DeviceIdentifiersPolicyService<br>定义访问设备标识符的策略</li><li>UriGrantsManagerService.LifeCyle<br>管理Uri授权</li><li>ActivityTaskManagerService.Lifecycle<br>管理Activity和Activity的容器,比如task, stacks, displays等</li><li>ActivityManagerService</li><li>PowerManagerService</li><li>ThermalManagerService</li><li>RecoverySystemService</li><li>LightsService</li><li>SidekickService</li><li>DisplayManagerService</li><li>UserManagerService</li><li>OverlayManagerService</li><li>SensorPrivacyService</li></ul><h2 id="Core-Service"><a href="#Core-Service" class="headerlink" title="Core Service"></a>Core Service</h2><ul><li>BatteryService</li><li>UsageStatsService</li><li>WebViewUpdateService</li><li>CachedDeviceStateService</li><li>BinderCallsStatsService.LifeCycle</li><li>RollbackManagerService</li><li>BugreportManagerService</li><li>GpuService</li></ul><h2 id="Other-Service"><a href="#Other-Service" class="headerlink" title="Other Service"></a>Other Service</h2><ul><li>VibratorService</li><li>DynamicSystemService</li><li>NetworkManagementService</li><li>IpSecService</li><li>NetworkStatsService</li><li>NetworkPolicyManagerService</li><li>ConnectivityService</li><li>NsdService</li><li>WindowManagerService</li><li>SerialService</li><li>NetworkTimeUpdateService</li><li>InputManagerService</li><li>ConsumerIrService</li><li>HardwarePropertiesManagerService</li><li>UiModeManagerService</li><li>ContentCaptureService</li><li>AttentionService</li><li>SystemCaptionsManagerService</li><li>AdbService</li><li>PermissionPolicyService<br>…</li></ul><p>在启动Other类服务的最后阶段会执行<code>mActivityManagerService.systemReady()</code><br>这个方法中会执行一些方法的systemReady方法,并启动System UI.</p><h2 id="启动System-UI"><a href="#启动System-UI" class="headerlink" title="启动System UI"></a>启动System UI</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startSystemUi</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> WindowManagerService windowManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"com.android.systemui"</span><span class="token punctuation">,</span>                <span class="token string">"com.android.systemui.SystemUIService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_DEBUG_TRIAGED_MISSING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Slog.d(TAG, "Starting service: " + intent);</span>        context<span class="token punctuation">.</span><span class="token function">startServiceAsUser</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>SYSTEM<span class="token punctuation">)</span><span class="token punctuation">;</span>        windowManager<span class="token punctuation">.</span><span class="token function">onSystemUiStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>有关System UI相关的内容可以参考:</p><ul><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/packages/SystemUI/README.md" target="_blank" rel="noopener">SystemUI</a></li><li><a href="https://source.android.com/devices/automotive/hmi/system_ui" target="_blank" rel="noopener">实现System UI</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
            <tag> SystemServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VSCode阅读Android源码</title>
      <link href="/2020/06/25/android/shi-yong-vscode-yue-du-android-yuan-ma/"/>
      <url>/2020/06/25/android/shi-yong-vscode-yue-du-android-yuan-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/vscode-aosp.png" alt="image-20200623155208434"></p><p>在VSCode 中 ,打开命令面板进行编辑,可以使用UI页面编辑,也可以直接编辑json文件.</p><p>主要就是includePath,把主要的头文件路径都包含进去:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Mac"</span><span class="token punctuation">,</span>            <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${workspaceFolder}/frameworks/base/core/jni/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/libs/androidfw/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/libs/services/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/libs/storage/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/libs/protoutil/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/libs/incident/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/base/native/android/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/frameworks/native/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/hardware/libhardware/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/system/core/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/libnativehelper/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/libnativehelper/header_only_include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/libnativehelper/include_jni"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/art/libnativeloader/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/bionic/libstdc++/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/bionic/libc/include"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/**"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"macFrameworkPath"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/clang++"</span><span class="token punctuation">,</span>            <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c11"</span><span class="token punctuation">,</span>            <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"gnu++14"</span><span class="token punctuation">,</span>            <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"clang-x64"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOSP </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOSP构建-Android.bp的理解</title>
      <link href="/2020/06/25/android/aosp-gou-jian-android-bp-de-li-jie/"/>
      <url>/2020/06/25/android/aosp-gou-jian-android-bp-de-li-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>C/C++是一种非常古老的编程语言,在大型项目开发管理过程中,单靠MAKE,CMAKE等工具已经不满足需求了,因此催生出了各种个样的构建工具,比如Google自家的GN,Bazel等,还有CMake,XMake,Vcpkg等.工具虽然多种多样,但是要解决问题是一样的,思路也大同小异.</p></blockquote><p>从Android 7.0开始,ASOP开始引入Soong构建系统,用来替换之前的Make.<br>Soong使用bp文件来描述构建:</p><pre class=" language-bp"><code class="language-bp">cc_library_shared {     name: “libxmlrpc++”,     rtti: true,     cppflags: [           “-Wall”,           “-Werror”,           “-fexceptions”,     ],     export_include_dirs: [“src”],     srcs: [“src/**/*.cpp”],     target: {           darwin: {                enabled: false,           },     },}</code></pre><p>这个语法和Google的GN,Bazel有点像.</p><h2 id="Android-bp-文件格式"><a href="#Android-bp-文件格式" class="headerlink" title="Android.bp 文件格式"></a>Android.bp 文件格式</h2><p>bp文件中不包含任何条件语句和控制语句,所有复杂的问题都由Go编写逻辑处理.</p><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块/Module"></a>模块/Module</h2><p>Android.bp中的模块都以模块类型开头,模块类型有很多,具体的参考<a href="https://ci.android.com/builds/submitted/6627398/linux/latest/view/soong_build.html" target="_blank" rel="noopener">Soong模块类型</a>.</p><pre class=" language-bp"><code class="language-bp">cc_binary {    name: "gzip",    srcs: ["src/test/minigzip.c"],    shared_libs: ["libz"],    stl: "none",}</code></pre><p>每个模块下都必须有一个唯一的name属性,不同的模块类型下面的属性各不相同,还比价灵活.后面总结下一些常见的模块和它的属性.</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>对于C++模块来说,我们一般关注三种类型:</p><ul><li><p>cc_binary<br>即二进制执行文件</p><pre class=" language-bp"><code class="language-bp">cc_binary {  name: "android.hardware.biometrics.fingerprint@2.1-service",  defaults: ["hidl_defaults"],  init_rc: ["android.hardware.biometrics.fingerprint@2.1-service.rc"],  vintf_fragments: ["android.hardware.biometrics.fingerprint@2.1-service.xml"],  vendor: true,  relative_install_path: "hw",  srcs: [      "BiometricsFingerprint.cpp",      "service.cpp",  ],  shared_libs: [      "libcutils",      "liblog",      "libhidlbase",      "libhardware",      "libutils",      "android.hardware.biometrics.fingerprint@2.1",  ],}</code></pre><p>srcs: 表示模块包含的源文件<br>init_rc : 表示如果该模块被安装,这些rc配置文件也会被安装<br>shared_lib : 表示会被链接到该模块的动态链接库<br>vendor: 模块是否与特定的SOC有关<br>relative_install_path: 安装到默认安装目录的子目录</p></li><li><p>cc_library_shared<br>动态链接库</p></li><li><p>cc_library_static<br>静态链接库</p></li></ul><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ul><li>android_app</li><li>java_library</li></ul><h2 id="默认模块"><a href="#默认模块" class="headerlink" title="默认模块"></a>默认模块</h2><p>默认模块可用于在多个模块中重复使用相同的属性。例如：</p><pre><code>cc_defaults {    name: &quot;gzip_defaults&quot;,    shared_libs: [&quot;libz&quot;],    stl: &quot;none&quot;,}cc_binary {    name: &quot;gzip&quot;,    defaults: [&quot;gzip_defaults&quot;],    srcs: [&quot;src/test/minigzip.c&quot;],}</code></pre><h2 id="预编译的模块"><a href="#预编译的模块" class="headerlink" title="预编译的模块"></a>预编译的模块</h2><p>某些预编译的模块name与源码中模块的name相同.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>遇到不清楚的属性,模块类型,直接查文档就行</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> AOSP </tag>
            
            <tag> Android.bp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程-Zygote分析</title>
      <link href="/2020/06/25/android/android-xi-tong-qi-dong-liu-cheng-zygote-fen-xi/"/>
      <url>/2020/06/25/android/android-xi-tong-qi-dong-liu-cheng-zygote-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>zygote是通过app_process或者app_process64命令行程序启动的.</p><p>先来看下app_process的流程:</p><h2 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    AppRuntime <span class="token function">runtime</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">computeArgBlockSize</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>zygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>        runtime<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"com.android.internal.os.ZygoteInit"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> zygote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        runtime<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"com.android.internal.os.RuntimeInit"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> zygote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error: no class name or --zygote supplied.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">app_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LOG_ALWAYS_FATAL</span><span class="token punctuation">(</span><span class="token string">"app_process: no class name or --zygote supplied."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>strdup():返回一个字符串指针,指向新复制的字符串</p><p> int strncmp ( const char * str1, const char * str2, size_t n ): 比较两个字符串的前n个字符,如果相等,则返回0</p></blockquote><p>app_process 根据传入参数不同分为两种模式:</p><ul><li><p>zygote模式,用于启动zygote进程<br>传入–zygote</p></li><li><p>非zygote模式,用于启动普通的java程序<br>比如常用的adb shell 下的命令,如am,monkey,appwidget等:</p><pre class=" language-shell"><code class="language-shell">#!/system/bin/shif [ "$1" != "instrument" ] ; then    cmd activity "$@"else    base=/system    export CLASSPATH=$base/framework/am.jar    exec app_process $base/bin com.android.commands.am.Am "$@"fi</code></pre></li></ul><p>系统启动的时候,我们分析zygote模式.</p><p>实际上不管哪个模式,都会执行<code>AndroidRuntime::start()</code>方法,区别是传入的启动类不同:</p><h2 id="AndroidRuntime"><a href="#AndroidRuntime" class="headerlink" title="AndroidRuntime"></a>AndroidRuntime</h2><pre class=" language-cpp"><code class="language-cpp">JavaVM<span class="token operator">*</span> AndroidRuntime<span class="token operator">::</span>mJavaVM <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">void</span> AndroidRuntime<span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> className<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector<span class="token operator">&lt;</span>String8<span class="token operator">></span><span class="token operator">&amp;</span> options<span class="token punctuation">,</span> <span class="token keyword">bool</span> zygote<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 启动虚拟机 */</span>    JniInvocation jni_invocation<span class="token punctuation">;</span>    jni_invocation<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JNIEnv<span class="token operator">*</span> env<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startVm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mJavaVM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span> zygote<span class="token punctuation">,</span> primary_zygote<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">onVmCreated</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * 注册Android Native JNI方法     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startReg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Unable to register all android natives\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 找到要启动的类,执行它的main()方法     */</span>    jclass <span class="token class-name">stringClass</span><span class="token punctuation">;</span>    jobjectArray strArray<span class="token punctuation">;</span>    jstring classNameStr<span class="token punctuation">;</span>    stringClass <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span><span class="token string">"java/lang/String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>stringClass <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    strArray <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewObjectArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> stringClass<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>strArray <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    classNameStr <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>classNameStr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    env<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetObjectArrayElement</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classNameStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jstring optionsStr <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>optionsStr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetObjectArrayElement</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> optionsStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 当前线程是VM的主线程,当VM销毁时线程才会退出      */</span>    <span class="token keyword">char</span><span class="token operator">*</span> slashClassName <span class="token operator">=</span> <span class="token function">toSlashClassName</span><span class="token punctuation">(</span>className <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">?</span> className <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jclass <span class="token class-name">startClass</span> <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">FindClass</span><span class="token punctuation">(</span>slashClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>startClass <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"JavaVM unable to locate class '%s'\n"</span><span class="token punctuation">,</span> slashClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* keep going */</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        jmethodID startMeth <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span>            <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startMeth <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"JavaVM unable to find main() in '%s'\n"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* keep going */</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里是真实调用main()方法的地方</span>            env<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> startMeth<span class="token punctuation">,</span> strArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">threadExitUncaughtException</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>slashClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"Shutting down VM\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mJavaVM<span class="token operator">-</span><span class="token operator">></span><span class="token function">DetachCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> JNI_OK<span class="token punctuation">)</span>        <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Warning: unable to detach main thread\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mJavaVM<span class="token operator">-</span><span class="token operator">></span><span class="token function">DestroyJavaVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Warning: VM did not shut down cleanly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AndroidRuntime启动过程主要做了三件事:</p><ul><li>启动Android虚拟机,即ART Runtime</li><li>注册一些内置的Native方法(JNI)</li><li>通过JNI调用执行<code>ZygoteInit</code>的<code>main()</code>方法</li></ul><p>虚拟机是如何启动的,Native方法是如何注册的,这里暂时不分析,重点关注Zygote进程的启动.</p><h2 id="ZygoteInit-main"><a href="#ZygoteInit-main" class="headerlink" title="ZygoteInit#main()"></a>ZygoteInit#main()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteServer zygoteServer <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用程序自己的进程id和进程组id</span>        Os<span class="token punctuation">.</span><span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable caller<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enableLazyPreload<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">preload</span><span class="token punctuation">(</span>bootTimingsTraceLog<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">gcAndFinalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Zygote<span class="token punctuation">.</span><span class="token function">initNativeState</span><span class="token punctuation">(</span>isPrimaryZygote<span class="token punctuation">)</span><span class="token punctuation">;</span>            zygoteServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteServer</span><span class="token punctuation">(</span>isPrimaryZygote<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>startSystemServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为fork system_server进程初始化一些参数</span>                Runnable r <span class="token operator">=</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>abiList<span class="token punctuation">,</span> zygoteSocketName<span class="token punctuation">,</span> zygoteServer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// zygote进程中r== null,不会执行下面的代码</span>                <span class="token comment" spellcheck="true">// system_server 进程r != null,会执行下面的代码</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Accepting command socket connections"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// The select loop returns early in the child process after a fork and</span>            <span class="token comment" spellcheck="true">// loops forever in the zygote.</span>            caller <span class="token operator">=</span> zygoteServer<span class="token punctuation">.</span><span class="token function">runSelectLoop</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"System zygote died with exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>zygoteServer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                zygoteServer<span class="token punctuation">.</span><span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We're in the child process and have exited the select loop. Proceed to execute the</span>        <span class="token comment" spellcheck="true">// command.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            caller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要做以下几件事:</p><ul><li>创建ZygoteServer,利用local socket + file descriptor 机制响应应用的fork请求</li><li>预加载一些jar包中的class,classloader,一诶Android资源,共享库,图形驱动等</li><li>启动完之后运行几次GC清理下资源</li><li>从Zygote进程中使用fork方式创建system server进程</li></ul><p>Local socket  + fd 这一套机制暂时还不熟悉,后面再总结一下.</p><p>预加载的有以下内容:</p><ul><li><p>/system/etc/preloaded-classes 文件中记录的类</p><p>包括Android Framework中的类,通过<code>Class.forName(className,true,null)</code>加载</p></li><li><p>缓存一些非启动类的classloader</p><p>比如HIDL和Android test相关的</p></li><li><p>公共资源,让所有进程可以共享</p><ul><li><p>com.android.internal.R.array.preloaded_drawables 中的内容</p></li><li><p>com.android.internal.R.array.preloaded_color_state_lists</p></li><li><p>com.android.internal.R.bool.config_freeformWindowManagement</p></li></ul></li><li><p>HAL库</p></li><li><p>图像库驱动,比如OpenGL 或者 Vulkan驱动</p></li><li><p>加载共享的动态库</p><ul><li>libandroid.so</li><li>libcompiler_rt.so</li><li>libjnigraphics.so</li></ul></li><li><p>TextView的字体资源</p></li><li><p>WebView相关的so库,libwebviewchromium_loader.so</p></li></ul><h2 id="创建system-server进程"><a href="#创建system-server进程" class="headerlink" title="创建system_server进程"></a>创建system_server进程</h2><p>在ZygoteInit##forSystemServer方法中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> Runnable <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>String abiList<span class="token punctuation">,</span> String socketName<span class="token punctuation">,</span>            ZygoteServer zygoteServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Hardcoded command line to start the system server */</span>        String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"--setuid=1000"</span><span class="token punctuation">,</span>                <span class="token string">"--setgid=1000"</span><span class="token punctuation">,</span>                <span class="token string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,"</span>                        <span class="token operator">+</span> <span class="token string">"1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011"</span><span class="token punctuation">,</span>                <span class="token string">"--capabilities="</span> <span class="token operator">+</span> capabilities <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> capabilities<span class="token punctuation">,</span>                <span class="token string">"--nice-name=system_server"</span><span class="token punctuation">,</span>                <span class="token string">"--runtime-args"</span><span class="token punctuation">,</span>                <span class="token string">"--target-sdk-version="</span> <span class="token operator">+</span> VMRuntime<span class="token punctuation">.</span>SDK_VERSION_CUR_DEVELOPMENT<span class="token punctuation">,</span>                <span class="token string">"com.android.server.SystemServer"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pid<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* Request to fork the system server process */</span>            pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkSystemServer</span><span class="token punctuation">(</span>                    parsedArgs<span class="token punctuation">.</span>mUid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGid<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mGids<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mRuntimeFlags<span class="token punctuation">,</span>                    null<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mPermittedCapabilities<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mEffectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* system_server进程执行 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasSecondZygote</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">waitForSecondaryZygote</span><span class="token punctuation">(</span>socketName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            zygoteServer<span class="token punctuation">.</span><span class="token function">closeServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到首先会初始化一些参数,比如uid,gid等.然后从Zygote进程利用fork方式创建system_server进程:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits<span class="token punctuation">,</span> <span class="token keyword">long</span> permittedCapabilities<span class="token punctuation">,</span> <span class="token keyword">long</span> effectiveCapabilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">preFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">nativeForkSystemServer</span><span class="token punctuation">(</span>                uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span>                permittedCapabilities<span class="token punctuation">,</span> effectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the Java Language thread priority to the default value for new apps.</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">postForkCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其中的native方式是一个JNI调用,源码在<code>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</code>中,所使用的还是localsocket + fd的那一套机制.</p><p>在system_server 创建成功之后,会执行<code>handleSystemServerProcess</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Finish remaining work for the newly forked system server process.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Runnable <span class="token function">handleSystemServerProcess</span><span class="token punctuation">(</span>ZygoteArguments parsedArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// set umask to 0077 so new files and directories will default to owner-only permissions.</span>        Os<span class="token punctuation">.</span><span class="token function">umask</span><span class="token punctuation">(</span>S_IRWXG <span class="token operator">|</span> S_IRWXO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置进程名为system_server</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// /system/framework 下面的jar包</span>        <span class="token keyword">final</span> String systemServerClasspath <span class="token operator">=</span> Os<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SYSTEMSERVERCLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemServerClasspath <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为这些jar执行dex opt,加快执行速度</span>            <span class="token function">performSystemServerDexOpt</span><span class="token punctuation">(</span>systemServerClasspath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 使用app_process64去执行命令:使用app_process64启动nicename进程</span>            WrapperInit<span class="token punctuation">.</span><span class="token function">execApplication</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                    VMRuntime<span class="token punctuation">.</span><span class="token function">getCurrentInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected return from WrapperInit.execApplication"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ClassLoader cl <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>systemServerClasspath <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 为哪些jar中的class创建PathClassLoader</span>                cl <span class="token operator">=</span> <span class="token function">createPathClassLoader</span><span class="token punctuation">(</span>systemServerClasspath<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*             * Pass the remaining arguments to SystemServer.             */</span>            <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">zygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mDisabledCompatChanges<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* should never reach here */</span>    <span class="token punctuation">}</span></code></pre><p>这里会设置进程的名字,dex opt 一些system_server相关的jar,并设置PathClassLoader,最终会执行到RuntimeInit中,并找到<br>SystemServer.java的main方法,并执行:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> Runnable <span class="token function">findStaticMain</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            cl <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Missing class when invoking static main "</span> <span class="token operator">+</span> className<span class="token punctuation">,</span>                    ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Method m<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Missing static main on "</span> <span class="token operator">+</span> className<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Problem getting static main on "</span> <span class="token operator">+</span> className<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> modifiers <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Main method is not public and static on "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * This throw gets caught in ZygoteInit.main(), which responds         * by invoking the exception's run() method. This arrangement         * clears up all the stack frames that were required in setting         * up the process.         */</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodAndArgsCaller</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这个时候system_server进程已经创建完毕,后面开始执行SystemServer中的一序列操作了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Zygote进程的入口其实在ZygoteInit中;</li><li>Zygote进程是通过app_process进程启动的</li><li>zygote fork出其他进程依赖了localsocket + fd的机制</li><li>在启动Zygote进程之前,会先启动虚拟机,然后注册一些Native/JNI方法</li><li>Android中每个进程都只有一个虚拟机,每个线程代表了着一个JNIEnv</li><li>Zygote可以说是第一个Java进程</li><li>system_server进程严格意义上并不是zygote主动启动的,而是创建zygote进程的过程中,一起fork出来的,只不过是zygote fork的.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
            <tag> Zygote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看进程和线程信息</title>
      <link href="/2020/06/24/android/linux-cha-kan-jin-cheng-he-xian-cheng-xin-xi/"/>
      <url>/2020/06/24/android/linux-cha-kan-jin-cheng-he-xian-cheng-xin-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><pre class=" language-shell"><code class="language-shell">ps -T -p <pid></code></pre><p>查看进程下所有线程信息</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><ul><li><p>查看整体线程情况</p><pre class=" language-shell"><code class="language-shell">top -H</code></pre></li><li><p>查看指定进程的线程运行情况</p><pre class=" language-shell"><code class="language-shell">top -H -p <pid></code></pre></li><li><p>查看当前活跃的进程</p><pre class=" language-shell"><code class="language-shell">top</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android启动流程-init进程分析</title>
      <link href="/2020/06/22/android/android-qi-dong-liu-cheng-init-jin-cheng-fen-xi/"/>
      <url>/2020/06/22/android/android-qi-dong-liu-cheng-init-jin-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于Android 10 源码分析</p></blockquote><p>之前在<a href="https://www.jiangkang.tech/2020/06/12/android/android-xi-tong-qi-dong-liu-cheng-fen-xi/">Android启动流程分析</a>中已经大致分析了一下Android系统启动的过程,这里回顾一下:</p><ol><li>上电,从Boot ROM中执行一段烧录好的代码加载bootloader</li><li>bootloader执行,引导加载并启动linux kernel</li><li>linux kernel启动,并创建第一个用户态的进程<code>init</code></li><li><code>init</code>进程解析<code>init.rc</code>并启动各种服务,包括通过<code>app_process</code>程序创建并启动Zygote进程和system server进程,这个阶段已经启动了虚拟机,进入了Java世界</li><li>system server进程会启动各种服务,包括AMS,WMS等</li><li>启动完成之后,发送广播通知</li></ol><p>这里来分析一下<code>init</code>进程的一些主要逻辑:</p><blockquote><p>强调一点,init就是一个普通的命令行程序,程序位置在<code>/system/core/init</code></p></blockquote><h2 id="入口-system-core-init-main-cpp"><a href="#入口-system-core-init-main-cpp" class="headerlink" title="入口:system/core/init/main.cpp"></a>入口:system/core/init/main.cpp</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// system/bin/ueventd入口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ueventd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ueventd_main</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 带参启动init</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"subcontext"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            android<span class="token operator">::</span>base<span class="token operator">::</span><span class="token function">InitLogging</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>android<span class="token operator">::</span>base<span class="token operator">::</span>KernelLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> BuiltinFunctionMap function_map<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">SubcontextMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>function_map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"selinux_setup"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">SetupSelinux</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"second_stage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">SecondStageMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不带参,默认启动init入口</span>    <span class="token keyword">return</span> <span class="token function">FirstStageMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>main(int argc, char** argv) ,其中argc是命令行参数的个数,默认为1,argv是传入的参数,argv[0]是程序的全路径名,arg[1]才是实际意义上的第一个参数.</p></blockquote><blockquote><p>strcmp(s1,s2)则是用来比较字符串的,如果s1 == s2,则返回0</p><p>basename(path),返回的是文件名,比如 “/system/bin/ueventd”,返回uevened</p></blockquote><p><code>ueventd</code>其实就是<code>init</code>进程的一个软连接,在<code>system/bin</code>中也可以看到,通过<code>ls -l</code>可以看到:</p><pre><code>lrwxr-xr-x  1 root   shell          4 2020-04-04 01:11 ueventd -&gt; init</code></pre><p>这个地方根据程序不同的执行方式,有三种入口:</p><ul><li>默认启动,执行<code>FirstStageMain(argc, argv)</code></li><li>启动<code>ueventd</code>程序,执行<code>ueventd_main(argc, argv)</code></li><li>带参启动<code>init</code>,执行<code>SubcontextMain(argc, argv, &amp;function_map);</code>,<code>SetupSelinux(argv)</code>,<code>SecondStageMain(argc, argv)</code>中的一个</li></ul><blockquote><p> 目前很多文章都说watchdogd进程也是init进程的软连接,但是在新版本的Android中,比如Android 10,watchdogd是一个独立的进程了,并不是init进程.</p></blockquote><p>先来看下<code>FirstStageMain</code></p><h2 id="第一阶段-FirstStageMain"><a href="#第一阶段-FirstStageMain" class="headerlink" title="第一阶段: FirstStageMain"></a>第一阶段: FirstStageMain</h2><p>源码在:<code>system/core/init/first_stage_init.cpp</code></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">FirstStageMain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">clearenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">,</span> _PATH_DEFPATH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Get the basic filesystem setup we need put together in the initramdisk</span>    <span class="token comment" spellcheck="true">// on / and then we'll let the rc file figure out the rest.</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/dev"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOSUID<span class="token punctuation">,</span> <span class="token string">"mode=0755"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/dev/socket"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token string">"/dev/pts"</span><span class="token punctuation">,</span> <span class="token string">"devpts"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token string">"/proc"</span><span class="token punctuation">,</span> <span class="token string">"proc"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hidepid=2,gid="</span> <span class="token function">MAKE_STR</span><span class="token punctuation">(</span>AID_READPROC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// root也只有只读权限</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">chmod</span><span class="token punctuation">(</span><span class="token string">"/proc/cmdline"</span><span class="token punctuation">,</span> <span class="token number">0440</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gid_t groups<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>AID_READPROC<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">setgroups</span><span class="token punctuation">(</span><span class="token function">arraysize</span><span class="token punctuation">(</span>groups<span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token string">"/sys"</span><span class="token punctuation">,</span> <span class="token string">"sysfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"selinuxfs"</span><span class="token punctuation">,</span> <span class="token string">"/sys/fs/selinux"</span><span class="token punctuation">,</span> <span class="token string">"selinuxfs"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/kmsg"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0600</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>WORLD_WRITABLE_KMSG<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/kmsg_debug"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0622</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/random"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This is needed for log wrapper, which gets called before ueventd runs.</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mknod</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span> S_IFCHR <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">,</span> <span class="token function">makedev</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/mnt"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOEXEC <span class="token operator">|</span> MS_NOSUID <span class="token operator">|</span> MS_NODEV<span class="token punctuation">,</span>                    <span class="token string">"mode=0755,uid=0,gid=1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/mnt/vendor"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"/mnt/product"</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/apex"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOEXEC <span class="token operator">|</span> MS_NOSUID <span class="token operator">|</span> MS_NODEV<span class="token punctuation">,</span>                    <span class="token string">"mode=0755,uid=0,gid=0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CHECKCALL</span><span class="token punctuation">(</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"tmpfs"</span><span class="token punctuation">,</span> <span class="token string">"/debug_ramdisk"</span><span class="token punctuation">,</span> <span class="token string">"tmpfs"</span><span class="token punctuation">,</span> MS_NOEXEC <span class="token operator">|</span> MS_NOSUID <span class="token operator">|</span> MS_NODEV<span class="token punctuation">,</span>                    <span class="token string">"mode=0755,uid=0,gid=0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetStdioToDevNull</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitKernelLogging</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"init first stage started!"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// execv方式执行 /system/bin/init selinux_setup</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> path <span class="token operator">=</span> <span class="token string">"/system/bin/init"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>path<span class="token punctuation">,</span> <span class="token string">"selinux_setup"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">execv</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>setenv():设置环境变量</p><p>mount():挂载文件系统:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// source是一个名字,target是挂载点,filesystemtype是文件系统类型</span><span class="token comment" spellcheck="true">// 文件系统类型有"btrfs", "ext4", "jfs", "xfs","vfat", "fuse", "tmpfs", "cgroup", "proc", "mqueue", "nfs", //"cifs","iso9660"等</span><span class="token keyword">int</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>target<span class="token punctuation">,</span>                 <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filesystemtype<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mountflags<span class="token punctuation">,</span>                 <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>mknod():Linux中创建字符设备文件或者块设备文件</p><p>tmpfs:一个基于内存的文件系统,断电后数据丢失</p><pre><code>ABCDA- 0， 表示十进制B－用户C－组用户D－其他用户---  -&gt; 0   (no excute , no write ,no read)--x  -&gt; 1   excute, (no write, no read)-w-  -&gt; 2   write -wx  -&gt; 3   write, excuter--  -&gt; 4   readr-x  -&gt; 5   read, excuterw-  -&gt; 6   read, write , rwx  -&gt; 7   read, write , excute</code></pre><p>0755:用户具有读/写/执行权限，组用户和其它用户具有读写权限</p></blockquote><p>可以看到这个阶段主要是挂载一些文件系统.并启动SELinux.</p><h2 id="启动SELinux"><a href="#启动SELinux" class="headerlink" title="启动SELinux"></a>启动SELinux</h2><p>这个过程中会执行:</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> path <span class="token operator">=</span> <span class="token string">"/system/bin/init"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>path<span class="token punctuation">,</span> <span class="token string">"second_stage"</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">execv</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后进入到init进程的第二个阶段</p><h2 id="第二阶段-SecondStageMain"><a href="#第二阶段-SecondStageMain" class="headerlink" title="第二阶段:SecondStageMain"></a>第二阶段:SecondStageMain</h2><p>在第一阶段的源码中有一饿SecondStageMain的方法调用,这个时候会进入第二个执行阶段:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">SecondStageMain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">LOG</span><span class="token punctuation">(</span>INFO<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"init second stage started!"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 会执行 /system/bin/init subcontext ....</span>    <span class="token function">InitializeSubcontext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为解析init.rc中的action和service做准备</span>    ActionManager<span class="token operator">&amp;</span> am <span class="token operator">=</span> ActionManager<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServiceList<span class="token operator">&amp;</span> sm <span class="token operator">=</span> ServiceList<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载init.rc</span>    <span class="token function">LoadBootScripts</span><span class="token punctuation">(</span>am<span class="token punctuation">,</span> sm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// cgroups:用于控制资源,cpuset相关</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>SetupCgroupsAction<span class="token punctuation">,</span> <span class="token string">"SetupCgroups"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>SetKptrRestrictAction<span class="token punctuation">,</span> <span class="token string">"SetKptrRestrict"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>TestPerfEventSelinuxAction<span class="token punctuation">,</span> <span class="token string">"TestPerfEventSelinux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这里会启动ueventd,</span>    am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"early-init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Queue an action that waits for coldboot done so we know ueventd has set up all of /dev...</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>wait_for_coldboot_done_action<span class="token punctuation">,</span> <span class="token string">"wait_for_coldboot_done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... so that we can start queuing up actions that require stuff from /dev.</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>MixHwrngIntoLinuxRngAction<span class="token punctuation">,</span> <span class="token string">"MixHwrngIntoLinuxRng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>SetMmapRndBitsAction<span class="token punctuation">,</span> <span class="token string">"SetMmapRndBits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Keychords keychords<span class="token punctuation">;</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token operator">&amp;</span>epoll<span class="token punctuation">,</span> <span class="token operator">&amp;</span>keychords<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> BuiltinArguments<span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Result<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> svc <span class="token operator">:</span> ServiceList<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    keychords<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>svc<span class="token operator">-</span><span class="token operator">></span><span class="token function">keycodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                keychords<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epoll<span class="token punctuation">,</span> HandleKeychord<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"KeychordInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Trigger all the boot actions to get us started.</span>    am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 充电模式下不挂载文件系统,也不启动核心系统服务</span>    std<span class="token operator">::</span>string bootmode <span class="token operator">=</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"ro.bootmode"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootmode <span class="token operator">==</span> <span class="token string">"charger"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"charger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        am<span class="token punctuation">.</span><span class="token function">QueueEventTrigger</span><span class="token punctuation">(</span><span class="token string">"late-init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Run all property triggers based on current state of the properties.</span>    am<span class="token punctuation">.</span><span class="token function">QueueBuiltinAction</span><span class="token punctuation">(</span>queue_property_triggers_action<span class="token punctuation">,</span> <span class="token string">"queue_property_triggers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到第二个阶段依次做了这些事:</p><ul><li><p>加载init.rc配置文件</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LoadBootScripts</span><span class="token punctuation">(</span>ActionManager<span class="token operator">&amp;</span> action_manager<span class="token punctuation">,</span> ServiceList<span class="token operator">&amp;</span> service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parser parser <span class="token operator">=</span> <span class="token function">CreateParser</span><span class="token punctuation">(</span>action_manager<span class="token punctuation">,</span> service_list<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>string bootscript <span class="token operator">=</span> <span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">"ro.boot.init_rc"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootscript<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/system/etc/init/hw/init.rc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/system/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/system/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// late_import is available only in Q and earlier release. As we don't</span>        <span class="token comment" spellcheck="true">// have system_ext in those versions, skip late_import for system_ext.</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/system_ext/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/product/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/product/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/odm/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/odm/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span><span class="token string">"/vendor/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            late_import_paths<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"/vendor/etc/init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        parser<span class="token punctuation">.</span><span class="token function">ParseConfig</span><span class="token punctuation">(</span>bootscript<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Parser <span class="token function">CreateParser</span><span class="token punctuation">(</span>ActionManager<span class="token operator">&amp;</span> action_manager<span class="token punctuation">,</span> ServiceList<span class="token operator">&amp;</span> service_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parser parser<span class="token punctuation">;</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">,</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ServiceParser<span class="token operator">></span><span class="token punctuation">(</span>                                               <span class="token operator">&amp;</span>service_list<span class="token punctuation">,</span> <span class="token function">GetSubcontext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token operator">::</span>nullopt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">,</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ActionParser<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>action_manager<span class="token punctuation">,</span> <span class="token function">GetSubcontext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parser<span class="token punctuation">.</span><span class="token function">AddSectionParser</span><span class="token punctuation">(</span><span class="token string">"import"</span><span class="token punctuation">,</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ImportParser<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> parser<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里会根据init.rc中的item类型创建对应的parser:</p><ul><li>ActionParser</li><li>ServiceParser</li><li>ImportParser</li></ul><p>在加载完init.rc文件之后,会加载/{system,vendor,odm}/etc/init/ 下(Android设备中的目录)的所有rc配置文件:</p><ul><li><p><code>/system/etc/init/</code> : 核心系统,比如SurfaceFlinger,MediaService,logd</p><pre><code>ITouch.rc                             hwservicemanager.rc            runtime_data.rcandroid.hidl.allocator@1.0-service.rc iGraphics.rc                   samba.rcatrace.rc                             incidentd.rc                   selinux_dmd.rcaudioserver.rc                        init.huawei.iaware.a15.rc      servicemanager.rcbalonglogcat.rc                       init.huawei.os.a15.rc          shex.rcblank_screen.rc                       init.huawei.os.common.rc       shutanim.rcbootanim.rc                           init.huawei.recovery.common.rc statsd.rcbootstat.rc                           init.system.rc                 storaged.rccameraserver.rc                       installd.rc                    surfaceflinger.rcdisplayengineserver.rc                keystore.rc                    thermal-daemon.rcdrmserver.rc                          lmkd.rc                        thermalservice.rcdubaid.rc                             logcatd_ext.rc                 tombstoned.rcdumpstate.rc                          logd.rc                        uncrypt.rcgatekeeperd.rc                        mdnsd.rc                       update_engine.rcgpuassistant.rc                       mediadrmserver.rc              usbd.rchealthd.rc                            mediaextractor.rc              vdc.rchilogcat.rc                           mediametrics.rc                vold.rchilogd.rc                             mediaserver.rc                 wait_for_keymaster.rchiview.rc                             mtpd.rc                        wificond.rchivrarserver.rc                       netd.rc                        xlogcat.rchwhfd.rc                              perfetto.rchwnffserver.rc                        racoon.rc</code></pre></li><li><p><code>/vendor/etc/init/</code>: SOC需要的核心功能和守护程序</p><pre><code>activity_recognition_service.rcandroid.hardware.bluetooth@1.0-service.rcandroid.hardware.cas@1.0-service.rcandroid.hardware.configstore@1.1-service.rcandroid.hardware.drm@1.0-service.rcandroid.hardware.drm@1.1-service.clearkey.rcandroid.hardware.drm@1.1-service.widevine.rcandroid.hardware.gatekeeper@1.0-service.rcandroid.hardware.graphics.allocator@2.0-service.rcandroid.hardware.graphics.composer@2.2-service.rcandroid.hardware.health@2.0-service.rcandroid.hardware.ir@1.0-service.rcandroid.hardware.keymaster@3.0-service.rcandroid.hardware.media.omx@1.0-service.rcandroid.hardware.memtrack@1.0-service.rcandroid.hardware.secure_element@1.0-service.rcandroid.hardware.thermal@1.0-service.rcandroid.hardware.usb@1.0-service.rcandroid.hardware.vr@1.0-service.rcaptouch_daemon.rcchargerconnectivityhinetmanager.rchisecd.rchwinit.audio.rcinit.balong_modem.rcinit.connectivity.rcinit.device.rcinit.extmodem.rcinit.hisi.rcinit.ko.rcinit.manufacture.rcinit.performance.rcinit.platform.rcinit.post-fs-data.rcinit.protocol.rcinit.tee.rcinit.vowifi.rcisplogcat.rcmodemchr_service.rcrecoveryrild.rcvendor.huawei.graphics.displayeffect@1.0-service.rcvendor.huawei.hardware.audio@4.0-service.rcvendor.huawei.hardware.biometrics.fingerprint@2.1-service.rcvendor.huawei.hardware.biometrics.hwfacerecognize@1.1-service.rcvendor.huawei.hardware.dolby.dms@1.0-service.rcvendor.huawei.hardware.fm@1.0-service.rcvendor.huawei.hardware.gnss@1.2-service.rcvendor.huawei.hardware.graphics.mediacomm@2.0-service.rcvendor.huawei.hardware.hisupl@1.0-service.rcvendor.huawei.hardware.hivrar@1.3-service.rcvendor.huawei.hardware.hwdisplay.displayengine@1.2-service.rcvendor.huawei.hardware.hwdisplay@1.0-service.rcvendor.huawei.hardware.hwfactoryinterface@1.1-service.rcvendor.huawei.hardware.hwfs@1.0-service.rcvendor.huawei.hardware.hwhiview@1.0-service.rcvendor.huawei.hardware.hwsecurity-service.rcvendor.huawei.hardware.hwupdate@1.0-service.rcvendor.huawei.hardware.hwvibrator@1.0-service.rcvendor.huawei.hardware.iawareperf@1.0-service.rcvendor.huawei.hardware.irsl@1.0-service.rcvendor.huawei.hardware.kds@1.0-service.rcvendor.huawei.hardware.libteec@2.0-service.rcvendor.huawei.hardware.light@2.0-service.rcvendor.huawei.hardware.nfc@1.0-service.rcvendor.huawei.hardware.otasimlock@1.0-service.rcvendor.huawei.hardware.otherdevices@1.0-service.rcvendor.huawei.hardware.perfgenius@2.0-service.rcvendor.huawei.hardware.power@1.0-service.rcvendor.huawei.hardware.sensors@1.0-service.rcvendor.huawei.hardware.tp@1.0-service.rcvendor.huawei.hardware.wifi@1.1-service.rcvndservicemanager.rc</code></pre></li><li><p><code>/odm/etc/init/</code> : 设备制造商使用,比如传感器和其他外设功能或者守护程序 </p><pre><code>init.hisi.odm.rc init.odm.rc</code></pre></li></ul></li></ul><ul><li><p>在触发early_int 之前,配置cgroup,kptr_restrict,perf等限制资源使用的工具</p><blockquote><p><a href="https://source.android.google.cn/devices/tech/perf/cgroups" target="_blank" rel="noopener">Cgroup 抽象层</a></p></blockquote></li><li><p>触发early init,创建一些文件目录,挂载一些文件系统等,并启动ueventd</p><pre><code>on early-init    start ueventd</code></pre></li><li><p>触发init,修改权限并挂载binderfs,启动logd.lmkd,servicemanager,hwservicemanager,vndservicemanager等</p><pre><code>on init    # Mount binderfs    mkdir /dev/binderfs    mount binder binder /dev/binderfs stats=global    chmod 0755 /dev/binderfs    symlink /dev/binderfs/binder /dev/binder    symlink /dev/binderfs/hwbinder /dev/hwbinder    symlink /dev/binderfs/vndbinder /dev/vndbinder    chmod 0666 /dev/binderfs/hwbinder    chmod 0666 /dev/binderfs/binder    chmod 0666 /dev/binderfs/vndbinder    # Start logd before any other services run to ensure we capture all of their logs.    start logd    # Start lmkd before any other services run so that it can register them    chown root system /sys/module/lowmemorykiller/parameters/adj    chmod 0664 /sys/module/lowmemorykiller/parameters/adj    chown root system /sys/module/lowmemorykiller/parameters/minfree    chmod 0664 /sys/module/lowmemorykiller/parameters/minfree    start lmkd    # Start essential services.    start servicemanager    start hwservicemanager    start vndservicemanager</code></pre><blockquote><p><a href="https://source.android.google.cn/devices/tech/perf/lmkd" target="_blank" rel="noopener">低内存终止守护进程 (lmkd)</a></p></blockquote><ul><li><p>挂载binderfs</p><p>Android的IPC机制是通过/dev节点从用户空间访问的.一般会分配三个节点:</p><ul><li>/dev/binder : 框架/应用进程之间的 IPC，使用 AIDL 接口</li><li>/dev/hwbinder : 框架/供应商进程之间的 IPC，使用 HIDL 接口<br>供应商进程之间的 IPC，使用 HIDL 接口</li><li>/dev/vndbinder :  供应商/供应商进程之间的 IPC，使用 AIDL 接口</li></ul></li><li><p>启动logd,即Android的日志进程</p></li><li><p>启动servicemanager,hwservicemanager,vndservicemanager</p><p>Android O之前,Binder服务通过servicemanager注册,Android O开始binder节点分成了三种,因此对应的servicemanager也分成了三种.</p></li><li><p>判断启动模式,如果是充电模式,在调用charger程序</p><p>charger是关机模式下执行的程序,用于显示充电动画,可参考<a href="https://source.android.com/devices/tech/health" target="_blank" rel="noopener">Android运行状况</a></p></li><li><p>正常模式下启动,则挂载文件系统,并启动核心系统服务</p><p>核心服务,即那些标记 <code>class core</code>的服务,比如init程序入口的ueventd:</p><pre><code>service ueventd /system/bin/ueventd    class core    critical    seclabel u:r:ueventd:s0    shutdown critical</code></pre><p>还有就是surfaceFlinger等:</p><pre><code>service surfaceflinger /system/bin/surfaceflinger    class core animation    user system    group graphics drmrpc readproc    onrestart restart zygote    onrestart restart gpuassistant    writepid /dev/stune/foreground/tasks    socket pdx/system/vr/display/client     stream 0666 system graphics u:object_r:pdx_display_client_endpoint_socket:s0    socket pdx/system/vr/display/manager    stream 0666 system graphics u:object_r:pdx_display_manager_endpoint_socket:s0    socket pdx/system/vr/display/vsync      stream 0666 system graphics u:object_r:pdx_display_vsync_endpoint_socket:s0</code></pre></li><li><p>启动zygote相关进程</p><p>late-init中会触发:</p><pre><code>    trigger zygote-start</code></pre><pre><code>on zygote-start &amp;&amp; property:ro.crypto.state=unencrypted    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted    start netd    start zygote    start zygote_secondaryon zygote-start &amp;&amp; property:ro.crypto.state=unsupported    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted    start netd    start zygote    start zygote_secondaryon zygote-start &amp;&amp; property:ro.crypto.state=encrypted &amp;&amp; property:ro.crypto.type=file    # A/B update verifier that marks a successful boot.    exec_start update_verifier_nonencrypted    start netd    start zygote    start zygote_secondary</code></pre><p>zygote_secondary是针对同时支持64位,32位架构的配置:</p><pre><code>service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    socket usap_pool_primary stream 660 root system    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasksservice zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload    class main    priority -20    user root    group root readproc reserved_disk    socket zygote_secondary stream 660 root system    socket usap_pool_secondary stream 660 root system    onrestart restart zygote    writepid /dev/cpuset/foreground/tasks</code></pre></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>init入口中包含5个分支:</p><ul><li><p>ueventd : 实际上就是init程序的软连接,在init.rc的early-init阶段启动</p></li><li><p>selinux_setup : FirstStageMain 中通过 <code>/system/bin/init selinux_setup</code> 启动</p></li><li><p>subcontext : SecondStageMain 中启动</p><pre class=" language-cpp"><code class="language-cpp">        <span class="token keyword">auto</span> init_path <span class="token operator">=</span> <span class="token function">GetExecutablePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> child_fd_string <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>child_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>init_path<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"subcontext"</span><span class="token punctuation">,</span> context_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              child_fd_string<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">execv</span><span class="token punctuation">(</span>init_path<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>second_stage : 在selinux_setp启动完之后执行</p></li><li><p>fisrt_stage : 默认首先执行</p></li></ul></li><li><p>第二个阶段,首先加载int.rc配置,然后再依次在Android设备中查找以下三种配置,并加载:</p><ul><li>/system/etc/init/</li><li>/vendor/etc/init/</li><li>/odm/etc/init/</li></ul></li><li><p>init.rc各个过程中会挂载文件系统,包括binderfs,创建各种文件目录,并分配权限</p></li><li><p>启动servce manager,Android O开始分成三种,对应三种binder节点,给不同的层使用</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
            <tag> Init </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS-Pinning</title>
      <link href="/2020/06/21/ji-chu/tls-pinning/"/>
      <url>/2020/06/21/ji-chu/tls-pinning/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SSL-TLS-Pinning"><a href="#什么是SSL-TLS-Pinning" class="headerlink" title="什么是SSL/TLS Pinning?"></a>什么是SSL/TLS Pinning?</h2><p>将服务端提供的TLS/SSL证书内置到移动端开发的APP客户端中,当客户端发起请求时,通过比对内置证书和服务器端证书的内容,以确定这个连接的合法性.</p><blockquote><p>我这里把Pinning翻译成“固定”</p></blockquote><p>Pinning 方式</p><ul><li>Certificate Pinning (证书固定)</li><li>Public Key Pinning (公钥固定)</li></ul><p>在Android中有下面这些具体的方式执行TLS固定:</p><h2 id="OkHttp中设置-TLS-Pinning"><a href="#OkHttp中设置-TLS-Pinning" class="headerlink" title="OkHttp中设置 TLS Pinning"></a>OkHttp中设置 TLS Pinning</h2><p>OkHttp中专门提供了对应的方法设置TLS Pinning:</p><pre class=" language-kotlin"><code class="language-kotlin">String hostname <span class="token operator">=</span> <span class="token string">"publicobject.com"</span><span class="token punctuation">;</span>CertificatePinner certificatePinner <span class="token operator">=</span> new CertificatePinner<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"publicobject.com"</span><span class="token punctuation">,</span> <span class="token string">"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"publicobject.com"</span><span class="token punctuation">,</span> <span class="token string">"sha256/klO23nT2ehFDXCfx3eHTDRESMz3asj1muO+4aIdjiuY="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"publicobject.com"</span><span class="token punctuation">,</span> <span class="token string">"sha256/grX4Ta9HpZx6tSHkmCrvpApTQGo67CYDnvprLg5yRME="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"publicobject.com"</span><span class="token punctuation">,</span> <span class="token string">"sha256/lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU="</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OkHttpClient client <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">certificatePinner</span><span class="token punctuation">(</span>certificatePinner<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Request request <span class="token operator">=</span> new Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://"</span> <span class="token operator">+</span> hostname<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以设置多个域名对应的sha256/base64编码的map,用于多版本兼容.</p><p>OkHttp中的CertificatePinner的原理是:</p><ul><li>将证书中的公钥进行SHA256加密,然后进行base64编码,得到一串与hostname对应的字符串</li><li>在建立TLS连接的时候与服务端获取的证书信息中的公钥,并进行SHA256编码,然后与通过base64解码之后的字节字符串进行对比</li></ul><p>简而言之,就是一用的是将公钥进行SHA256加密后进行对比.</p><p>之所以本地自己写的时候要用base64编码的字符串,当然是为了容易书写和比较.</p><h2 id="自定义TrustManager"><a href="#自定义TrustManager" class="headerlink" title="自定义TrustManager"></a>自定义TrustManager</h2><ol><li><p>使用<code>KeyStore</code>加载证书</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> inputStream <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">openRawResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>my_cert<span class="token punctuation">)</span><span class="token keyword">val</span> keyStoreType <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getDefaultType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> keyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>keyStoreType<span class="token punctuation">)</span>keyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></code></pre></li><li><p>创建一个TrustManager</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> tmfAlgorithm <span class="token operator">=</span> TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> trustManagerFactory <span class="token operator">=</span> TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>tmfAlgorithm<span class="token punctuation">)</span>trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyStore<span class="token punctuation">)</span></code></pre></li><li><p>创建SSLContext,并绑定上面创建的TrustManager对象,OKhttp中也可以自定义</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> sslContext <span class="token operator">=</span> SSLContext<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span>sslContext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> trustManagerFactory<span class="token punctuation">.</span>trustManagers<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">val</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.yourdomain.com/"</span><span class="token punctuation">)</span><span class="token keyword">val</span> urlConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HttpsURLConnectionurlConnection<span class="token punctuation">.</span>sslSocketFactory <span class="token operator">=</span> sslContext<span class="token punctuation">.</span>socketFactory</code></pre></li></ol><p>这种方式相当于上面所说的证书固定.会在客户端内置一个证书文件,但是这种方式对服务的证书更换和续期的限制比较大.</p><h2 id="Android7-0之后使用Network-Security-Config配置"><a href="#Android7-0之后使用Network-Security-Config配置" class="headerlink" title="Android7.0之后使用Network Security Config配置"></a>Android7.0之后使用Network Security Config配置</h2><ol><li><p>manifest文件中指定网络配置资源</p><pre class=" language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@xml/network_security_config<span class="token punctuation">"</span></span>                        <span class="token attr-name">...</span> <span class="token punctuation">></span></span>            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></li><li><p>网络安全配置:可以配置自定义信任的CA(缩小/拓展系统信任的CA列表),配置用于调试的CA,当然还有固定证书配置:</p><p>具体的文档在<a href="https://developer.android.com/training/articles/security-config?hl=zh-cn" target="_blank" rel="noopener">网络安全配置说明</a></p><pre class=" language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>domain-config</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>domain</span> <span class="token attr-name">includeSubdomains</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>domain</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pin-set</span> <span class="token attr-name">expiration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2018-01-01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pin</span> <span class="token attr-name">digest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SHA-256<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7HIpactkIAq2Y49orFOOQKurWxmmSFZhBCoQYcRhJ3Y=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pin</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- backup pin --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pin</span> <span class="token attr-name">digest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SHA-256<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>fwza0LRMXouZHRC8Ei+4PyuldPDcf3UKgO/04cDM1oE=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pin-set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>domain-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre><p>使用证书的公钥的SHA-256值经过base64编码后填入.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg简介</title>
      <link href="/2020/06/20/yin-shi-pin-kai-fa/ffmpeg-jian-jie/"/>
      <url>/2020/06/20/yin-shi-pin-kai-fa/ffmpeg-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="模块库"><a href="#模块库" class="headerlink" title="模块库"></a>模块库</h2><ul><li><p>avcodec</p><p>用于音视频编解码,支持自带的MPEG4,AAC,MJPEG等编码格式,还支持第三方的编解码,比如H.264(AVC,使用X264编解码器),H.265(HEVC,使用X265编解码器)</p></li><li><p>avdevice</p><p>多媒体设备输入输出</p></li><li><p>avfilter</p><p>滤镜特效</p></li><li><p>avformat</p><p>封装格式处理,包括封装/解封装,如MP4,FLV,TS等文件封装格式,RTMP,RTSP,HLS等网络协议封装格式,FFmpeg是否支持某种具体的格式,取决于编译时是否包含了该格式的封装库,当然你也可以定制封装格式并添加对应的支持.</p></li><li><p>avutil</p><p>工具库</p></li><li><p>swresample</p><p>音频转换计算模块,提供了高级别的音频重采样API</p></li><li><p>swscale</p><p>视频图像转换计算模块,提供了高级别的图像转换API,运行进行图像缩放和像素格式转换,比如将图像从1080p转换成720p,将图像数据从YUV转成RGB.</p></li></ul><h2 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h2><pre class=" language-shell"><code class="language-shell">ffmpeg -i input.mp4 output.avi</code></pre><p>这个命令会将input.mp4转换成avi格式;</p><p>当然也可以显示指定格式:</p><pre class=" language-shell"><code class="language-shell">ffmpeg -i input.mp4 -f avi output.avi</code></pre><p>效果是一样的.</p><p>这个命令会执行以下几个步骤:</p><ol><li>解封装(Demux)</li><li>解码(Decode)</li><li>编码(Encode)</li><li>封装(Mux)</li></ol><h2 id="ffplay"><a href="#ffplay" class="headerlink" title="ffplay"></a>ffplay</h2><p>用于测试音视频播放的程序,依赖于SDL.</p><p>比如播放一个测试视频:</p><pre class=" language-shell"><code class="language-shell">ffplay input.mp4</code></pre><h2 id="ffprobe"><a href="#ffprobe" class="headerlink" title="ffprobe"></a>ffprobe</h2><p>一个强大的多媒体分析工具.利用ffprobe可以从音视频文件或者流中获取一些信息,比如音视频参数,容器的参数,音频的格式,视频的格式,视频的总时长,码率等.</p><p>比如:</p><pre class=" language-shell"><code class="language-shell">ffprobe -show_streams bee.mp4</code></pre><p>会输出如下信息:</p><pre class=" language-shell"><code class="language-shell">Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'bee.mp4':  Metadata:    major_brand     : mp42    minor_version   : 0    compatible_brands: mp42mp41isomavc1    creation_time   : 2015-08-10T09:55:17.000000Z  Duration: 00:00:04.04, start: 0.000000, bitrate: 2562 kb/s    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1280x720 [SAR 1:1 DAR 16:9], 2407 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)    Metadata:      creation_time   : 2015-08-10T09:55:17.000000Z      handler_name    : L-SMASH Video Handler      encoder         : AVC Coding    Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 147 kb/s (default)    Metadata:      creation_time   : 2015-08-10T09:55:17.000000Z      handler_name    : L-SMASH Audio Handlerjiangkang@jkmac videos % ffprobe -show_streams bee.mp4ffprobe version 4.3 Copyright (c) 2007-2020 the FFmpeg developers  built with Apple clang version 11.0.3 (clang-1103.0.32.62)  configuration: --prefix=/usr/local/Cellar/ffmpeg/4.3_1 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librav1e --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librtmp --enable-libspeex --enable-libsoxr --enable-videotoolbox --disable-libjack --disable-indev=jack  libavutil      56. 51.100 / 56. 51.100  libavcodec     58. 91.100 / 58. 91.100  libavformat    58. 45.100 / 58. 45.100  libavdevice    58. 10.100 / 58. 10.100  libavfilter     7. 85.100 /  7. 85.100  libavresample   4.  0.  0 /  4.  0.  0  libswscale      5.  7.100 /  5.  7.100  libswresample   3.  7.100 /  3.  7.100  libpostproc    55.  7.100 / 55.  7.100Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'bee.mp4':  Metadata:    major_brand     : mp42    minor_version   : 0    compatible_brands: mp42mp41isomavc1    creation_time   : 2015-08-10T09:55:17.000000Z  Duration: 00:00:04.04, start: 0.000000, bitrate: 2562 kb/s    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(tv, bt709), 1280x720 [SAR 1:1 DAR 16:9], 2407 kb/s, 29.97 fps, 29.97 tbr, 30k tbn, 59.94 tbc (default)    Metadata:      creation_time   : 2015-08-10T09:55:17.000000Z      handler_name    : L-SMASH Video Handler      encoder         : AVC Coding    Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 147 kb/s (default)    Metadata:      creation_time   : 2015-08-10T09:55:17.000000Z      handler_name    : L-SMASH Audio Handler[STREAM]index=0codec_name=h264codec_long_name=H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10profile=Highcodec_type=videocodec_time_base=1001/60000codec_tag_string=avc1codec_tag=0x31637661width=1280height=720coded_width=1280coded_height=720closed_captions=0has_b_frames=2sample_aspect_ratio=1:1display_aspect_ratio=16:9pix_fmt=yuv420plevel=31color_range=tvcolor_space=bt709color_transfer=bt709color_primaries=bt709chroma_location=leftfield_order=unknowntimecode=N/Arefs=1is_avc=truenal_length_size=4id=N/Ar_frame_rate=30000/1001avg_frame_rate=30000/1001time_base=1/30000start_pts=0start_time=0.000000duration_ts=121100duration=4.036667bit_rate=2407163max_bit_rate=N/Abits_per_raw_sample=8nb_frames=121nb_read_frames=N/Anb_read_packets=N/ADISPOSITION:default=1DISPOSITION:dub=0DISPOSITION:original=0DISPOSITION:comment=0DISPOSITION:lyrics=0DISPOSITION:karaoke=0DISPOSITION:forced=0DISPOSITION:hearing_impaired=0DISPOSITION:visual_impaired=0DISPOSITION:clean_effects=0DISPOSITION:attached_pic=0DISPOSITION:timed_thumbnails=0TAG:creation_time=2015-08-10T09:55:17.000000ZTAG:language=undTAG:handler_name=L-SMASH Video HandlerTAG:encoder=AVC Coding[/STREAM][STREAM]index=1codec_name=aaccodec_long_name=AAC (Advanced Audio Coding)profile=LCcodec_type=audiocodec_time_base=1/48000codec_tag_string=mp4acodec_tag=0x6134706dsample_fmt=fltpsample_rate=48000channels=2channel_layout=stereobits_per_sample=0id=N/Ar_frame_rate=0/0avg_frame_rate=0/0time_base=1/48000start_pts=0start_time=0.000000duration_ts=193520duration=4.031667bit_rate=147714max_bit_rate=153472bits_per_raw_sample=N/Anb_frames=189nb_read_frames=N/Anb_read_packets=N/ADISPOSITION:default=1DISPOSITION:dub=0DISPOSITION:original=0DISPOSITION:comment=0DISPOSITION:lyrics=0DISPOSITION:karaoke=0DISPOSITION:forced=0DISPOSITION:hearing_impaired=0DISPOSITION:visual_impaired=0DISPOSITION:clean_effects=0DISPOSITION:attached_pic=0DISPOSITION:timed_thumbnails=0TAG:creation_time=2015-08-10T09:55:17.000000ZTAG:language=undTAG:handler_name=L-SMASH Audio Handler[/STREAM]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 音视频开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-自定义闪屏页(SplashScreen)</title>
      <link href="/2020/06/19/flutter/flutter-zi-ding-yi-shan-ping-ye-splashscreen/"/>
      <url>/2020/06/19/flutter/flutter-zi-ding-yi-shan-ping-ye-splashscreen/</url>
      
        <content type="html"><![CDATA[<h2 id="Splash-Screen"><a href="#Splash-Screen" class="headerlink" title="Splash Screen?"></a>Splash Screen?</h2><p>对于Android应用来说,Splash Screen最熟悉不过了.比如为了让启动的时候app不现实白屏,或者为了弄个开屏广告用来盈利,都会用到Splash Screen.</p><p><img src="https://oss.jiangkang.tech/jk/splash.gif" alt="splash"></p><h2 id="Flutter中如何自定义Splash页面"><a href="#Flutter中如何自定义Splash页面" class="headerlink" title="Flutter中如何自定义Splash页面"></a>Flutter中如何自定义Splash页面</h2><p>这里先说一个Android中最基础的:</p><h3 id="设置启动主题-并设置一个windowBackground"><a href="#设置启动主题-并设置一个windowBackground" class="headerlink" title="设置启动主题,并设置一个windowBackground"></a>设置启动主题,并设置一个windowBackground</h3><p>至于怎么设置主题,太简单了没什么好说的,贴个背景资源代码:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>opacity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opaque<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:color/white<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ic_launcher<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">></span></span></code></pre><p>可以看到这里用了一个白色背景和一个图片.</p><p><strong>在Flutter中,只设置这个是不够的</strong>,为什么?</p><p><strong>在MainActivity启动之后,Flutter中的UI数据加载之前</strong>这段时间里我们还得设置一个自定义的splash图或者页面,要不然很可能会导致黑屏.</p><p>这里也有很多种方法,主要说下经过源码分析之后得到的两种方案:</p><h3 id="manifest中通过meta-data设置一个splash资源"><a href="#manifest中通过meta-data设置一个splash资源" class="headerlink" title="manifest中通过meta-data设置一个splash资源"></a>manifest中通过<code>meta-data</code>设置一个splash资源</h3><pre class=" language-xml"><code class="language-xml">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>                <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.flutter.embedding.android.SplashScreenDrawable<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/splash_screen<span class="token punctuation">"</span></span>                <span class="token punctuation">/></span></span></code></pre><p>这个节点放到MainActivity节点下.</p><p>这样就会有在Flutter UI加载完之前显示一个过渡的图片了.</p><p>如果只是设置个图片,在实际产品中基本上没什么用,来看看正式一点的做法吧:</p><h3 id="自己实现SplashScreen接口"><a href="#自己实现SplashScreen接口" class="headerlink" title="自己实现SplashScreen接口"></a>自己实现<code>SplashScreen</code>接口</h3><p>这个接口很简单,就两个方法:</p><ul><li><code>createSplashView</code>:创建一个View用于展示Splash页面</li><li><code>transitionToFlutter</code>:过渡到Flutter</li></ul><p>代码也比较简单,我这里直接用代码手写一个Lotiie的基本布局:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jiangkang<span class="token punctuation">.</span>flutter_system<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Color<span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ColorDrawable<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Looper<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Gravity<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>FrameLayout<span class="token keyword">import</span> com<span class="token punctuation">.</span>airbnb<span class="token punctuation">.</span>lottie<span class="token punctuation">.</span>LottieAnimationView<span class="token keyword">import</span> com<span class="token punctuation">.</span>airbnb<span class="token punctuation">.</span>lottie<span class="token punctuation">.</span>LottieDrawable<span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>SplashScreen<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>random<span class="token punctuation">.</span>Random<span class="token comment" spellcheck="true">/** * A Splash Screen based lottie animation * it will pause 1s,then enter the main page */</span><span class="token keyword">class</span> LottieSplashScreen <span class="token operator">:</span> SplashScreen<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lottieRawIds <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie1<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie2<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie3<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie4<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie5<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie6<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie7<span class="token punctuation">,</span>            R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>lottie8    <span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">createSplashView</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> lottieView <span class="token operator">=</span> <span class="token function">LottieAnimationView</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        lottieView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            repeatMode <span class="token operator">=</span> LottieDrawable<span class="token punctuation">.</span>RESTART            repeatCount <span class="token operator">=</span> LottieDrawable<span class="token punctuation">.</span>INFINITE            <span class="token function">setAnimation</span><span class="token punctuation">(</span>lottieRawIds<span class="token punctuation">[</span><span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lottieRawIds<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">playAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span>context <span class="token keyword">as</span> Activity<span class="token punctuation">)</span><span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token function">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> layoutParamsLottie <span class="token operator">=</span> FrameLayout<span class="token punctuation">.</span><span class="token function">LayoutParams</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                    gravity <span class="token operator">=</span> Gravity<span class="token punctuation">.</span>CENTER                <span class="token punctuation">}</span>        <span class="token keyword">val</span> rootView <span class="token operator">=</span> <span class="token function">FrameLayout</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>        rootView<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            layoutParams <span class="token operator">=</span> FrameLayout<span class="token punctuation">.</span><span class="token function">LayoutParams</span><span class="token punctuation">(</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">,</span>ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT<span class="token punctuation">)</span>            <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span>            <span class="token function">addView</span><span class="token punctuation">(</span>lottieView<span class="token punctuation">,</span>layoutParamsLottie<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rootView    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">transitionToFlutter</span><span class="token punctuation">(</span>onTransitionComplete<span class="token operator">:</span> Runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span>onTransitionComplete<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在MainActivity中重写一个方法即可:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>FlutterActivity<span class="token keyword">import</span> io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>embedding<span class="token punctuation">.</span>android<span class="token punctuation">.</span>SplashScreen<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">FlutterActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">provideSplashScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SplashScreen<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">LottieSplashScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Flutter Engine在新版本中使用了新的<code>FlutterActivity</code>,这一点稍微注意一下(我这里用的就是最新的).</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Splash Screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的ANativeWindow</title>
      <link href="/2020/06/19/android/android-zhong-de-anativewindow/"/>
      <url>/2020/06/19/android/android-zhong-de-anativewindow/</url>
      
        <content type="html"><![CDATA[<h2 id="ANativeWindow是什么"><a href="#ANativeWindow是什么" class="headerlink" title="ANativeWindow是什么"></a>ANativeWindow是什么</h2><p>ANativeWindow是C/C++中定义的一个结构体,等同于Java中的<code>Surface</code>.</p><p>Android NDK中可以访问到ANativeWindow.</p><p>ANativeWindow中存放像素信息的结构是:<code>ANativeWindow_Buffer</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ANativeWindow_Buffer <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// The number of pixels that are shown horizontally.</span>    int32_t width<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// The number of pixels that are shown vertically.</span>    int32_t height<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// The number of *pixels* that a line in the buffer takes in</span>    <span class="token comment" spellcheck="true">/// memory. This may be >= width.</span>    int32_t stride<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// The format of the buffer. One of AHardwareBuffer_Format.</span>    int32_t format<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// The actual bits.</span>    <span class="token keyword">void</span><span class="token operator">*</span> bits<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// Do not touch.</span>    uint32_t reserved<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ANativeWindow_Buffer<span class="token punctuation">;</span></code></pre><h2 id="主要API"><a href="#主要API" class="headerlink" title="主要API"></a>主要API</h2><ul><li><p>获取与surface对应的ANativeWindow</p><pre class=" language-cpp"><code class="language-cpp">ANativeWindow<span class="token operator">*</span> <span class="token function">ANativeWindow_fromSurface</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject surface<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>保持/释放ANativeWindow对象的引用</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ANativeWindow_acquire</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ANativeWindow_release</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>向buffer中写入数据并提交</p><pre class=" language-cpp"><code class="language-cpp">int32_t <span class="token function">ANativeWindow_lock</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">,</span> ANativeWindow_Buffer<span class="token operator">*</span> outBuffer<span class="token punctuation">,</span>        ARect<span class="token operator">*</span> inOutDirtyBounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这之间的代码可以执行一些向buffer中写入数据的操作</span>int32_t <span class="token function">ANativeWindow_unlockAndPost</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取Window Surface的信息:宽/高/像素格式</p><pre class=" language-cpp"><code class="language-cpp">int32_t <span class="token function">ANativeWindow_getWidth</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>int32_t <span class="token function">ANativeWindow_getHeight</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>int32_t <span class="token function">ANativeWindow_getFormat</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>像素格式定义在<code>AHARDWAREBUFFER_FORMAT_*</code></p></li><li><p>改变Window Buffer的格式和大小</p><pre class=" language-cpp"><code class="language-cpp">int32_t <span class="token function">ANativeWindow_setBuffersGeometry</span><span class="token punctuation">(</span>ANativeWindow<span class="token operator">*</span> window<span class="token punctuation">,</span>        int32_t width<span class="token punctuation">,</span> int32_t height<span class="token punctuation">,</span> int32_t format<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="一般的流程"><a href="#一般的流程" class="headerlink" title="一般的流程"></a>一般的流程</h2><ol><li>通过<code>ANativeWindow_fromSurface</code>获取与Surface对应的<code>ANativeWindow</code>对象</li><li><code>ANativeWindow_setBuffersGeometry</code>设置buffer的尺寸和格式</li><li><code>ANativeWindow_acquire</code>获取引用对象</li><li>利用<code>ANativeWindow_lock/ANativeWindow_unlockAndPost</code>与之间的绘制代码绘制图像</li><li><code>ANativeWindow_release</code>释放引用.</li></ol><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>写个简单的例子:利用ANativeWindow绘制一个灰色的背景.</p><ul><li><p>C++代码</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;android/native_window.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;android/native_window_jni.h></span></span><span class="token keyword">void</span> <span class="token function">drawColor</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span>jobject obj<span class="token punctuation">,</span>jobject surface<span class="token punctuation">,</span> jint colorARGB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> alpha <span class="token operator">=</span> colorARGB <span class="token operator">>></span> <span class="token number">24</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> red <span class="token operator">=</span> colorARGB <span class="token operator">>></span> <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> green <span class="token operator">=</span> colorARGB <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> blue <span class="token operator">=</span> colorARGB <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> colorABGR <span class="token operator">=</span> alpha <span class="token operator">&lt;&lt;</span> <span class="token number">24</span> <span class="token operator">|</span> <span class="token punctuation">(</span>blue <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>green <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> red<span class="token punctuation">;</span>    ANativeWindow <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token function">ANativeWindow_fromSurface</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>surface<span class="token punctuation">)</span><span class="token punctuation">;</span>    int32_t result <span class="token operator">=</span> <span class="token function">ANativeWindow_setBuffersGeometry</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">640</span><span class="token punctuation">,</span>AHARDWAREBUFFER_FORMAT_R8G8B8A8_UNORM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">ANativeWindow_release</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        window <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ANativeWindow_acquire</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>    ANativeWindow_Buffer buffer<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ANativeWindow_lock</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">ANativeWindow_release</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        window <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">auto</span> <span class="token operator">*</span>line <span class="token operator">=</span> <span class="token punctuation">(</span>uint32_t <span class="token operator">*</span><span class="token punctuation">)</span> buffer<span class="token punctuation">.</span>bits<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>height<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span>width<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            line<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> colorABGR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        line <span class="token operator">+</span><span class="token operator">=</span> buffer<span class="token punctuation">.</span>stride<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ANativeWindow_unlockAndPost</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ANativeWindow_release</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">extern</span> <span class="token string">"C"</span>JNIEXPORT <span class="token keyword">void</span> JNICALL<span class="token function">Java_com_jiangkang_androiddemos_MainActivity_drawColor</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject thiz<span class="token punctuation">,</span> jobject surface<span class="token punctuation">,</span>                                                       jint color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">drawColor</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>thiz<span class="token punctuation">,</span>surface<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>Activity代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Color<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Surface<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>SurfaceHolder<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>android<span class="token punctuation">.</span>synthetic<span class="token punctuation">.</span>main<span class="token punctuation">.</span>activity_main<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        surface_view<span class="token punctuation">.</span>holder<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> SurfaceHolder<span class="token punctuation">.</span><span class="token function">Callback2</span> <span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceRedrawNeeded</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceChanged</span><span class="token punctuation">(</span>                holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">,</span>                format<span class="token operator">:</span> Int<span class="token punctuation">,</span>                width<span class="token operator">:</span> Int<span class="token punctuation">,</span>                height<span class="token operator">:</span> Int            <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceDestroyed</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">surfaceCreated</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> SurfaceHolder<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                holder<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>                    <span class="token function">drawColor</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>surface<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    external <span class="token keyword">fun</span> <span class="token function">drawColor</span><span class="token punctuation">(</span>surface<span class="token operator">:</span> Surface<span class="token punctuation">,</span> color<span class="token operator">:</span> Int<span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">init</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"native-lib"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Native层中的<code>ANativeWindow</code>对应Java层中的<code>Surface</code>,因此可以利用SurfaceView + ANativeWindow,用C++代码绘制屏幕;</li><li>在图像/视频处理中会利用到<code>ANativeWindow</code>,也可以与EGL,FFMPEG等结合使用</li><li>Flutter Engine中正是通过 <code>ANativeWindow</code>才将Dart中的UI与Android中UI联系到一起的.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANativeWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用fork方式创建进程</title>
      <link href="/2020/06/15/c/linux-shi-yong-fork-fang-shi-chuang-jian-jin-cheng/"/>
      <url>/2020/06/15/c/linux-shi-yong-fork-fang-shi-chuang-jian-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork之前\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t fpid<span class="token punctuation">;</span>    fpid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fpid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error during fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fpid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"current process is child process : pid = %d,parent pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"current process is parent process : pid = %d,parent pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译执行后输出结果:</p><pre><code>fork之前fork之后current process is parent process : pid = 71370,parent pid = 62785fork之后current process is child process : pid = 71371,parent pid = 1</code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>fork 之前,只有一个进程在执行这段代码;</p><p>fork之后,就有两个基本上一模一样的进程了,都会执行fork行之后的代码;</p><p>而且可以看到两个进程的pid不一样,这是为什么?</p><p>fork是执行一次,返回两次,可能有三种返回值:</p><ul><li>在父进程中,fork返回新创建的子进程的pid;</li><li>在子进程中,fork返回0;</li><li>如果出现错误,fork返回一个负值;</li></ul><p>两个进程的执行没有固定的顺序,得看系统进程调度策略.</p><p>fork失败可能的原因是:</p><ul><li>进程数量达到最大限制</li><li>内存不足</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fork </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UART</title>
      <link href="/2020/06/13/ying-jian/uart/"/>
      <url>/2020/06/13/ying-jian/uart/</url>
      
        <content type="html"><![CDATA[<h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><p>Universal Asynchronous Receiver/Transmitter,即通用异步收发传输器</p><p>UART是一种串行(串口),异步,收发协议.</p><p>作用:将并行数据转换成串行数据,所谓串行就是一位一位的传输.</p><p>像GPS模块,LCD显示器等就是使用UART串口通信.</p><h2 id="为何说它是通用-异步的"><a href="#为何说它是通用-异步的" class="headerlink" title="为何说它是通用,异步的?"></a>为何说它是通用,异步的?</h2><p>说它是“通用”的,是因为数据传输速度和数据字节格式都是可以配置的;</p><p>说它是“异步”的,是因为它并没有使用时钟来同步两个设备之间的数据传输.</p><p>硬件设备一般会在FIFO缓存区中收集数据,直到APP读取数据.</p><p>UART也是全双工通信,即可以同时发送和接收数据,它通常比I2C快,但是由于缺少共享时钟,因此两个设备必须协商好传输速度.</p><h2 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h2><p>有两种方式:</p><ul><li><p>3线</p><p><img src="https://oss.jiangkang.tech/jk/uart-connections.png" alt=""></p></li><li><p>5线(硬件流控制)</p><p><img src="https://oss.jiangkang.tech/jk/uart-flow-control.png" alt="&quot;uart-flow-control&quot;"></p></li></ul><p>5线的模块新增了两个端口,一个是RTS(request to send),一个是CTS(clear to send)</p><h2 id="软件通信协议"><a href="#软件通信协议" class="headerlink" title="软件通信协议"></a>软件通信协议</h2><p><img src="https://oss.jiangkang.tech/jk/uart-frame.png" alt="&quot;uart-frame&quot;"></p><ul><li><p>空闲</p><p>总线空闲的时候,处于高电平“1”</p></li><li><p>起始位</p><p>开始传输数据前,发送一个低电平“0”,表示开始传输字符的开始</p></li><li><p>数据</p><p>数据可以是5~8位,更少的位表示字符可以提升传输效率 </p></li><li><p>校验位</p><p>可选的位,即可以不设置这个位.如果设置就是奇偶校验:</p><ul><li>奇校验(odd):数据位中“1”的个数是奇数,则为“0”,否则为“1”</li><li>偶校验(even):数据位中“1”的个数是偶数,则为“0”,否则为“1”</li></ul><p>也存在仅作为标记作用的“1”位,和空的校验位“0”</p></li><li><p>停止位</p><p>数据结束标志,可以是1,1.5,2位的高电平</p></li></ul><h2 id="波特率-baud-rate"><a href="#波特率-baud-rate" class="headerlink" title="波特率(baud rate)"></a>波特率(baud rate)</h2><p>通过UART传输数据的速度叫做波特率.它表示发送/接收的速度,单位是bit/s</p><p>因为使用UART连接的两个设备并没有使用共享时钟,因此必须提升设置好波特率.</p><p>常见的波特率有 9600, 19200, 38400, 57600, 115200, 和 921600.</p><p>这个速率包括整个数据帧(起始位,数据位,校验位,停止位),因此实际有效的传输率比设置的低.</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UART </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM架构基础知识</title>
      <link href="/2020/06/12/ying-jian/arm-jia-gou-ji-chu-zhi-shi/"/>
      <url>/2020/06/12/ying-jian/arm-jia-gou-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Architecture 中文可以是体系结构,也可以是架构,我这里用架构</p><p>一些专业术语可以在本科课程/书籍《计算机体系结构》中找到.</p></blockquote><h2 id="三种配置"><a href="#三种配置" class="headerlink" title="三种配置"></a>三种配置</h2><ul><li><p>A-Profile(Applications)</p><p>性能最高,用于运行复杂的操作系统,比如Linux,Windows</p></li><li><p>R-Profile(Real-time)</p><p>用于运行对实时性有要求的系统</p></li><li><p>M-Profile(Microcontroller)</p><p>低功耗,高能效,常用于一些IOT设备</p></li></ul><p>Arm Cortex是一个Arm处理器IP产品(硬件中的知识产权核,可以类比为模块设计)的品牌.</p><p><img src="https://oss.jiangkang.tech/jk/arm.png" alt="arm"></p><h2 id="ARM架构是什么"><a href="#ARM架构是什么" class="headerlink" title="ARM架构是什么?"></a>ARM架构是什么?</h2><p>所谓Arm架构说的就是Arm处理器的功能规范,它有什么指令集,指令集都做些什么.</p><p>可以把Arm架构当作是硬件与软件间的一种协议,描述了软件可以使用哪些硬件提供的功能.</p><p>架构一般会指定下面这些内容:</p><ul><li>指令集(Instruction set)<ul><li>每个指令的功能</li><li>指令在内存中是如何表示的(指令的编码)</li></ul></li><li>寄存器集(Register set)<ul><li>有多少个寄存器</li><li>寄存器的大小</li><li>寄存器的功能</li><li>寄存器的初始化状态</li></ul></li><li>异常模型(Exception model)<ul><li>不同级别的特权</li><li>异常的类型</li><li>当从一个异常返回时会发生什么</li></ul></li><li>内存模型(Memory model)<ul><li>内存访问的顺序</li><li>缓存的运行方式,软件应该什么时候,怎么显示的维护缓存</li></ul></li><li>调试,跟踪,性能相关(Debug, trace, and profiling)<ul><li>如何设置和触发断点</li><li>trace工具可以以什么格式,捕获什么信息</li></ul></li></ul><h2 id="架构与微架构"><a href="#架构与微架构" class="headerlink" title="架构与微架构"></a>架构与微架构</h2><p>架构不会描述处理器是如何构建和工作的.</p><p>处理器的构建(实现)和设计称为微架构.微架构会告诉你一个处理器是如何工作的.</p><p>微架构包含以下内容:</p><ul><li>流水线(pipeline)的长度和布局</li><li>缓存的数量和大小</li><li>单个指令的循环计数</li><li>实现了哪些可选的特性</li></ul><p>比如Cortex-A53和Cortex-A72都是Armv8-A架构的实现.也就是说它们拥有相同的架构,不同的微架构.</p><p><img src="https://oss.jiangkang.tech/jk/cortext.png" alt="image-20200612231401573"></p><p>上面这张图描述的就是微架构.</p><p>在架构上兼容的软件可以在Cortex-A53和Cortex-A72上运行,而无需修改,因为它们实现了相同的架构.</p><h2 id="Arm架构的开发"><a href="#Arm架构的开发" class="headerlink" title="Arm架构的开发"></a>Arm架构的开发</h2><p>Arm架构是与时俱进,不断改进的,每个版本都是建立在以前的基础之上的.</p><p>比如常见的Armv8-A架构,意思是A系列的第8版架构,也可缩写成V8-A</p><p><img src="https://oss.jiangkang.tech/jk/arm%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.png" alt="image-20200612232247179"></p><p>Armv8-A架构是一个里程碑.因为它使用的是64位(同时兼容32位),而它之前的版本都是32位(v5,v6,v7).</p><h2 id="其他架构"><a href="#其他架构" class="headerlink" title="其他架构"></a>其他架构</h2><p>除了arm架构,也有其他架构:</p><p><img src="https://oss.jiangkang.tech/jk/server-arm.png" alt="image-20200612233518408"></p><p>比如用于服务端的架构.</p><h2 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h2><ul><li>Arm架构参考手册( Reference Manual ):描述架构规范</li><li>每个Arm Cortex处理器都有一个技术参考手册(Reference Manual,TRM):描述了处理器的特点,通常不会重复arm架构参考手册的内容</li><li>每个Arm Cortex处理器都有一个配置或者集成参考手册(CIM):描述了如何将处理器集成到系统中,通常这个文档只与Soc设计者相关,并且只对有IP授权的厂商可用(但是没有license也可以下载)</li></ul><p>上面这三种文档都不会告诉你如何使用处理器(这部分内容在指南中,即Guides)</p><h2 id="通用架构术语"><a href="#通用架构术语" class="headerlink" title="通用架构术语"></a>通用架构术语</h2><p>架构描述中有许多简写,也就是术语.</p><h3 id="PE-Processing-Element-处理单元"><a href="#PE-Processing-Element-处理单元" class="headerlink" title="PE(Processing Element)/处理单元"></a>PE(Processing Element)/处理单元</h3><p>PE是一个Arm架构实现的通用术语,任何有它自己的程序计数器,并且可以执行一个程序的东西都可以看作是一个PE.</p><p>同一个架构可能有多种微架构实现,比如Arm Cortex-A处理器的微架构可以是:</p><ul><li>Cortex-A8是一个单核,单线程处理器,整个处理器就是一个PE</li><li>Cortex-A53是一个多核处理器,每个核是一个单线程,每个核就是一个PE</li><li>Cortex-A53AE是一个多核处理器,每个核有两个线程,每个线程就是一个PE.</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.arm.com/" target="_blank" rel="noopener">https://developer.arm.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM架构 </tag>
            
            <tag> ARM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOSP的编译</title>
      <link href="/2020/06/12/android/aosp-de-bian-yi/"/>
      <url>/2020/06/12/android/aosp-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<p>aosp现在使用soong编译工具进行编译了,比之前的老版本编译要容易方便得多了.</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>配置好repo等工具</li><li>下载aosp源码</li><li>开始编译</li><li>模拟器演示或者刷写到真实设备上</li></ol><p>其实这几个步骤都没什么好说的.第一二步按照要求下载工具和源码即可,当然最好有一个科学上网的环境,不行的化用清华的镜像源也是可以的.</p><h2 id="查看分支-切换分支"><a href="#查看分支-切换分支" class="headerlink" title="查看分支/切换分支"></a>查看分支/切换分支</h2><p>在已经下载好源码之后:</p><ul><li><p>查看分支</p><pre class=" language-shell"><code class="language-shell">cd .repo/manifestsgit branch -a | cut -d / -f 3</code></pre></li><li><p>切换分支</p><pre class=" language-shell"><code class="language-shell">repo forall -c git checkout xx_branchrepo sync</code></pre></li></ul><h2 id="重置修改的代码"><a href="#重置修改的代码" class="headerlink" title="重置修改的代码"></a>重置修改的代码</h2><pre class=" language-shell"><code class="language-shell">repo forall -c git reset --hard</code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>进入源码根目录,然后执行:</p><pre class=" language-shell"><code class="language-shell">. build/envsetup.sh</code></pre><pre class=" language-shell"><code class="language-shell">lunch</code></pre><p>这一步会让你选择构建的Android系统类型</p><pre class=" language-shell"><code class="language-shell">m droid</code></pre><p>大概需要编译10万个C/C++文件,耗时1~4个小时.</p><h2 id="编译时可能出现的问题"><a href="#编译时可能出现的问题" class="headerlink" title="编译时可能出现的问题"></a>编译时可能出现的问题</h2><ol><li><p>大小写敏感的磁盘格式问题</p><p>Android官方文档有格式化的办法<a href="https://source.android.google.cn/setup/build/initializing?hl=zh-cn" target="_blank" rel="noopener">构建编译环境</a></p></li><li><p>too many files</p><p>我用的是MacOS,出现这种问题是因为系统对打开的文件个数有限制.</p><p>可以在环境变量中设置最大打开文件的个数(.bash_profile,或者.zshrc之类的):</p><pre class=" language-shell"><code class="language-shell"># set the number of open files to be 1024ulimit -S -n 2048</code></pre></li><li><p>证书错误</p><pre class=" language-shell"><code class="language-shell">Downloading Repo source from https://gerrit.googlesource.com/git-repofatal: Cannot get https://gerrit.googlesource.com/git-repo/clone.bundlefatal: error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)fatal: cloning the git-repo repository failed, will remove '.repo/repo'</code></pre><p>初始化repo的时候添加<code>--no-clone-bundle</code>:</p><pre class=" language-shell"><code class="language-shell">repo init -u https://android.googlesource.com/platform/manifest --no-clone-bundle</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> AOSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开机动画分析</title>
      <link href="/2020/06/12/android/android-kai-ji-dong-hua-fen-xi/"/>
      <url>/2020/06/12/android/android-kai-ji-dong-hua-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="开机动画"><a href="#开机动画" class="headerlink" title="开机动画"></a>开机动画</h2><p>系统会按照下面的顺序选择一个开机动画资源(一个zip文件,比如bootanimation.zip):</p><pre><code>/system/media/bootanimation-encrypted.zip (if getprop(&quot;vold.decrypt&quot;) = &#39;1&#39;)/system/media/bootanimation.zip/oem/media/bootanimation.zip</code></pre><p>开机动画资源的文件结构如下:</p><pre><code>desc.txt - 一个文本文件part0  \part1   \  PNG图片帧存放的文件夹...     /partN  /</code></pre><p>其中desc.txt的内容如下:</p><pre><code>1080 1920 60c 1   90 part0 #FFFFFF -1c 1   0  part1 #FFFFFF -1p 240 0  part2 #FFFFFF -1p 0   0  part3 #FFFFFF -1</code></pre><p>第一行的格式为:</p><pre><code>WIDTH HEIGHT FPS</code></pre><p>分别表示,图片宽,高,帧率.</p><p>后面几行的格式为:</p><pre><code>TYPE COUNT PAUSE PATH [#RGBHEX [CLOCK1 [CLOCK2]]]</code></pre><p><code>TYPE</code>是动画片段的类型:</p><ul><li>p表示会播放动画,直到启动完毕被中断</li><li>c表示把片段播放完就结束.</li></ul><p><code>COUNT</code>表示片段播放多少次,0表示循环播放直到启动完毕.</p><p><code>PAUSE</code>表示这部分片段播放完之后要延迟的帧数.</p><p><code>PATH</code>表示动画片段所在的文件夹</p><p><code>RGBHEX</code>表示一个背景色(可选的).</p><p><code>CLOCK1 CLOCK2</code>表示绘制的当前时间的坐标(可选的),</p><p>在片段文件夹中,有一个trim.txt的文本文件,用于指定图片尺寸和坐标:</p><pre><code>186x266+447+885186x266+447+885186x266+447+885186x266+447+885186x266+447+885</code></pre><p>格式为:<code>WxH+X+Y</code></p><p>如果想自定义开机动画,或者看一下具体的动画资源格式,可以开启个模拟器,或者找一个root的手机.</p><p>可以调用以下代码手动执行以下<code>bootanimation</code>程序,显示开机动画(需要root或者模拟器):</p><pre class=" language-shell"><code class="language-shell">adb shellsucd /system/binbootanimation</code></pre><blockquote><p>开机动画资源的格式文档在这里:<code>frameworks/base/cmds/bootanimation/FORMAT.md</code></p><p>源码路径为:<code>frameworks/base/cmds/bootanimation</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android开机动画 </tag>
            
            <tag> Android启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统启动流程分析</title>
      <link href="/2020/06/12/android/android-xi-tong-qi-dong-liu-cheng-fen-xi/"/>
      <url>/2020/06/12/android/android-xi-tong-qi-dong-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Boot-ROM"><a href="#Boot-ROM" class="headerlink" title="Boot ROM"></a>Boot ROM</h2><p>当按下电源键,硬件上电之后,会从一个固定的内存区域读取程序.这个程序是烧写到硬件上的(ROM),用于将bootloader加载到RAM中,并开始执行它.</p><h2 id="bootloader"><a href="#bootloader" class="headerlink" title="bootloader"></a>bootloader</h2><p>bootloader用于告诉设备如何找到系统内核,和启动内核.</p><p>手机厂商一般会在bootloader中加上密钥锁和一些限制.</p><p>bootloader执行一般分为两个阶段:</p><ol><li>检测外部RAM内存,并加载一段bootloader代码用于第二阶段的执行</li><li>设置运行内核所需要的网络和内存等.</li></ol><p>高通芯片提供的<a href="https://github.com/littlekernel/lk" target="_blank" rel="noopener">LK</a>,就可以作为一个Android的bootloader.</p><p>常见的bootloader有:</p><ul><li>U-boot</li><li>LK</li></ul><h2 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h2><p>Android使用的linux kernel,当kernel启动时,会执行一系列的初始化操作,比如设置缓存,内存,加载驱动程序,挂载根文件系统,初始化输入输出等.</p><p>当内核启动完成之后,第一件要做的事就是在系统文件中找一个“init”,作为根进程或者第一个系统进程.</p><p>看一下linux kernel的源码,找一个arm64架构开始分析:</p><ul><li><p>入口在<code>arch/arm64/kernel/head.S</code>中</p><pre class=" language-assembly"><code class="language-assembly">    __INIT    /*     * The following callee saved general purpose registers are used on the     * primary lowlevel boot path:     *     *  Register   Scope                      Purpose     *  x21        stext() .. start_kernel()  FDT pointer passed at boot in x0     *  x23        stext() .. start_kernel()  physical misalignment/KASLR offset     *  x28        __create_page_tables()     callee preserved temp register     *  x19/x20    __primary_switch()         callee preserved temp registers     *  x24        __primary_switch() .. relocate_kernel()     *                                        current RELR displacement     */SYM_CODE_START(stext)    bl    preserve_boot_args    bl    el2_setup            // Drop to EL1, w0=cpu_boot_mode    adrp    x23, __PHYS_OFFSET    and    x23, x23, MIN_KIMG_ALIGN - 1    // KASLR offset, defaults to 0    bl    set_cpu_boot_mode_flag    bl    __create_page_tables    /*     * The following calls CPU setup code, see arch/arm64/mm/proc.S for     * details.     * On return, the CPU will be ready for the MMU to be turned on and     * the TCR will have been set.     */    mov    x0, #ARM64_CPU_BOOT_PRIMARY    bl    __cpu_setup            // initialise processor    b    __primary_switchSYM_CODE_END(stext)/* * The following fragment of code is executed with the MMU enabled. * *   x0 = __PHYS_OFFSET */SYM_FUNC_START_LOCAL(__primary_switched)    adrp    x4, init_thread_union    add    sp, x4, #THREAD_SIZE    adr_l    x5, init_task    msr    sp_el0, x5            // Save thread_info    adr_l    x8, vectors            // load VBAR_EL1 with virtual    msr    vbar_el1, x8            // vector table address    isb    stp    xzr, x30, [sp, #-16]!    mov    x29, sp    str_l    x21, __fdt_pointer, x5        // Save FDT pointer    ldr_l    x4, kimage_vaddr        // Save the offset between    sub    x4, x4, x0            // the kernel virtual and    str_l    x4, kimage_voffset, x5        // physical mappings    // Clear BSS    adr_l    x0, __bss_start    mov    x1, xzr    adr_l    x2, __bss_stop    sub    x2, x2, x0    bl    __pi_memset    dsb    ishst                // Make zero page visible to PTW#ifdef CONFIG_KASAN    bl    kasan_early_init#endif#ifdef CONFIG_RANDOMIZE_BASE    tst    x23, ~(MIN_KIMG_ALIGN - 1)    // already running randomized?    b.ne    0f    mov    x0, x21                // pass FDT address in x0    bl    kaslr_early_init        // parse FDT for KASLR options    cbz    x0, 0f                // KASLR disabled? just proceed    orr    x23, x23, x0            // record KASLR offset    ldp    x29, x30, [sp], #16        // we must enable KASLR, return    ret                    // to __primary_switch()0:#endif    add    sp, sp, #16    mov    x29, #0    mov    x30, #0    b    start_kernelSYM_FUNC_END(__primary_switched)</code></pre><p><code>_INIT</code>步骤下,执行<code>stext</code>,会执行到<code>__primary_switched</code>,然后执行到<code>start_kernel</code>,这里的<code>start_kernel</code>就是内核C代码的入口.</p><p>这个时候“0号”进程“swapper”(一个Idle进程)已经启动了(init_task.c中调用).</p></li><li><p>启动内核(C代码层面)</p><p><code>start_kernel</code>是在<code>init/main.c</code>中定义的:</p><pre class=" language-c"><code class="language-c">asmlinkage __visible <span class="token keyword">void</span> __init <span class="token function">start_kernel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></code></pre><p>这里会进行很多的初始化操作.最后会执行内核初始化操作,创建init进程:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> __ref <span class="token function">kernel_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">kernel_init_freeable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* need to finish all async __init code before freeing the memory */</span>    <span class="token function">async_synchronize_full</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ftrace_free_init_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free_initmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mark_readonly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Kernel mappings are now finalized - update the userspace page-table     * to finalize PTI.     */</span>    <span class="token function">pti_finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    system_state <span class="token operator">=</span> SYSTEM_RUNNING<span class="token punctuation">;</span>    <span class="token function">numa_default_policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rcu_end_inkernel_boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ramdisk_execute_command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token function">run_init_process</span><span class="token punctuation">(</span>ramdisk_execute_command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">pr_err</span><span class="token punctuation">(</span><span class="token string">"Failed to execute %s (error %d)\n"</span><span class="token punctuation">,</span>               ramdisk_execute_command<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * We try each of these until one succeeds.     *     * The Bourne shell can be used instead of init if we are     * trying to recover a really broken machine.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token function">run_init_process</span><span class="token punctuation">(</span>execute_command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"Requested init %s failed (error %d)."</span><span class="token punctuation">,</span>              execute_command<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/sbin/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/etc/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/init"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">try_to_run_init_process</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"No working init found.  Try passing init= option to kernel. "</span>          <span class="token string">"See Linux Documentation/admin-guide/init.rst for guidance."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个时候init进程就已经起来了.</p><p>最后执行的那几个<code>try_to_run_init_process</code>会将init进程从内核态转换成用户态.(从核心线程变成了/sbin/init的普通进程)</p></li></ul><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>源码在:<code>system/core/init/main.cpp</code></p><p>进程位置:<code>/system/core/init</code></p><p>init进程是<strong>用户空间的</strong>第一个进程,也是所有进程的“祖父”进程.</p><p>init进程主要负责两件事:</p><ul><li>挂载(mount) /sys, /dev 或者/proc等文件</li><li>运行/init.rc脚本,<code>init.rc</code>负责系统的初始化设置.</li></ul><p><a href="https://android.googlesource.com/platform/system/core/+/refs/heads/master/init/" target="_blank" rel="noopener">init.rc格式说明</a></p><p>init.rc位置:<code>/system/core/rootdir/init.rc</code></p><p><code>init.rc</code>脚本会启动servicemanager,创建zygote进程(fork方式).</p><p><code>init.rc</code>中会引用<code>import /system/etc/init/hw/init.${ro.zygote}.rc</code>,这里根据架构不同,分为三个文件:</p><ul><li>init.zygote32.rc</li><li>init.zygote64.rc</li><li>init.zygote64_32.rc</li></ul><p>其中定义了zygote服务:</p><pre><code>service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server    class main    priority -20    user root    group root readproc reserved_disk    socket zygote stream 660 root system    socket usap_pool_primary stream 660 root system    onrestart write /sys/power/state on    onrestart restart audioserver    onrestart restart cameraserver    onrestart restart media    onrestart restart netd    onrestart restart wificond    writepid /dev/cpuset/foreground/tasks</code></pre><p><code>servicemanager.rc</code>则定义了servicemanager服务:</p><pre><code>service servicemanager /system/bin/servicemanager    class core animation    user system    group system readproc    critical    onrestart restart healthd    onrestart restart zygote    onrestart restart audioserver    onrestart restart media    onrestart restart surfaceflinger    onrestart restart inputflinger    onrestart restart drm    onrestart restart cameraserver    onrestart restart keystore    onrestart restart gatekeeperd    onrestart restart thermalservice    writepid /dev/cpuset/system-background/tasks    shutdown critical</code></pre><h2 id="Zygote-and-VM"><a href="#Zygote-and-VM" class="headerlink" title="Zygote and VM"></a>Zygote and VM</h2><p>从上面的zygote服务定义来看,会通过app_process来创建zygote进程:</p><pre class=" language-shell"><code class="language-shell">/system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</code></pre><p>这个命令行的格式如下:</p><pre class=" language-shell"><code class="language-shell">app_process [java-options] cmd-dir start-class-name [options]</code></pre><p>可以看出来,<code>-Xzygote</code>是java-options,命令行程序位置在/system/bin下,<code>--zygote --start-system-server</code>则为传入的选项.</p><p><code>app_process64</code>实际上是一个单独的程序,源码入口在<code>frameworks/base/cmds/app_process/app_main.cpp</code></p><p>其中的main方法中会执行:</p><pre class=" language-cpp"><code class="language-cpp">runtime<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"com.android.internal.os.ZygoteInit"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> zygote<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个命令首先会创建一个VM,然后调用ZygoteInit.java的main方法.Zygote接收到一个请求,会通过<code>/dev/socket/zygote</code>启动一个进程,即触发<code>fork</code>调用,创建Zygote进程.</p><p>runtime实际上就是<code>AndroidRuntime</code>,源码在<code>frameworks/base/core/jni/AndroidRuntime.cpp</code>,在它的start方法中,主要处理两件事:</p><ul><li><ol><li><p>启动虚拟机</p><pre class=" language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">/* start the virtual machine */</span>    JniInvocation jni_invocation<span class="token punctuation">;</span>    jni_invocation<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JNIEnv<span class="token operator">*</span> env<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startVm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mJavaVM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>env<span class="token punctuation">,</span> zygote<span class="token punctuation">,</span> primary_zygote<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">onVmCreated</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Register android functions.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startReg</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"Unable to register all android natives\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>startVM</code>中会启动Dalvik虚拟机(为什么不是ART虚拟机),并初始化JNI环境:</p><pre class=" language-cpp"><code class="language-cpp">  <span class="token comment" spellcheck="true">/*     * Initialize the VM.     *     * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.     * If this call succeeds, the VM is ready, and we can start issuing     * JNI calls.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JNI_CreateJavaVM</span><span class="token punctuation">(</span>pJavaVM<span class="token punctuation">,</span> pEnv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>initArgs<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"JNI_CreateJavaVM failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后就是注册系统库中的JNI方法:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* * 注册Android JNI方法 */</span><span class="token comment" spellcheck="true">/*static*/</span> <span class="token keyword">int</span> AndroidRuntime<span class="token operator">::</span><span class="token function">startReg</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">register_jni_procs</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">,</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>gRegJNI<span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">PopLocalFrame</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里就是要注册的系统JNI方法</span><span class="token keyword">static</span> <span class="token keyword">const</span> RegJNIRec gRegJNI<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_RuntimeInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ZygoteInit_nativeZygoteInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SystemClock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_EventLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_Log<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_MemoryIntArray<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_PathParser<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_StatsLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_StatsLogInternal<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_admin_SecurityLog<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_AssetManager<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_StringBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_XmlBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_ApkAssets<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_text_AndroidCharacter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_text_Hyphenator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_KeyCharacterMap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Process<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SystemProperties<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Binder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Parcel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HidlMemory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HidlSupport<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwBinder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwBlob<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwParcel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_HwRemoteBinder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_NativeHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_VintfObject<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_VintfRuntimeInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Canvas<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// This needs to be before register_android_graphics_Graphics, or the latter</span>    <span class="token comment" spellcheck="true">// will not be able to find the jmethodID for ColorSpace.get().</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ColorSpace<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Graphics<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_DisplayEventReceiver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_RenderNode<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_RenderNodeAnimator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_DisplayListCanvas<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputApplicationHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputWindowHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_TextureLayer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_ThreadedRenderer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_Surface<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_SurfaceControl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_SurfaceSession<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_CompositionSamplingListener<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_TextureView<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_view_animation_NativeInterpolatorFactoryHelper<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_google_android_gles_jni_EGLImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_google_android_gles_jni_GLImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGL14<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGL15<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_EGLExt<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES10<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES10Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES11<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES11Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES20<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES30<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES31<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES31Ext<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_jni_GLES32<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Bitmap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_BitmapFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_BitmapRegionDecoder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ByteBufferStreamAdaptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Camera<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_CreateJavaOutputStreamAdaptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_CanvasProperty<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ColorFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_DrawFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_FontFamily<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_GraphicBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_ImageDecoder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_AnimatedImageDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Interpolator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_MaskFilter<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Matrix<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Movie<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_NinePatch<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Paint<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Path<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_PathMeasure<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_PathEffect<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Picture<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Region<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Shader<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_SurfaceTexture<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_Typeface<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_YuvImage<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_AnimatedVectorDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_drawable_VectorDrawable<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_fonts_Font<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_fonts_FontFamily<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfDocument<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfEditor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_pdf_PdfRenderer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_text_MeasuredText<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_graphics_text_LineBreaker<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_CursorWindow<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteConnection<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteGlobal<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_database_SQLiteDebug<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Debug<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_FileObserver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_GraphicsEnvironment<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SELinux<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_Trace<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_UEventObserver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_net_LocalSocketImpl<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_net_NetworkUtils<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_MemoryFile<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_os_SharedMemory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ClassLoaderFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_Zygote<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_ZygoteInit<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_util_VirtualRefBasePtr<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_Camera<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_CameraMetadata<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_legacy_LegacyCameraDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_legacy_PerfMeasurement<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_camera2_DngCreator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_HardwareBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SensorManager<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SerialPort<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_SoundTrigger<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbDevice<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbDeviceConnection<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_UsbRequest<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_hardware_location_ActivityRecognitionHardware<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioEffectDescriptor<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioSystem<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioRecord<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioTrack<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioAttributes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioProductStrategies<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioVolumeGroups<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_AudioVolumeGroupChangeHandler<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_MicrophoneInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_RemoteDisplay<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_ToneGenerator<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_media_midi<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_opengl_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_server_NetworkManagementSocketTagger<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_ddm_DdmHandleNativeHeap<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupDataInput<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupDataOutput<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_FileBackupHelperBase<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_backup_BackupHelperDispatcher<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_backup_FullBackup<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_Activity<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_ActivityThread<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_app_NativeActivity<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_util_jar_StrictJarFile<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputChannel<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputEventReceiver<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputEventSender<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_InputQueue<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_KeyEvent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_MotionEvent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_PointerIcon<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_view_VelocityTracker<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_ObbScanner<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_content_res_Configuration<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_animation_PropertyValuesHolder<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_android_security_Scrypt<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_content_NativeLibraryHelper<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_AtomicDirectory<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_FuseAppLoop<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_KernelCpuUidBpfMapReader<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REG_JNI</span><span class="token punctuation">(</span>register_com_android_internal_os_KernelSingleUidTimeReader<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>调用ZygoteInit.java的main方法,创建zygote进程,和systemserver进程.</p><p>先看AndroidRuntime.cpp中是如何调用ZygoteInit.java中的main()方法的:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 拿到main方法</span>jmethodID startMeth <span class="token operator">=</span> env<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetStaticMethodID</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span>            <span class="token string">"([Ljava/lang/String;)V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startMeth <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">ALOGE</span><span class="token punctuation">(</span><span class="token string">"JavaVM unable to find main() in '%s'\n"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* keep going */</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用main方法</span>            env<span class="token operator">-</span><span class="token operator">></span><span class="token function">CallStaticVoidMethod</span><span class="token punctuation">(</span>startClass<span class="token punctuation">,</span> startMeth<span class="token punctuation">,</span> strArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token operator">-</span><span class="token operator">></span><span class="token function">ExceptionCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">threadExitUncaughtException</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token punctuation">}</span></code></pre><p>可以看出来同样是通过jni调用.</p><p>进入ZygoteInit.java看一下main()方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Zygote goes into its own process group.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Os<span class="token punctuation">.</span><span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ErrnoException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Failed to setpgid(0,0)"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> Runnable caller<span class="token punctuation">;</span> zygoteServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteServer</span><span class="token punctuation">(</span>isPrimaryZygote<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>startSystemServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Runnable r <span class="token operator">=</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span>abiList<span class="token punctuation">,</span> zygoteSocketName<span class="token punctuation">,</span> zygoteServer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// {@code r == null} in the parent (zygote) process, and {@code r != null} in the</span>                <span class="token comment" spellcheck="true">// child (system_server) process.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The select loop returns early in the child process after a fork and</span>            <span class="token comment" spellcheck="true">// loops forever in the zygote.</span>            caller <span class="token operator">=</span> zygoteServer<span class="token punctuation">.</span><span class="token function">runSelectLoop</span><span class="token punctuation">(</span>abiList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// We're in the child process and have exited the select loop. Proceed to execute the</span>        <span class="token comment" spellcheck="true">// command.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            caller<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>可以看到,这里会创建ZygoteServer,进入Zygote进程,并通过zygote进程fork System Server进程:</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/* Request to fork the system server process */</span>            pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkSystemServer</span><span class="token punctuation">(</span>                    parsedArgs<span class="token punctuation">.</span>mUid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGid<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mGids<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mRuntimeFlags<span class="token punctuation">,</span>                    null<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mPermittedCapabilities<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mEffectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Zygote.java</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forkSystemServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits<span class="token punctuation">,</span> <span class="token keyword">long</span> permittedCapabilities<span class="token punctuation">,</span> <span class="token keyword">long</span> effectiveCapabilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">preFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">nativeForkSystemServer</span><span class="token punctuation">(</span>                uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span>                permittedCapabilities<span class="token punctuation">,</span> effectiveCapabilities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the Java Language thread priority to the default value for new apps.</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">postForkCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Zygote是一个VM进程,这个时候就进入了Java世界了.System Server进程也创建了.</p></li></ol></li></ul><h2 id="System-Servers"><a href="#System-Servers" class="headerlink" title="System Servers"></a>System Servers</h2><p>既然system server是一个进程,那么通常也有一个main()方法作为入口:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * The main entry point from zygote.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>主要做的工作都在<code>run</code>方法中:</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 切换runtime,即dalvik 还是 art</span>  SystemProperties<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"persist.sys.dalvik.vm.lib.2"</span><span class="token punctuation">,</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">vmLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化native service</span>  System<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"android_servers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化系统context.</span>  <span class="token function">createSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  创建 system service manager.</span>  mSystemServiceManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemServiceManager</span><span class="token punctuation">(</span>mSystemContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  mSystemServiceManager<span class="token punctuation">.</span><span class="token function">setStartInfo</span><span class="token punctuation">(</span>mRuntimeRestart<span class="token punctuation">,</span>  mRuntimeStartElapsedTime<span class="token punctuation">,</span> mRuntimeStartUptime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalServices<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>SystemServiceManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mSystemServiceManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 启动service</span>  <span class="token function">startBootstrapServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startCoreServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">startOtherServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的服务分为三种:</p><ul><li>Bootstrap Service</li><li>Core Service</li><li>Other Service</li></ul><p>每个类型的服务数量都非常之多,并且服务直接的启动顺序是有讲究的.</p><h2 id="启动完成"><a href="#启动完成" class="headerlink" title="启动完成"></a>启动完成</h2><p>在一些基础的Service启动完成之后,会执行一些Service的systemReady()方法,进一步执行app进程可以干的事.</p><p>在ActivityManagerService中,调用finishBooting()方法,也就意味着启动完成.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finishBooting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Let the ART runtime in zygote and system_server know that the boot completed.</span>        <span class="token comment" spellcheck="true">// 让zygote中的ART虚拟机 和system server进程知道启动已经完成</span>        ZYGOTE_PROCESS<span class="token punctuation">.</span><span class="token function">bootCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">bootCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 让系统Service知道已经启动完成</span>        mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startBootPhase</span><span class="token punctuation">(</span>SystemService<span class="token punctuation">.</span>PHASE_BOOT_COMPLETED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="启动Launch-App-桌面"><a href="#启动Launch-App-桌面" class="headerlink" title="启动Launch App(桌面)"></a>启动Launch App(桌面)</h2><p>ActivityManagerService启动完毕之后,会通过默认的”homeIntent”启动Launch App.</p><p>LaunchAPP启动完毕之后,会发送启动完成的广播,供应用监听.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>启动流程分为以下几个步骤:<ol><li>按下电源开关,CPU上电,开始读取固化在ROM中的一段代码,将bootloader代码载入内存,并开始执行</li><li>bootloader执行一些硬件初始化操作,并启动Linux kernel</li><li>Linux kernel 进行各种初始化之后,创建一个init进程,并转移到用户态</li><li>init进程会读取init.rc中的配置文件,启动各种服务,包括使用bootannimation程序开启开机动画,使用app_process程序创建虚拟机和Zygote进程,Zygote进程是VM中第一个进程.</li><li>Zygote会初始化JNI环境,注册一些预置的JNI方法,并创建System Server进程</li><li>System Server进程会加载”libandroid_servers.so”,会直接创建启动或者使用<code>SystemServiceManager</code>创建并启动各种服务,包括ActivityManagerService.而且这些服务都必须继承<code>SystemService</code>类.</li><li>ActivityManagerService中会发送启动完成的标记,然后启动Launch App</li><li>Launch App启动完成之后会发送启动完成的广播</li></ol></li><li>系统程序都在<code>/system/bin</code>下,包括<code>init</code>,<code>bootanimation</code>等,并不是什么很玄的东西,都只是个普通程序而已.</li><li>最无效的方式就是看各种源码分析文章(如果有人在看我写的这篇,赶紧关掉吧),自己下载个源码从入口开始分析,会让你更加清楚启动的流程.</li><li>代码本身并没有什么意义,Android源码也是人写的,而且写的还不怎么样,关键的是在阅读源码的过程中,深入了解一个嵌入式操作系统的实现方式,遇到的问题,以及解决问题的方案,毕竟一个市场成功的操作系统在设计上肯定有很多可取之处的.</li><li>不要一叶障目,也不要只见树木,不见森林,几十个G的代码可能看一辈子也不可能看完,重要的是知道关键之处如何利用现有的工具去设计实现我们想要的功能.</li><li>这篇文章只是大概的分析了下启动流程,而且很多地方不够详细,高度也不够(充斥了大量源码),希望后面自己软件功底深了之后会站在更高的层次来看这个吧.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Android启动流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期学习计划</title>
      <link href="/2020/05/30/ji-hua/jin-qi-xue-xi-ji-hua/"/>
      <url>/2020/05/30/ji-hua/jin-qi-xue-xi-ji-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>数据结构</li><li>基本算法</li><li>GUI设计原理与解决方案</li><li>操作系统(Linux)</li><li>图形渲染</li><li>图片编解码</li></ul><h2 id="flutter框架"><a href="#flutter框架" class="headerlink" title="flutter框架"></a>flutter框架</h2><ul><li>gn</li><li>skia</li><li>flutter engine</li><li>flutter frameworks</li><li>flutter tools</li><li>flutter 使用</li></ul><h2 id="领域知识学习"><a href="#领域知识学习" class="headerlink" title="领域知识学习"></a>领域知识学习</h2><ul><li>音视频</li><li>物联网</li><li>系统层开发</li></ul><h2 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h2><ul><li>音视频类</li><li>小说/阅读类</li><li>资讯/新闻类</li><li>通信/社交类</li></ul><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><ul><li>登陆/注册认证</li><li>分享</li><li>下载</li><li>图片编解码</li><li>网络框架</li><li>存储框架</li><li>采集/分析框架</li><li>性能监控方案</li></ul><h2 id="完成情况"><a href="#完成情况" class="headerlink" title="完成情况"></a>完成情况</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GN构建C++项目之HelloWorld</title>
      <link href="/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/"/>
      <url>/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/</url>
      
        <content type="html"><![CDATA[<p>使用Google的gn工具构建C++项目,但是官方的demo构建脚本还是不够简单,这里写一个最简单的构建结构.</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://oss.jiangkang.tech/jk/gn-tree.png" alt="目录结构"></p><h2 id="必要的几个文件"><a href="#必要的几个文件" class="headerlink" title="必要的几个文件"></a>必要的几个文件</h2><ul><li>.gn</li><li>根目录下的BUIlD.gn</li><li>BUILDCONFIG.gn</li></ul><h2 id="gn"><a href="#gn" class="headerlink" title=".gn"></a>.gn</h2><pre><code># gn help dotfilebuildconfig = &quot;//build/config/BUILDCONFIG.gn&quot;</code></pre><p>这里就指定个最简单的buildconfig文件即可.</p><h2 id="BUILD-gn"><a href="#BUILD-gn" class="headerlink" title="BUILD.gn"></a>BUILD.gn</h2><pre><code>executable(&quot;gn-demo&quot;) {    sources = [        &quot;main.cpp&quot;    ]}</code></pre><p>代表着要构建可执行文件.</p><h2 id="BUILDCONFIG-gn"><a href="#BUILDCONFIG-gn" class="headerlink" title="BUILDCONFIG.gn"></a>BUILDCONFIG.gn</h2><pre><code>set_default_toolchain(&quot;//build/config/toolchains:mac&quot;)</code></pre><p>这里指定了使用的默认工具链</p><h2 id="toolchains"><a href="#toolchains" class="headerlink" title="toolchains"></a>toolchains</h2><p>build/config/toolchains/BUILD.gn</p><pre><code>toolchain(&quot;mac&quot;) {    tool(&quot;cxx&quot;){        command = &quot;clang++ -c {{source}} -o {{output}}&quot;        outputs = [ &quot;{{source_out_dir}}/{{target_output_name}}.o&quot; ]    }    tool(&quot;link&quot;){        exe_name = &quot;{{root_out_dir}}/{{target_output_name}}{{output_extension}}&quot;        command = &quot;clang++ {{inputs}} -o $exe_name&quot;        outputs = [&quot;$exe_name&quot;]    }}</code></pre><p>写工具链的脚本,需要大致明白C++的编译流程.</p><p>其中<code>cxx</code>:代表编译C++,<code>link</code>代表链接.由于我使用的是Mac,所以这里使用clang进行编译.</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><pre class=" language-shell"><code class="language-shell">gn gen out/Debugninja -C out/Debug</code></pre><p>可执行文件就构建成功了.</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> GN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake的简单使用</title>
      <link href="/2020/05/25/c/cmake-de-jian-dan-shi-yong/"/>
      <url>/2020/05/25/c/cmake-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="构建可执行程序"><a href="#构建可执行程序" class="headerlink" title="构建可执行程序"></a>构建可执行程序</h2><pre class=" language-cmake"><code class="language-cmake">add_executable(<name> [WIN32] [MACOSX_BUNDLE]               [EXCLUDE_FROM_ALL]               [source1] [source2 ...])</code></pre><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} main.cpp)</code></pre><p>或者源码目录:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)add_executable(${PROJECT_NAME} ${DIR_SOURCES})</code></pre><h2 id="构建动态链接库-静态库"><a href="#构建动态链接库-静态库" class="headerlink" title="构建动态链接库/静态库"></a>构建动态链接库/静态库</h2><pre class=" language-cmake"><code class="language-cmake">add_library(<name> [STATIC | SHARED | MODULE]            [EXCLUDE_FROM_ALL]            [source1] [source2 ...])</code></pre><p><code>STATIC</code>:表示静态库,如<code>libname.a</code></p><p><code>SHARED</code>:表示动态链接库,如<code>libname.dylib</code></p><p><code>MODULE</code>:表示可以用类似<code>dlopen</code>得方法动态加载库,如<code>libname.so</code></p><p>构建出来的库名字会自动加上<code>lib</code>前缀,如<code>libname.a</code>,<code>libname.dylib</code>,<code>libname.so</code></p><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_library(${PROJECT_NAME} SHARED main.cpp)</code></pre><h2 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h2><pre class=" language-cmake"><code class="language-cmake">include_directories(include_dir)</code></pre><p><code>include_dir</code>为<code>.h</code>文件所在的文件夹</p><h2 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h2><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(./src DIR_SOURCES)</code></pre><p>查找把<code>./src</code>下所有源文件,并保存到变量<code>DIR_SOURCES</code>中,后面可以使用<code>${DIR_SOURCES}</code>表示.</p><p>需要注意的地方是:</p><ul><li><code>aux_source_directory</code>不会递归包含子目录,仅包含指定的目录.</li><li>当添加源文件时,如需重新编译,得重新运行cmake</li></ul><p>还可以使用<code>CMAKE_CURRENT_LIST_DIR</code>内置变量:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)</code></pre><h2 id="添加子目录"><a href="#添加子目录" class="headerlink" title="添加子目录"></a>添加子目录</h2><pre class=" language-cmake"><code class="language-cmake">add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></pre><p>除了写helloworld,一般都需要配置多个源码目录,这个时候可以使用<code>add_subdirectory</code>命令,其中<code>source_dir</code>表示子目录中CMakeList.txt所在的路径,<code>binary_dir</code>表示输出目录.</p><h2 id="查找依赖库"><a href="#查找依赖库" class="headerlink" title="查找依赖库"></a>查找依赖库</h2><ul><li><p>通过<code>link_directories</code> (极少使用)</p><pre class=" language-cmake"><code class="language-cmake">link_directories([AFTER|BEFORE] directory1 [directory2 ...])</code></pre><p>linker会在这些定义的目录里查找依赖的库.如lib文件夹下放置一个<code>libskia.so</code>库文件:</p><pre class=" language-cmake"><code class="language-cmake">link_directories(${CMAKE_CURRENT_LIST_DIR}/lib)</code></pre><p>最后链接的时候:</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre><p>这个时候,会自动到上面包含的lib文件下去寻找libskia.so(或者libskia.a,libskia.dylib)文件.</p><p><strong>使用XCode等项目生成器需要根据架构动态切换依赖库,或者库本身依赖私库等情况会使用这个命令,一般使用find_library()替换.</strong></p></li><li><p>通过<code>find_library</code></p><pre class=" language-cmake"><code class="language-cmake">find_library (<VAR> name1 [path1 path2 ...])</code></pre><p>如果库被找到,结果会被存储到变量<code>VAR</code>中.如果没有找到库文件,则结果会被存储到<code>&lt;VAR&gt;-NOTFOUND</code>.如:</p><pre class=" language-cmake"><code class="language-cmake">find_library(LIB_SKIA skia lib)if(LIB_SKIA-NOTFOUND)    message("没有找到Skia")endif(LIB_SKIA-NOTFOUND)target_link_libraries(${PROJECT_NAME} ${LIB_SKIA})</code></pre></li><li><p>通过<code>find_package</code></p><pre class=" language-cmake"><code class="language-cmake">find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]             [REQUIRED] [[COMPONENTS] [components...]]             [OPTIONAL_COMPONENTS components...]             [NO_POLICY_SCOPE])</code></pre><p>cmake中自带了一些cmake脚本,通过<code>cmake --help-module-list</code>命令即可查看.拿libpng举例:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} ${DIR_SOURCES})find_package(PNG)if(PNG_FOUND)    include_directories(${PNG_INCLUDE_DIR})    target_link_libraries(${PROJECT_NAME} ${PNG_LIBRARY})    message("找到了PNG")endif(PNG_FOUND)if(NOT PNG_FOUND)    message("没有找到PNG")endif(NOT PNG_FOUND)</code></pre><p>如果遇到已有脚本存在,但是就是无法找到的情况,无需在此浪费时间,换一种查找方法即可.</p></li></ul><h2 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h2><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(<target> ... <item>... ...)</code></pre><p>这其中item可以是下面的任何一种:</p><ul><li><p>库名(不带<code>lib</code>前缀,不带后缀)</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre></li><li><p>库文件的完整路径</p></li><li><p>表达式</p></li></ul><h2 id="自定义输出路径"><a href="#自定义输出路径" class="headerlink" title="自定义输出路径"></a>自定义输出路径</h2><ul><li><p>指定执行文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/build)</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUGCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE</code></pre></li></ul></li><li><p>指定库文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">LIBRARY_OUTPUT_PATH</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUGCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE</code></pre></li><li><p>指定Debug/Release版本后缀名</p><pre class=" language-cmake"><code class="language-cmake">set(CMAKE_DEBUG_POSTFIX "_d")set(CMAKE_RELEASE_POSTFIX "_r")</code></pre></li></ul></li></ul><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul><li><p>CMAKE_CURRENT_LIST_DIR</p><p>当前CMakeList.txt所在目录</p></li><li><p>PROJECT_NAME</p><p>项目名</p></li><li><p><code>PROJECT_SOURCE_DIR</code></p><p>源码目录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModernC++的一些特性</title>
      <link href="/2020/05/23/c/modernc-de-yi-xie-te-xing/"/>
      <url>/2020/05/23/c/modernc-de-yi-xie-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Modern-C"><a href="#Modern-C" class="headerlink" title="Modern C++"></a>Modern C++</h2><p>Modern C++指的是C++11/C++14/C++17/C++20等版本,新增和改进了C++语法,提升开发效率.</p><h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>nullptr是用来替换NULL的</p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><p>常量表达式</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h2 id="if-switch-变量声明强化"><a href="#if-switch-变量声明强化" class="headerlink" title="if/switch 变量声明强化"></a>if/switch 变量声明强化</h2><pre class=" language-cpp"><code class="language-cpp">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p>即判断条件中可以直接声明临时变量.</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">testInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Person person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>C++11之前的版本初始化比较麻烦,需要写一些无用代码,这之后比较灵活,可以按照上面的方式进行初始化.</p><h2 id="结构化绑定"><a href="#结构化绑定" class="headerlink" title="结构化绑定"></a>结构化绑定</h2><p>即多返回值的封包/拆包,在Python,Go,Kotlin中比较常见.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">testTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make_tuple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>即类型推断,不用每个变量声明都声明类型.</p><p>需要注意的就是:<strong>auto不能用于函数传参,也不能用于推导数组类型</strong></p><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>auto只能用于变量的类型推断,decltype则对表达式类型推断做了补充.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">auto</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> z<span class="token punctuation">;</span></code></pre><h2 id="区间for迭代"><a href="#区间for迭代" class="headerlink" title="区间for迭代"></a>区间for迭代</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> itr <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> itr <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>itr <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> element <span class="token operator">:</span> vec<span class="token punctuation">)</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// read only</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>element <span class="token operator">:</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// writeable</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> element <span class="token operator">:</span> vec<span class="token punctuation">)</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// read only</span><span class="token punctuation">}</span></code></pre><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>将一切能在编译期解决的问题放在编译期解决,仅在运行时处理核心的动态服务.</p><h3 id="外部模板"><a href="#外部模板" class="headerlink" title="外部模板"></a>外部模板</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">std</span><span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 强行实例化</span><span class="token keyword">extern</span> <span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">std</span><span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不在该当前编译文件中实例化模板</span></code></pre><p>其实就是一个实例化时机的问题.</p><h3 id="类型别名模板"><a href="#类型别名模板" class="headerlink" title="类型别名模板"></a>类型别名模板</h3><p>模板是用来生成类型的.</p><p>类型别名一般这样用:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> 原名称 新名称</code></pre><p>对于复杂一点的就显得很难看,可以使用<code>using</code>:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>process<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> NewProcess <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">using</span> TrueDarkMagic <span class="token operator">=</span> MagicType<span class="token operator">&lt;</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    TrueDarkMagic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> you<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a>委托构造</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> value1<span class="token punctuation">;</span>    <span class="token keyword">int</span> value2<span class="token punctuation">;</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 委托 Base() 构造函数</span>        value2 <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Base <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>value1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>value2 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没什么好说的,其他语言在设计的时候就已经支持了.</p><h2 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a>继承构造</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> value1<span class="token punctuation">;</span>    <span class="token keyword">int</span> value2<span class="token punctuation">;</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 委托 Base() 构造函数</span>        value2 <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span> <span class="token operator">:</span> <span class="token keyword">public</span> Base <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> Base<span class="token operator">::</span>Base<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 继承构造</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Subclass <span class="token class-name">s</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>value1 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>value2 <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="overide-final"><a href="#overide-final" class="headerlink" title="overide , final"></a>overide , final</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Base <span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SubClass<span class="token operator">:</span> Base <span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合法</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法, 父类没有此虚函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Base <span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> final<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> SubClass1 final<span class="token operator">:</span> Base <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合法</span><span class="token keyword">struct</span> SubClass2 <span class="token operator">:</span> SubClass1 <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法, SubClass1 已 final</span><span class="token keyword">struct</span> SubClass3<span class="token operator">:</span> Base <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 非法, foo 已 final</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这两点也没什么好说的,其他语言早就支持了.</p><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span>捕获列表<span class="token punctuation">]</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">mutable</span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span> 异常属性 <span class="token operator">-</span><span class="token operator">></span> 返回类型 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span></code></pre><h3 id="值捕获"><a href="#值捕获" class="headerlink" title="值捕获"></a>值捕获</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lambda_value_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> copy_value <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> stored_value <span class="token operator">=</span> <span class="token function">copy_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"stored_value = "</span> <span class="token operator">&lt;&lt;</span> stored_value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这时, stored_value == 1, 而 value == 100.</span>    <span class="token comment" spellcheck="true">// 因为 copy_value 在创建时就保存了一份 value 的拷贝</span><span class="token punctuation">}</span></code></pre><h3 id="引用捕获"><a href="#引用捕获" class="headerlink" title="引用捕获"></a>引用捕获</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">lambda_reference_capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> copy_value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>value<span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> stored_value <span class="token operator">=</span> <span class="token function">copy_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"stored_value = "</span> <span class="token operator">&lt;&lt;</span> stored_value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这时, stored_value == 100, value == 100.</span>    <span class="token comment" spellcheck="true">// 因为 copy_value 保存的是引用</span><span class="token punctuation">}</span></code></pre><h3 id="范型Lambda"><a href="#范型Lambda" class="headerlink" title="范型Lambda"></a>范型Lambda</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token punctuation">,</span> <span class="token keyword">auto</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="函数对象包装器"><a href="#函数对象包装器" class="headerlink" title="函数对象包装器"></a>函数对象包装器</h2><p>如果不使用<code>std::fucntion()</code>是这样子的:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> foo <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义函数类型, using 的使用见上一节中的别名语法</span><span class="token keyword">void</span> <span class="token function">functional</span><span class="token punctuation">(</span>foo f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 定义在参数列表中的函数类型 foo 被视为退化后的函数指针类型 foo*</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过函数指针调用函数</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">functional</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传递闭包对象，隐式转换为 foo* 类型的函数指针值</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lambda 表达式调用</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用了之后是这样的:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> para<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> para<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// std::function 包装了一个返回值为 int, 参数为 int 的函数</span>    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func <span class="token operator">=</span> foo<span class="token punctuation">;</span>    <span class="token keyword">int</span> important <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> func2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>value<span class="token operator">+</span>important<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Skia的编译</title>
      <link href="/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/"/>
      <url>/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/google/skia" target="_blank" rel="noopener">https://github.com/google/skia</a></p><p><a href="https://skia.googlesource.com/skia" target="_blank" rel="noopener">https://skia.googlesource.com/skia</a></p><p>这两个都可以,如果不能科学上网,建议使用github上的镜像.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Static --args='is_official_build=false'bin/gn gen out/Shared --args='is_official_build=false is_component_build=true'</code></pre><p>如果出现问题,就使用python脚本更新依赖:</p><pre class=" language-shell"><code class="language-shell">python2 tools/git-sync-deps</code></pre><p>然后就是:</p><pre class=" language-shell"><code class="language-shell">ninja -C out/Shared</code></pre><h2 id="为Android编译"><a href="#为Android编译" class="headerlink" title="为Android编译"></a>为Android编译</h2><pre class=" language-shell"><code class="language-shell">bin/gn gen out/arm   --args='ndk="/tmp/ndk" target_cpu="arm"'bin/gn gen out/arm64 --args='ndk="/tmp/ndk" target_cpu="arm64"'</code></pre><p>ndk的地址写自己电脑上的地址.<br>如果需要so库,还是需要加上<code>is_component_build=true</code></p><h2 id="单独编译测试APP"><a href="#单独编译测试APP" class="headerlink" title="单独编译测试APP"></a>单独编译测试APP</h2><ul><li><p>viewer: 包含各种demo,按D键可以切换后端实现</p><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Release --args='is_debug=false'ninja -C out/Release viewer</code></pre></li><li><p>HelloWorld: 绘制一些简单的形状</p><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Release --args='is_debug=false'ninja -C out/Release HelloWorld</code></pre></li><li><p>SkiaSDLExample: SDL + Skia</p><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Release --args='is_debug=false'ninja -C out/Release HelloWorld</code></pre></li><li><p>editor: 一个纯文本编辑器</p><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Release --args='is_debug=false'ninja -C out/Release editor</code></pre></li></ul><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="is-official-build"><a href="#is-official-build" class="headerlink" title="is_official_build"></a>is_official_build</h3><p>如果这个属性为true,则会在你电脑上的系统环境取寻找一些依赖库,比如libjpeg,libpng等,如果你设置成true,编译过程中发现一些库不存在或者函数错误等,建议直接把is_official_build设置成false.这样就用skia项目中的源码依赖了,就不会出问题了.</p><h3 id="is-component-build"><a href="#is-component-build" class="headerlink" title="is_component_build"></a>is_component_build</h3><p>设置为true,则编译成多个小的动态链接库,比如各种so文件.如果需要使用skia,建议设置成true.</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://skia.org/user/build" target="_blank" rel="noopener">https://skia.org/user/build</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 图形渲染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译 </tag>
            
            <tag> Skia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调试flutter_tools</title>
      <link href="/2020/05/15/flutter/diao-shi-flutter-tools/"/>
      <url>/2020/05/15/flutter/diao-shi-flutter-tools/</url>
      
        <content type="html"><![CDATA[<p>在运行<code>flutter</code>命令的时候,比如<code>flutter run</code>,实际上执行的是<code>flutter_tools.snapshots</code>,而这个快照文件的源码入口就是<code>flutter_tools.dart</code>.</p><p>既然是普通的dart命令行程序,那么按照Dart命令行程序的调试方法进行调试即可.</p><p>建议提前下载一个flutter项目的源码.下载源码之后,按照下面的步骤就可以进行调试了:</p><h2 id="配置-Dart-SDK"><a href="#配置-Dart-SDK" class="headerlink" title="配置 Dart SDK"></a>配置 Dart SDK</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_dart_sdk.png" alt="配置Dart SDK"></p><h2 id="添加Configuration"><a href="#添加Configuration" class="headerlink" title="添加Configuration"></a>添加Configuration</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_config.png" alt="Configuration"></p><h2 id="执行调试"><a href="#执行调试" class="headerlink" title="执行调试"></a>执行调试</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_debug.png" alt="调试"></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Lock</title>
      <link href="/2020/05/15/android/java-zhong-de-lock/"/>
      <url>/2020/05/15/android/java-zhong-de-lock/</url>
      
        <content type="html"><![CDATA[<p>Java 中保证线程安全，操作同步的方法有很多种，比如：</p><ul><li>使用synchronized关键字</li><li>使用<code>Lock</code>的实现类</li></ul><p>其中synchronized属于语言级别的处理，无需我们去处理细节，而<code>Lock</code>则是一个接口，我们可以自定义Lock或者使用内置的Lock实现类，比如ReentrantLock等去精确控制同步。</p><h2 id="概念-锁分类"><a href="#概念-锁分类" class="headerlink" title="概念/锁分类"></a>概念/锁分类</h2><h3 id="悲观锁-VS-乐观锁"><a href="#悲观锁-VS-乐观锁" class="headerlink" title="悲观锁 VS 乐观锁"></a>悲观锁 VS 乐观锁</h3><p>悲观锁和乐观锁并不是特指哪个锁（比如叫做悲观锁，乐观锁的类），而是并发情形下的两种不同策略。</p><ul><li><p>悲观锁</p><p>每次线程去读数据的时候都认为会被其他线程修改，因此每次访问数据的时候都会上锁，其他线程如果想访问必须等到它释放锁；</p></li><li><p>乐观锁</p><p>每次线程去读数据的时候都认为不会被其他线程修改，因此不会上锁；如果线程想更新数据，会在更新前检查一下自己在读取和更新的这段时间里有没有其他线程修改过这个数据，如果修改过，则重新读取，再次尝试更新，否则更新，依次循环；</p></li></ul><p>总的来说，就是悲观锁阻塞事务，乐观锁回滚重试。</p><p>乐观锁比较适合用于修改比较少的情形，如果修改比较多，则冲突比较多，会降低性能，不如使用悲观锁。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>即Compare And Swap，是用于实现多线程同步的原子指令。</p><ol><li>比较：读取到一个值A，在将其更新为B之前，坚持原值是否仍为A</li><li>交换：如果是，则将A更新为B，结束，否则什么都不做；</li></ol><p>上面的两个步骤是原子性的，在CPU看来就是一个指令。</p><p>CAS利用CPU指令，在硬件层面保证了操作的原子性。</p><p>CAS整个过程中并<strong>没有加锁</strong>，乐观锁就是基于CAS实现的。</p><p>CAS的使用可以参考AtomicInteger等数字并发类。</p><p>使用CAS可以有效解决并发的效率问题，但同时也会引入ABA问题，比如一个线程将A改成B又改回A，另一个线程对其进行更新，则会忽略这个操作，会产生问题。JDK中的实现类添加了特殊的标记，用来解决这个问题。</p><p>Java中几乎全部都是悲观锁，因为乐观锁本质上不是锁，只是CAS算法循环。</p><h3 id="自旋锁、偏向锁、轻量级锁、重量级锁"><a href="#自旋锁、偏向锁、轻量级锁、重量级锁" class="headerlink" title="自旋锁、偏向锁、轻量级锁、重量级锁"></a>自旋锁、偏向锁、轻量级锁、重量级锁</h3><p>synchronized关键字处理有以下几个情形：</p><ol><li>初次执行synchronized代码块的时候，锁对象变成了<strong>偏向锁</strong>，通俗点说就是偏向于第一个获取它的线程，执行完同步块之后并不会主动释放锁，当第二次到达同步块的时候，此时线程判断持有锁的是自己，如果是正常往下执行，则由于之前没有释放锁，因此不必重新加锁，如果始终只有一个线程，偏向锁几乎没有多余的开销，性能比较好；</li><li>一旦有第二个线程加入锁竞争（当某个线程获取锁的时候发现锁已经被占用，只能等待其释放），偏向锁就升级为轻量级锁（自旋锁）。在轻量级锁状态下的继续锁竞争，没有抢到锁的线程将自旋（循环判断锁是否能被成功获取），长时间的自旋是很消耗资源的，一个线程有锁，其余线程只能空耗CPU，这种情况叫做忙等。如果多个线程用一个锁，但是没有发生锁竞争，或发生了轻微的锁竞争，synchronized使用轻量级锁，允许短时间的忙等。</li><li>忙等是有限度的，某个达到最大自旋次数的线程，会将轻量级锁升级成重量级锁。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</li></ol><p>一个锁，只能按照偏向锁 –&gt; 轻量级锁 –&gt; 重量级锁的顺序逐渐升级，不允许降级。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p><strong>允许同一个线程多次获取同一把锁</strong>，比如一个递归方法中有加锁操作，递归操作不阻塞自己，这种锁就叫做可重入锁。</p><p>Java中几乎所有的场景都只需要使用可重入锁，ReentrantLock等（以Reentraant开头的锁），以及JDK提供的所有Lock的实现类，包括synchronized都是属于可重入锁。</p><h3 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h3><p><strong>公平锁</strong>： 如果多个线程申请同一把公平锁，当锁释放的时候，先申请的线程先得到锁；</p><p><strong>非公平锁</strong>：如果多个线程申请同一把非公平锁，当锁释放的时候，后申请的线程可能先获得到锁，其顺序是随机的，或者是根据指定的优先级顺序。</p><p>对于synchronized而言，它就是一个非公平锁，而且没有办法变成公平锁。</p><h3 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h3><p>Java中并没有提供任何直接中断线程的方法，只提供了中断机制，即线程A向线程B发起中断请求，但线程B并不会立即停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略该中断。</p><p>如果线程A持有锁，线程B等待获取该锁，由于线程A持有锁的时间比较长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程请求中断B，这就是可中断锁。</p><p>Java中<strong>synchronized是不可中断锁，Lock的实现类都是可中断锁</strong>。</p><h3 id="读写锁、共享锁、互斥锁"><a href="#读写锁、共享锁、互斥锁" class="headerlink" title="读写锁、共享锁、互斥锁"></a>读写锁、共享锁、互斥锁</h3><p>读写锁其实是一对锁，即一个读锁（共享锁），一个写锁（互斥锁，排他锁）。</p><p>看看代码中的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for reading.     *     * @return the lock used for reading     */</span>    Lock <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for writing.     *     * @return the lock used for writing     */</span>    Lock <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到读写锁接口只定义两个方法，一个用来返回读锁，一个用来返回写锁。</p><p>如果读取一个值是为了更新它，加锁的时候就加写锁；</p><p>如果读取一个值只是为了展示，加锁的时候可以加读锁；</p><p>读写锁是悲观锁策略。</p><h2 id="Lock的定义"><a href="#Lock的定义" class="headerlink" title="Lock的定义"></a>Lock的定义</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取锁.     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取锁，直到当前线程被标记为中断     * {@linkplain Thread#interrupt interrupted}.     */</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果获取到了锁就返回true，否则立即返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 超时时间内获取到锁，则返回true，否则返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放锁.     */</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个绑定到该Lock对象的Condition实例     */</span>    Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再来看看它的常见实现类：</p><p><img src="https://oss.jiangkang.tech/jk/Lock.png" alt="Lock"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/71156910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71156910</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Map</title>
      <link href="/2020/05/15/android/java-zhong-de-map/"/>
      <url>/2020/05/15/android/java-zhong-de-map/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/Map.png" alt="Map"></p><h2 id="哈希表-散列表"><a href="#哈希表-散列表" class="headerlink" title="哈希表/散列表"></a>哈希表/散列表</h2><p><img src="https://oss.jiangkang.tech/jk/HashMap%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt=""></p><p>通俗的说就是，使用散列函数将key值映射到数组下标，这样就可以根据key值直接访问到元素存储位置，这种结构就叫哈希表（散列表）。</p><p>将key值映射到数组下标的函数就做散列函数，这个映射过程是一个key值压缩的过程，因而不可避免会存在两个不同的值映射到了相同的下标的情况，这种情况叫做<strong>哈希冲突</strong>。</p><p>散列函数的选取也是有套路可循的，比如除数取余法，平方取中法，数字分析法，折叠法扥等。</p><p>解决哈希冲突一般有两种方法：</p><ul><li><p>开放定址法</p><p>如果遇到冲突，则向后几步再存；</p></li><li><p>链接法（拉链法）</p><p>如果遇到冲突，则在对应位置后面添加一个链表节点。</p></li></ul><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程安全的。</p><p>查询的效率可以达到O(1)。</p><p>Java8中大部分情况是基于哈希表实现，当链表长度达到8的时候，转为红黑树实现。</p><p>不保证存取顺序；</p><p><img src="https://oss.jiangkang.tech/jk/HashMap-%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt=""></p><p>具体的看存储结构：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>看看树节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// red-black tree links</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needed to unlink next upon deletion</span>        <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>不允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程不安全的。</p><p>先来看看查找的关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">;</span> e <span class="token operator">!=</span> null <span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，就是先取key的hash值，然后对表长取余确定好数组下标。然后从数组下标处的链表开始查找。</p><p>再来看看put操作的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure the value is not null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Makes sure the key is not already in the hashtable.</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> entry <span class="token operator">!=</span> null <span class="token punctuation">;</span> entry <span class="token operator">=</span> entry<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                V old <span class="token operator">=</span> entry<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                entry<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> old<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Rehash the table if the threshold is exceeded</span>            <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab <span class="token operator">=</span> table<span class="token punctuation">;</span>            hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Creates the new entry.</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>还是通过对key做hash运算，然后取余得到数组下标，再进行遍历，如果已经存在对应的key，则替换新值；如果是新key，则添加到链表最前面。</p><p>并且可以看到value不可以为null，否则抛出异常。key也不能为null，要不然也会抛出空指针异常。</p><p>可以看到看到get/put方法都是同步的，保证了线程安全。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>双向链表与HashMap的结合。</p><p>保证插入的顺序，遍历的时候先得到的是先插入的元素。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的List</title>
      <link href="/2020/05/15/android/java-zhong-de-list/"/>
      <url>/2020/05/15/android/java-zhong-de-list/</url>
      
        <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p><img src="https://oss.jiangkang.tech/jk/UML-List.png" alt=""></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>通过动态数组存储数据的，数组默认长度为10，实际使用过程中可以通过<code>trimToSize()</code>方法剪裁到实际的list大小。</p><p>ArrayList是线程不安全的；</p><p>ArrayList由于通过数组索引定位，所以查找效率比较高，但是插入和删除操作需要移动数组元素，因此插入和删除效率比较低；</p><p>当数组元素增加的时候，会增加原来尺寸的一半进行扩容；如果还不满足，则直接用原来的长度加上添加元素的长度作为最终的长度。</p><p>实现了RandomAccess接口，可以随机访问；</p><p>无参构造函数new出来的ArrayList数组默认长度为10，在明确元素个数的时候可以指定数组长度；</p><p>操作的关键在于对数组的控制，比如扩容，复制等等。</p><h3 id="扩容关键代码"><a href="#扩容关键代码" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码"><a href="#查找关键代码" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码"><a href="#插入关键代码" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>基于链表实现的，LinkedList中持有一个size，一个头结点，一个尾结点。</p><p>每个结点包括结点值，指向前一个结点的引用，指向后一个结点的引用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>LinkedList是线程不安全的；</p><p>实现了Deque，可以用做双向队列。</p><p>插入/删除效率比较高，但是查询效率比ArrayList低。</p><p>操作的关键在于对链表的操作，比如新增，删除，查找，遍历等。</p><h3 id="插入关键代码-1"><a href="#插入关键代码-1" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Inserts element e before non-null Node succ.     */</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert succ != null;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-1"><a href="#查找关键代码-1" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>基于数组实现的List，可以扩容和裁剪。</p><p>Vector是线程安全的。</p><p>默认长度为10。</p><p>扩容方式与ArrayList不同，Vector中在构造函数里可以传入一个增量扩容大小capacityIncrement，如果不指定则默认为0；当扩容的时候，先判断这个增量扩容大小capacityIncrement，如果capacityIncrement大于0，则容量增加capacityIncrement，否则容量翻倍。</p><p>查询效率高，插入，删除效率低，由于是同步操作，比ArrayList性能低。</p><h3 id="扩容关键代码-1"><a href="#扩容关键代码-1" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码-2"><a href="#插入关键代码-2" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span>E obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index                                                     <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementCount <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>        elementCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-2"><a href="#查找关键代码-2" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre><code>public synchronized int indexOf(Object o, int index) {        if (o == null) {            for (int i = index ; i &lt; elementCount ; i++)                if (elementData[i]==null)                    return i;        } else {            for (int i = index ; i &lt; elementCount ; i++)                if (o.equals(elementData[i]))                    return i;        }        return -1;    }</code></pre><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>继承自Vector，新增了pop/push操作。</p><p>继承Vector的特性。</p><h3 id="pop-push操作关键代码"><a href="#pop-push操作关键代码" class="headerlink" title="pop/push操作关键代码"></a>pop/push操作关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">push</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addElement</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        E       obj<span class="token punctuation">;</span>        <span class="token keyword">int</span>     len <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeElementAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>基于数组实现，并利用<code>ReentrantLock</code>实现同步机制，保证线程安全。</p><p>然后利用了写时复制的思想，在修改的时候首先复制一个副本，在副本上进行修改，最后将引用设置到副本上。</p><h3 id="插入关键代码-3"><a href="#插入关键代码-3" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> len <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span>                                                    <span class="token string">", Size: "</span><span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-3"><a href="#查找关键代码-3" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">,</span>                               <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java队列</title>
      <link href="/2020/05/15/android/java-dui-lie/"/>
      <url>/2020/05/15/android/java-dui-lie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/UML-Queue.png" alt="Queue"></p><p>先来看一下Queue的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//插入成功返回true，如果容量不足，抛出异常</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//插入成功返回true，否则返回false，对于容量有限的队列，建议使用add(E e)</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则返回null</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则返回null</span>    E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些方法的区别：</p><table><thead><tr><th>操作</th><th>抛出异常</th><th>返回具体值</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td></tr><tr><td>检查(只查看)</td><td>element()</td><td>peek()</td></tr></tbody></table><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>BlockingQueue也是一个接口，继承自Queue。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞插入，等待队列有剩余容量才插入</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞获取，一直等到数列不为空才出队</span>    E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取剩余容量，但是在多线程的情况下不准</span>    <span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//移除队列中所有的元素，并添加到指定的集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从队列中最多移除maxElements个元素，并添加到指定集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> maxElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="如何理解这个“blocking”？"><a href="#如何理解这个“blocking”？" class="headerlink" title="如何理解这个“blocking”？"></a>如何理解这个“blocking”？</h3><p><strong>对于插入（入队）操作：</strong>如果是无边界的队列，则直接插入；如果是有边界的队列，则需要等待队列中又空余容量的时候才能插入。</p><p><strong>对于出队操作：</strong>当队列不为空时，才会出队。</p><p>BlockingQueue还有如下特点：</p><ul><li>线程安全</li><li>不允许null值</li></ul><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>这是基于链表的BlockingQueue实现。</p><p>这里还有一个<strong>吞吐量</strong>的概念：队列每秒可以处理的消息数量，包括两个方面，一方面是发送的数量，一方面是接收的数量。</p><p>可以在构造方法传入一个容量，用来避免队列过度扩大，如果不指定容量，默认容量就位<code>Integer.MAX_VALUE</code>。</p><p>通过<code>ReentranceLock</code>和<code>Condition</code>来保证线程安全。</p><p>先来看一下链表节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还有一些主要的fields：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** The capacity bound, or Integer.MAX_VALUE if none */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Current number of elements */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Head of linked list.     * Invariant: head.item == null     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Tail of linked list.     * Invariant: last.next == null     */</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by take, poll, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting takes */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by put, offer, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting puts */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由此知道LinkedBlockingQueue中包含了元素个数，容量边界，以及头尾节点等filed，还包含了用来保证线程安全性的takeLock，putLock，以及条件队列notEmpty和notFull。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不允许null值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 线程安全操作</span>        <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//如果队列已满，则阻塞</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 入队操作</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取当前元素个数</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果队列还未满，则唤醒其他线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert putLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert last.next == null;</span>        last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，队列不允许null值，并且通过ReentrantLock和Condition保证线程安全。</p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E x<span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>        takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>            <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert takeLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert head.item == null;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        head <span class="token operator">=</span> first<span class="token punctuation">;</span>        E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>操作和插入操作差不多。</p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于数组实现的BlockingQueue。</p><p>属于典型的有界缓冲区，有固定的容量，一旦创建，容量无法修改。</p><p>在构造方法中必须传入一个容量参数，还可以传入一个参数用来指示队列的公平性访问问题；</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>        notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，传入的fair参数实际上是用在ReentrantLock上的，用来表示用的是公平锁，还是非公平锁。</p><p>如果一个线程申请一把公平锁，那么当锁释放的时候，先申请的线程先得到锁，非常公平；</p><p>如果一个线程申请的是一把非公平锁，那么当锁释放的时候，后申请的线程可能会先得到锁，有随机性；</p><p>使用非公平锁的队列的吞吐量比使用公平锁的对垒的吞吐量要大，通常情况下都是优先使用非公平锁。</p><p>对于synchronized关键字来说，它也是一种非公平锁，而且没有任何方式可以将它变成公平锁。</p><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 队列满则阻塞</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[putIndex] == null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-1"><a href="#移除-1" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[takeIndex] != null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue也是一种BlockingQueue，但是它比较特殊，它有如下特点：</p><ul><li>并不存储任何元素，即容量为0，数据直接在配对的生产者/消费者之间传递，不会输入到缓冲队列中；</li><li>入队和出队线程必须一一匹配，要不然先到的线程会阻塞；</li><li>支持公平，非公平策略，默认为非公平策略。公平策略，基于内部的<code>TransferStack</code>结构实现，非公平策略基于内部的<code>TransferQueue</code>结构实现；</li><li>基于一种无锁算法实现</li></ul><p>从构造方法中可以看出其公平策略不同导致实现的不同：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个数据结构均是内部抽象类<code>Transfer</code>的实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 执行put和take操作         *         * @param e 如果不为空，则交由消费者处理;         *          如果为空，请求返回生产者添加的一个item.         * @param timed 是否支持超时         * @param nanos 超时时间，纳秒         * @return 如果不为空，表示值被提供或者被接收了; 如果为空,         *         则表示操作由于超时失败，或者线程调用Thread.interrupted方法         */</span>        <span class="token keyword">abstract</span> E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再来看一下它的size方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>不会存储任何元素，容量为0.</p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 入队e，如果没有另一个线程接收（出队），则阻塞</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-2"><a href="#移除-2" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 出队，如果没有另一个线程入队，则阻塞</span>    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E e <span class="token operator">=</span> transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>基于数组（平衡二叉堆，优先堆）实现，元素是有序的，你需要实现Comparable，以方便元素进行比较，如果不实现，则按照自然顺序，如果队列不为空，则第一个元素为最小的元素。</p><p>这是一个无界的队列，默认容量大小为11，添加元素的时候会进行扩容。</p><p>总结一下特点吧：</p><ul><li>基于数组实现，因而可以自由扩容，属于无界队列</li><li>有序（根据优先级，而优先级是通过Comparable实现进行比较），小的元素再前面</li><li>线程不安全</li><li>不支持null值</li></ul><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其中有扩容操作，还有对堆的操作：</p><h3 id="扩容方式"><a href="#扩容方式" class="headerlink" title="扩容方式"></a>扩容方式</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果之前容量小于64，则容量翻倍; 否则增长50%</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldCapacity <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-3"><a href="#移除-3" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E result <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>依然是对数组的处理，关键点在处理堆的过程上。</p><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue是一个阻塞队列，既然是阻塞队列，那么肯定有阻塞操作put和take。同时也是线程安全的。</p><p>它也是基于数组实现的，和PriorityQueue的存储结构无异，区别有以下几点：</p><ul><li>PriorityBlockingQueue是线程安全的（ReentrantLock保证）；</li><li>支持阻塞操作put和take</li></ul><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p>DelayQueue也是一个BlockingQueue，内部存储基于PriorityQueue，并通过ReentrantLock保证线程安全操作。</p><p>它有如下特点：</p><ul><li>支持延迟获取元素（在创建的时候有一个过期时间，过期之后才可以获取元素）</li><li>PriorityQueue是无界的，因此DelayQueue也是无界的</li><li>线程安全的</li></ul><p>插入的元素类型必须实现Delay接口:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回剩余的delay时间     *     * @param unit 时间单元     * @return 剩余的时间; 为0或者负数，则表示已经过期     */</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关键在于出队操作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 此处是关键，获取剩余时间，如已经没有剩余时间则出队</span>                    <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                                leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用DelayQueue最常见的的场景有：</p><ul><li><p>缓存系统的设计</p><p>使用DelayQueue保存带有效期的缓存元素，使用一个线程轮询DelayQueue，一旦获取到元素则表示缓存到期了；</p></li><li><p>定时任务调度</p><p>使用DelayQueue保存当天要执行的任务和时间，一旦获取到任务就开始执行，Timer中的TimingQueue就是基于DelayQueue实现的。</p></li></ul><h2 id="使用场景总结"><a href="#使用场景总结" class="headerlink" title="使用场景总结"></a>使用场景总结</h2><p>队列一般用作基于生产-消费者模型的系统中，下面举一些比较常见的例子：</p><ul><li><p>线程池的设计</p><p>JDK中的线程池设计使用到了各种BlockingQueue的实现，用来作为线程的容器。</p><p>比如固定线程数量和单个线程的ExecutorService，使用的是LinkedBlockingQueue；</p><p>缓存线程个数的ExecutorService，使用的是SynchronousQueue；</p></li><li><p>缓存系统的设计</p><p>比如前面提到的DelayQueue，元素可以带缓存时间。</p></li><li><p>定时调度的设计（如Timer）</p><p>比如前面提到的DelayQueue</p></li><li><p>Android Framework中队列的使用</p><ul><li>Android 的AsyncLayoutInflater中使用的ArrayBlockingQueue；</li><li>AnimationThread中使用了PriorityQueue；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle读取配置文件</title>
      <link href="/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/"/>
      <url>/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>gradle中使用了gradle.properties和local.properties文件.</p><p>build.gradle 可以直接获取同级目录和上层目录的properties文件.</p><p>如果properties文件在其他目录,或者不是<code>.properties</code>的格式,我们可以使用Java中的Properties类来读取这些文件.</p><p>Properties文件支持以下几种格式:</p><ul><li>key=value</li><li>key: value</li></ul><p>在Android Studio中建议统一使用<code>key=value</code>形式</p><p>看一个kotin dsl 的例子:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> flutterProjectRoot<span class="token operator">:</span> Path <span class="token operator">=</span> rootProject<span class="token punctuation">.</span>projectDir<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> plugins <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> pluginsFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>flutterProjectRoot<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">".flutter-plugins"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 读取属性文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pluginsFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">FileReader</span><span class="token punctuation">(</span>pluginsFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历属性</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$key</span>:<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取指定key的value</span><span class="token function">println</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sqflite"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Path中可以使用<code>resolve</code>方法,将路径字符串转换成对应格式的Path.</p><pre class=" language-kotlin"><code class="language-kotlin">flutterProjectRoot<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang语法快速入门</title>
      <link href="/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/"/>
      <url>/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="if-else-变体"><a href="#if-else-变体" class="headerlink" title="if/else 变体"></a>if/else 变体</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> statement<span class="token punctuation">;</span> condition <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">if</span> condition<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch 下的每个case不必带break,匹配到了某个case之后会自动跳出.</p><p>可以使用<code>fallthrough</code>强制执行后面的case的代码.</p><p>如果switch没有条件表达式,它会默认匹配true</p><p>也可以判断变量的type:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 你可以定义任意个数的case */</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* 可选 */</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" x 的类型 :%T"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>                      <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 int 型"</span><span class="token punctuation">)</span>                             <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 float64 型"</span><span class="token punctuation">)</span>                 <span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 func(int) 型"</span><span class="token punctuation">)</span>                            <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 bool 或 string 型"</span> <span class="token punctuation">)</span>             <span class="token keyword">default</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"未知型"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>可以使用 <code>for.. range</code>进行迭代:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> oldMap <span class="token punctuation">{</span>    newMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">}</span></code></pre><p>for中的三个条件都可以忽略.</p><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>自增+1,多用于枚举</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>golang中的数组是值类型,修改副本中的元素不会影响原来的数据.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"France"</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> a <span class="token comment" spellcheck="true">// a copy of a is assigned to b</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Singapore"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-go"><code class="language-go">a is <span class="token punctuation">[</span>USA China India Germany France<span class="token punctuation">]</span>  b is <span class="token punctuation">[</span>Singapore China India Germany France<span class="token punctuation">]</span> </code></pre><p>数组的大小是类型的一部分。因此[3]int和[2]int是不同的类型。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Golang中切片是数组的抽象,Go中数组长度不可变,但是切片可以.切片本身没有任何数据,它只是对现有数组的引用.</p><p>因此,。对切片所做的任何修改都将反映在底层数组中.</p><p>可以使用make方法创建切片:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以简写为</span>slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span></code></pre><p><code>len()</code>是切片中元素的数量</p><p><code>cap()</code>是底层数组中元素的数量</p><p><code>append()</code>可以用来给切片追加元素,也会改变底层数组的内容,但是在切片cap不大于len的情况下,会扩容导致分配新的数组空间,这种情况下引用该数组的其他切片不被影响.</p><p><code>copy()</code>不会在两个切片之间建立联系.</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>同样可以使用<code>make</code>创建,也可以直接初始化:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">/* 声明变量，默认 map 是 nil */</span><span class="token keyword">var</span> map_variable <span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token comment" spellcheck="true">/* 使用 make 函数 */</span>map_variable <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token punctuation">)</span>rating <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span> <span class="token punctuation">{</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span></code></pre><p>如果不初始化,则是一个nil map.</p><p><code>delete(map, key)</code>用来删除元素</p><p><code>map[key]</code>获取不存在的key值时,会返回默认值,string返回空字符串,可以使用:</p><pre class=" language-go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> </code></pre><p>ok是布尔类型.</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可变参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>arg <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>函数也是Go中的一种数据类型,可以作为另一个函数的参数.</p><p><code>defer</code>:当一个函数执行到最后,会逆序执行defer语句,然后return.</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>声明指针:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> var_name <span class="token operator">*</span><span class="token keyword">var</span><span class="token operator">-</span><span class="token keyword">type</span><span class="token keyword">var</span> ip <span class="token operator">*</span><span class="token builtin">int</span>        <span class="token comment" spellcheck="true">/* 指向整型*/</span><span class="token keyword">var</span> fp <span class="token operator">*</span><span class="token builtin">float32</span>    <span class="token comment" spellcheck="true">/* 指向浮点型 */</span></code></pre><p>获取指针的值:<code>*ptr</code></p><p>使用指针传递参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">*</span>val <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">}</span></code></pre><h2 id="结构嵌套"><a href="#结构嵌套" class="headerlink" title="结构嵌套"></a>结构嵌套</h2><ul><li><p>结构体嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>      city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>      name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    address Address<span class="token punctuation">}</span></code></pre></li><li><p>匿名字段/提升字段</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    weight <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human <span class="token comment" spellcheck="true">// 匿名字段，那么默认Student就包含了Human的所有字段</span>    speciality <span class="token builtin">string</span><span class="token punctuation">}</span> </code></pre><p>可以像这样初始化:</p><pre class=" language-go"><code class="language-go">mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Computer Science"</span><span class="token punctuation">}</span></code></pre><p>字段可以直接访问.</p><pre class=" language-go"><code class="language-go">mark<span class="token punctuation">.</span>name</code></pre></li></ul><p>如果想导出结构体和它的字段,则首字母必须大写.</p><p>结构体是值类型,如果两个结构体中的字段都相等(前提是字段类型可以比较),则认为两个结构体是相等的.</p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><p><code>make</code>用于内建类型(map, slice,channel)的内存分配.</p><p><code>new</code>用于各种类型的内存分配,返回的是指针.</p><h2 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h2><p>方法指的是带接收者(即对象)的函数.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Type<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">funcName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 方法是可以继承的,如果匿名字段实现了一个方法,包含这个匿名字段的struct也能调用这个方法:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    age   <span class="token builtin">int</span>    phone <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human  <span class="token comment" spellcheck="true">//匿名字段</span>    school <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human   <span class="token comment" spellcheck="true">//匿名字段</span>    company <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Human<span class="token punctuation">)</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hi, I am %s you can call me on %s\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>name<span class="token punctuation">,</span> h<span class="token punctuation">.</span>phone<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"222-222-YYYY"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"MIT"</span><span class="token punctuation">}</span>    sam <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"111-888-XXXX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Golang Inc"</span><span class="token punctuation">}</span>    mark<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sam<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>方法还可以重写,即在包含匿名字段的struct再实现一个方法.</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Text的使用</title>
      <link href="/2020/05/08/flutter/flutter-text-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-text-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>文本作为UI最基本的元素，最基本的用法有这些：</p><ul><li>字体</li><li>文字大小、颜色</li><li>一些常用样式，比如倾斜，加粗，下划线，删除线等</li><li>文字超出边界之后如何显示</li><li>文字的单行，多行控制</li><li>文字的显示方向</li><li>富文本的显示</li><li>文字渐变，阴影</li><li>文本点击事件</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>如果需要使用自定义字体，则需要在项目中的fonts文件夹下放置字体文件，然后在配置文件pubspec.yaml中进行配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  <span class="token key atrule">fonts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> Raleway      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Italic.ttf          <span class="token key atrule">style</span><span class="token punctuation">:</span> italic    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> RobotoMono      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Bold.ttf          <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">700</span></code></pre><p>使用字体主要有两种方式，一种是通过主题设置统一的字体，一种是为单独的Widget设置字体。</p><p><strong>通过主题设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  title<span class="token punctuation">:</span> <span class="token string">'Custom Fonts'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Set Raleway as the default app font.</span>  theme<span class="token punctuation">:</span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'Raleway'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  home<span class="token punctuation">:</span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>单独设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>  <span class="token string">'Roboto Mono sample'</span><span class="token punctuation">,</span>  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'RobotoMono'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="文字大小，颜色，倾斜，加粗"><a href="#文字大小，颜色，倾斜，加粗" class="headerlink" title="文字大小，颜色，倾斜，加粗"></a>文字大小，颜色，倾斜，加粗</h3><p>这些样式也都是在TextStyle中设置的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"style: color,fontWeight,fontSize,fontStyle"</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>                fontStyle<span class="token punctuation">:</span> FontStyle<span class="token punctuation">.</span>italic<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>其中fontSize使用的是逻辑像素，默认为14，FontWeight.bold表示加粗，当然还可以设置指定的值，fontStyle可以用来控制文本是否倾斜。</p><h3 id="下划线-上划线，删除线，波浪线"><a href="#下划线-上划线，删除线，波浪线" class="headerlink" title="下划线/上划线，删除线，波浪线"></a>下划线/上划线，删除线，波浪线</h3><p>下划线，删除线等属于文本装饰的一种，在TextStyle中通过decoration属性描述：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">TextStyle</span><span class="token punctuation">(</span>                decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>underline<span class="token punctuation">,</span>                decorationColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                decorationStyle<span class="token punctuation">:</span> TextDecorationStyle<span class="token punctuation">.</span>solid<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>效果如下：<br><img src="https://oss.jiangkang.tech/jk/text_underline.png" alt=""></p><p>可以指定下划线的颜色，样式，比如线的实现，还是虚线，还是波浪线等;<br>对于这些装饰，还可以设置双下划线，点线等效果。<br><img src="https://oss.jiangkang.tech/jk/text_underline_double.png" alt=""></p><h3 id="文字超出边界如何显示"><a href="#文字超出边界如何显示" class="headerlink" title="文字超出边界如何显示"></a>文字超出边界如何显示</h3><p>超出边界的显示有三种类型：</p><ul><li>显示省略号</li><li>直接截断</li><li>渐隐</li></ul><p>这几种显示样式都是通过overflow属性控制的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.clip;overflow: TextOverflow.clip;overflow: TextOverflow.clip;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>clip<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>fade<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="文字的单行与多行显示"><a href="#文字的单行与多行显示" class="headerlink" title="文字的单行与多行显示"></a>文字的单行与多行显示</h3><p>文本的多行显示，可以通过maxLines属性和softWrap属性控制，其中maxLines控制最大行数，softWrap控制是否自动换行。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: true;softWrap: true;softWrap: true;softWrap: true;softWrap: true;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3><p>可以使用Text.rich/ RichText + TextSpan来显示富文本：</p><pre class=" language-dart"><code class="language-dart">Text<span class="token punctuation">.</span><span class="token function">rich</span><span class="token punctuation">(</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">"plain text "</span><span class="token punctuation">,</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string">"fontSize"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"decoration"</span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>lineThrough<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_1.png" alt=""></p><pre class=" language-dart"><code class="language-dart"><span class="token function">RichText</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token function">TextSpan</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 1"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 2"</span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_2.png" alt=""></p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>文字的阴影可以通过TextStyle中的shadows属性进行控制：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"style: letterSpacing,shadows"</span><span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>              shadows<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Shadow<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pink<span class="token punctuation">,</span> offset<span class="token punctuation">:</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/text_shadow.png" alt=""></p><h3 id="Text的点击事件"><a href="#Text的点击事件" class="headerlink" title="Text的点击事件"></a>Text的点击事件</h3><p>可以使用GestureDetector，也可以使用InkWell：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">InkWell</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">"Default Text"</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Tabs的使用</title>
      <link href="/2020/05/08/flutter/flutter-tabs-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-tabs-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Flutter中使用tabs还是非常的简单的，可以用在顶部导航栏，也可以用在底部导航栏。</p><div style="width:100%">  <img src="https://oss.jiangkang.tech/jk/tabs1.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs2.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs3.png" style="zoom:50%;width:33%;float:left;" /></div><p>使用Tabs需要用到两个widget，一个是<code>TabBar</code>,用于顶导航或者底导航；一个是<code>TabBarView</code>，用于Tab下具体的内容。</p><h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><p>首先在AppBar中使用TabBar：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs4.png" alt="Indicator"></p><p>可以看到，底下还有一个Indicator，如果看源码，会发现默认使用的Indicator为<code>UnderlineTabIndicator</code>。</p><p>不过还是可以进行自定义：</p><pre class=" language-dart"><code class="language-dart">  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>其中indicatorColor用来指定Indicator的颜色，IndicatorPadding用来指定内容四周的边距，IndicatorSize可以选择两个值：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> TabBarIndicatorSize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 为tab时，Indicator撑满tab宽度</span>  tab<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// 为label时，Indicator宽度为tab的内容的宽度</span>  label<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs5.png" alt=""></p><h2 id="TabBarView"><a href="#TabBarView" class="headerlink" title="TabBarView"></a>TabBarView</h2><p>TabBarView对应Tab下的内容视图：</p><pre class=" language-dart"><code class="language-dart">  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以看到TabBar和TabBarView中都有一个Controller，这个Controller用途比较大，比如你想知道当前选中的是哪个tab，默认选中哪个tab，都需要TabController的帮助，我们一般用<code>DefaultTabController</code>来包裹具体的视图。</p><p>来看一下全部的代码吧：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/page/page_entry.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TabsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _TabsDemoState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_TabsDemoState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_TabsDemoState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>TabsDemo<span class="token operator">></span>    <span class="token keyword">with</span> SingleTickerProviderStateMixin <span class="token punctuation">{</span>  <span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabController _tabController<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _tabController <span class="token operator">=</span>        <span class="token function">TabController</span><span class="token punctuation">(</span>initialIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">DefaultTabController</span><span class="token punctuation">(</span>        length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>            appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Tabs Demo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              bottom<span class="token punctuation">:</span> <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            floatingActionButton<span class="token punctuation">:</span> <span class="token function">Builder</span><span class="token punctuation">(</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span>                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scaffold<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>        <span class="token function">SnackBar</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"当前选中index为${_tabController.index}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter时间处理</title>
      <link href="/2020/05/08/flutter/flutter-shi-jian-chu-li/"/>
      <url>/2020/05/08/flutter/flutter-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>Flutter 中在时间处理方面还是比较简单的，我们主要用到的有两个类：</p><ul><li><p>DateTime</p><p>表示一个指定的时间点，包括年月日时分秒</p></li><li><p>TimeOfDay</p><p>表示一天中的一个时间点，可以区分上午，下午，12小时制，24小时制等</p></li></ul><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里就得到了一个当前时间的DateTime对象，然后就可以拿到你想要的信息：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">final</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">final</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token punctuation">;</span></code></pre><p>还可以获取当前时星期几：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> week <span class="token operator">=</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">;</span></code></pre><h3 id="转时间戳"><a href="#转时间戳" class="headerlink" title="转时间戳"></a>转时间戳</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String timestamp <span class="token operator">=</span> now<span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><ul><li><p>前2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> before <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>后2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>两个时间点相隔的时间数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> diff <span class="token operator">=</span> after<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">.</span>inHours<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相隔的小时数，也可以是分钟数，秒数</span></code></pre></li></ul><h3 id="上午还是下午"><a href="#上午还是下午" class="headerlink" title="上午还是下午"></a>上午还是下午</h3><p>可以使用TimeOfDay来处理：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeOfDay <span class="token operator">=</span> TimeOfDay<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> amOrPm <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>period<span class="token punctuation">;</span></code></pre><p>其中timeOfDay.period实际上是一个枚举对象：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> DayPeriod <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// Ante meridiem (before noon).</span>  am<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// Post meridiem (after noon).</span>  pm<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这样可以判断是上午还是下午了。</p><h3 id="12-24小时制"><a href="#12-24小时制" class="headerlink" title="12/24小时制"></a>12/24小时制</h3><ul><li><p>24小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour24 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hour<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>12小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour12 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hourOfPeriod<span class="token punctuation">;</span></code></pre></li></ul><p>还可以格式化输出当前的分钟小时数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeStr <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11:49 PM</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart基础语法</title>
      <link href="/2020/05/08/flutter/dart-ji-chu-yu-fa/"/>
      <url>/2020/05/08/flutter/dart-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="重要的概念"><a href="#重要的概念" class="headerlink" title="重要的概念"></a>重要的概念</h3><ul><li>任何你可以放在一个变量中的都是一个object，并且每个object都是一个class的实例，甚至于数字，functions，null都是对象，所有的对象继承自Object类。</li><li>即使Dart是强类型的，但是类型说明是可选的，因为Dart可以推断类型；当你要显式说明没有指定任何类型的时候，可以用dynamic</li><li>Dart也支持泛型，比如List<int>（整数列表）或者List<dynamic>（一个任意类型的对象列表）</li><li>Dart支持顶层函数(如main()),以及绑定到一个类或者对象的方法（静态方法或者实例方法）；</li><li>同样的，Dart支持顶层变量;</li><li>不像Java，Dart中没有public，private，protected这些关键字，如果一个标识符以“_”(下划线)符号开头，则对其库来说是私有的。</li><li>标识符可以以字母或者下划线开头，后加字母或者数字组合</li><li>Dart有表达式（有运行时值）和语句（没有运行时值）， 如condition ? exp1:exp2,与if else 语句相比，前则有值，后者没有值。一个语句经常包含一个或者多个表达式，但是一个表达式不能直接包含一个语句。</li><li>Dart工具可以报告两种问题：errors和warnings。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token keyword">dynamic</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面可以改变类型</span>String name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>没有初始化的变量有一个初始值null，即使是数字类型也一样，因为数字类型也是一个对象。</p><pre class=" language-dart"><code class="language-dart">int lineCount<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果你有一个变量不会改变，应该使用final或者const。<br>一个const变量是一个编译时常量，而一个final 顶层或者类变量当第一次使用的时候初始化。</p><p>注意：实例变量可以是final，但不是const。final型实例变量必须在构造函数体执行之前(变量声明的时候)就初始化。</p><p>在你需要一个编译时常量的时候可以使用const，如果const常量在Class层级，则用static const，在声明的地方将变量设置为编译时常量，比如一个数字，一个字符串，一个const常量，或者一系列常量运算 的结果。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Without a type annotation</span><span class="token keyword">final</span> String nickname <span class="token operator">=</span> <span class="token string">'Bobby'</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unit of pressure (dynes/cm2)</span><span class="token keyword">const</span> double atm <span class="token operator">=</span> <span class="token number">1.01325</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Standard atmosphere</span></code></pre><p>Const关键字不仅可以用于声明常量，还可以用它创建常量值，以及声明创建常量值的构造器，任何变量可以有一个常量。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//你后面可以修改foo，如foo = [1, 2, 3]; </span><span class="token keyword">final</span> bar <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Equivalent to `const []`，后面不能修改baz</span></code></pre><h3 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h3><ul><li>numbers</li></ul><p>  有两种形式，int（64位，依赖于平台，在Dart VM中，为64位）和double（64位）</p><ul><li>strings</li></ul><p>  一个Dart String是一系列UTF-16代码单元，可以使用单引号和双引号。<br>  可以使用${expression}在字符串中表示动态内容，大括号可以省略，对于对象，会使用其toString（）方法；</p><p>   可以用三个引号创建多行文本：</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'''   You can create   multi-line strings like this one.   '''</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">"""This is also a   multi-line string."""</span><span class="token punctuation">;</span></code></pre><p>  可以用一个r创建一个raw string，比如Unicode字符串</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">r'In a raw string, not even \n gets special treatment.'</span><span class="token punctuation">;</span></code></pre><ul><li>booleans</li></ul><p>  为了表示布尔值，Dart有一个叫做bool的类型。</p><ul><li>list/arrays</li></ul><p>  在Dart中，arrays是List对象，这里就直接叫做lists了。</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  为了创建一个编译时常量的list，在list 字面量前加const，如：</p><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>maps</li></ul><p>  键值对，不用多说，上代码:</p><pre class=" language-dart"><code class="language-dart">      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Key:    Value</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">,</span>        <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'turtledoves'</span><span class="token punctuation">,</span>        <span class="token string">'fifth'</span><span class="token punctuation">:</span> <span class="token string">'golden rings'</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'partridge'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'turtledoves'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'golden rings'</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'helium'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'neon'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'argon'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//添加一个新的键值对</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fourth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'calling birds'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Add a key-value pair</span>          <span class="token comment" spellcheck="true">//取值</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'partridge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果不存在，会返回null</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//编译时常量</span>          <span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>            <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></code></pre><ul><li>runes(用于在字符串中标识Unicode字符)</li></ul><p>  Dart中， runes是字符串的UTF-32代码点。<br>  由于Dart使用的是UTF-16，因此在字符串中表示32位字符，需要特殊的语法。<br>  一般表示方式是\uXXXX,XXXX是一个4位16进制数</p><pre class=" language-dart"><code class="language-dart">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clapping <span class="token operator">=</span> <span class="token string">'\u{1f44f}'</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>codeUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>runes<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Runes input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runes</span><span class="token punctuation">(</span>    <span class="token string">'\u2665  \u{1f605}  \u{1f60e}  \u{1f47b}  \u{1f596}  \u{1f44d}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String<span class="token punctuation">.</span>fromCharCodes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>symbols</li></ul><p>  一个Symbol对象表示一个Dart程序中声明的运算符或者标识符。你可能永远都不会使用这个。不多说。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Dart是一个真正面向对象的语言，即使是function都有一个叫做Function的对象。也就是说，Function可以赋值给一个变量，或者作为参数传递给其他functions，你也可以像调用函数一样调用Dart实例，如Callable Classes。（后面又说，暂时忽略即可）</p><pre class=" language-dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果函数只是包含了一个简单的表达式，可以用速记方法表示</span>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><code>=&gt; expr</code> 是 { return expr; }的速写方式。值得注意的是，这里只可以用表达式的速写，而不可以用语句的速写，比如不可以使用if语句。</p><p>一个function有两种类型的参数，required和optional，必须的参数放在最前面，可选参数放在后面。命名的可选参数也可以用@required标记。</p><p>可选参数可以是位置性的，也可以是命名的，但是不能包含这两种情况。</p><h4 id="可选命名参数"><a href="#可选命名参数" class="headerlink" title="可选命名参数"></a>可选命名参数</h4><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Flutter中创建实例的参数很多，因此主要使用可选命名参数这种方式，便于阅读。</p><p>你也可以用@required注解表示这是个必须的参数，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span> <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Required 是在meta 包下面定义的，因此你需要import package:meta/meta.dart 或者，import那些输出meta包的包，如Flutter下的package:flutter/material.dart.</p><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title="可选位置参数"></a>可选位置参数</h4><p>用[] 包裹着的参数：</p><pre class=" language-dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>你的function可以用=为可选位置参数或者可选命名参数定义默认值，而且必须使用编译时常量值，如果没有提供默认值，那么默认值为null。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Sets the [bold] and [hidden] flags ...</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// bold will be true; hidden will be false.</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span>    <span class="token punctuation">[</span>String device <span class="token operator">=</span> <span class="token string">'carrier pigeon'</span><span class="token punctuation">,</span> String mood<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mood <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result (in a $mood mood)'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a carrier pigeon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> gifts <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'paper'</span><span class="token punctuation">,</span>      <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'cotton'</span><span class="token punctuation">,</span>      <span class="token string">'third'</span><span class="token punctuation">:</span> <span class="token string">'leather'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'list:  $list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'gifts: $gifts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p>每一个APP都必须有一个main（）方法，作为app的入口点。main（）方法返回void，可以有一个List<String> 作为参数。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sample_text_id'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Click me!'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>reverseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种..的语法叫做级联。通过级联，你可以对单个对象的成员执行多个操作。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Run the app like this: dart args.dart 1 test</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你也可以用args库，来定义和解析命令行参数。</p><h4 id="作为第一类对象的functions"><a href="#作为第一类对象的functions" class="headerlink" title="作为第一类对象的functions"></a>作为第一类对象的functions</h4><p>你可以将一个function作为参数传递给另一个function：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pass printElement as a parameter.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以将一个function赋值给一个变量：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'!!! ${msg.toUpperCase()} !!!'</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'!!! HELLO !!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>你可以创建一个没有命名的函数，如匿名函数，lambda，闭包等。<br>下面的代码块就包含了一个函数体：</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span> param1<span class="token punctuation">[</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   codeBlock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p>如下面这个方法，使用了没有指定类型的参数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token string">'oranges'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果函数只包含一个语句，可以用=&gt; 箭头速写方式。</p><pre class=" language-dart"><code class="language-dart">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="嵌套函数变量作用域问题"><a href="#嵌套函数变量作用域问题" class="headerlink" title="嵌套函数变量作用域问题"></a>嵌套函数变量作用域问题</h4><pre class=" language-dart"><code class="language-dart">bool topLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> insideMain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> insideFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">nestedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> insideNestedFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideMain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideNestedFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nestedFunction()可以使用每一个层级的变量。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>参考JavaScript中的闭包</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Returns a function that adds [addBy] to the</span><span class="token comment" spellcheck="true">/// function's argument.</span>Function <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a function that adds 2.</span>  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Create a function that adds 4.</span>  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>所有function都会返回一个值，如果没有指定，则返回null：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>基本的就不说了，和其他语言的大同小异，如Java,JavaScript等。</p><p>不同的是：</p><p>?? 代表 if null<br>?. 表示 如果不为null才执行（参考kotlin）<br>~/ 代表 整除（返回值为int）<br>/  返回值 为double<br>as 用来类型转换（和kotlin一样）<br>is 判断是否属于否个类型</p><h4 id="级联操作符"><a href="#级联操作符" class="headerlink" title="..(级联操作符)"></a>..(级联操作符)</h4><p>级联操作符允许你在相同的对象上执行一系列操作。除了函数调用，你还可以通过级联访问同一个对象上的多个字段（field）。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Get an object.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span> <span class="token comment" spellcheck="true">// Use its members.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与下面这段等价：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然，也可以进行嵌套：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> addressBook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">AddressBookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jenny'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">'jenny@example.com'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">PhoneNumberBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string">'415-555-0100'</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">'home'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在返回实际对象的function上运用级联要非常小心，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: method 'write' isn't defined for 'void'.</span></code></pre><p>Sb.write()返回void，你不能在void上构造级联。</p><h3 id="控制流-异常"><a href="#控制流-异常" class="headerlink" title="控制流/异常"></a>控制流/异常</h3><p>和其他语言大同小异，不多说。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过常量构造器创建编译时常量</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// They are the same instance!</span></code></pre><p>子类不从父类继承构造函数，如果子类没有声明构造函数，则是默认的午餐构造函数。</p><h4 id="获取一个对象的类型"><a href="#获取一个对象的类型" class="headerlink" title="获取一个对象的类型"></a>获取一个对象的类型</h4><p>可以使用runtimeType属性获取一个对象的类型，这个属性返回一个Type类型的对象。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The type of a is ${a.runtimeType}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Named constructor</span>  Point<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用一个非默认的超类构造函数"><a href="#调用一个非默认的超类构造函数" class="headerlink" title="调用一个非默认的超类构造函数"></a>调用一个非默认的超类构造函数</h4><p>默认情况下，一个子类的构造函数调用超类的没有命名的无参构造函数。超类的构造函数在构造函数体的开始被调用，如果还是用了初始化列表，则初始化列表先于超类被调用。<br>执行顺序如下：</p><ol><li>初始化列表</li><li>超类的无参构造函数</li><li>main class的无参构造函数</li></ol><p>如果超类没有无命名的无参构造函数，你必须手动调用它的一个构造函数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">getDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>除了调用超类构造函数之外，还可以在构造函数体执行之前初始化实例变量。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Initializer list sets instance variables before</span><span class="token comment" spellcheck="true">// the constructor body runs.</span>Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> num<span class="token operator">></span> json<span class="token punctuation">)</span>    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.fromJson(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化程序的右边部分无法访问this。</p><p>开发过程中也可以使用assert进行输入验证：</p><pre class=" language-dart"><code class="language-dart">Point<span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.withAssert(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title="重定向构造函数"></a>重定向构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The main constructor for this class.</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Delegates to the main constructor.</span>  Point<span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h4><p>如果你的类提供用不改变的对象，那么你可以将那些对象设置为编译时常量。为了实现这种效果，你需要定义个常量构造函数，并且确认所有的实例变量都是final类型的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutablePoint origin <span class="token operator">=</span>      <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>常量构造函数也不总是创建常量。</p><h4 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h4><p>借助factory关键字，你不用每次创建对象的时候都创建一个新的对象，而可以从缓存中返回，或者返回一个子类型的对象。</p><p>下面是一个从缓存中返回对象的例子：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// _cache is library-private, thanks to</span>  <span class="token comment" spellcheck="true">// the _ in front of its name.</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span> _cache <span class="token operator">=</span>      <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token function">Logger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span>      <span class="token keyword">return</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>值得注意的是工厂构造函数无法访问this。</p><p>调用工厂构造方法和调用其他构造方法的方式是一样的：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token string">'UI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method/方法"></a>Method/方法</h3><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter / Setter"></a>Getter / Setter</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Define two calculated properties: right and bottom.</span>  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>抽象方法仅存在于抽象类中；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define instance variables and methods...</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Define an abstract method.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Provide an implementation, so the method is not abstract here...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是不可以实例化的。如果你想要你的抽象类看起来是实例化的，可以定义一个工厂构造函数。</p><p>抽象类通常都有抽象方法。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// This class is declared abstract and thus</span><span class="token comment" spellcheck="true">// can't be instantiated.</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define constructors, fields, methods...</span>  <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Abstract method.</span><span class="token punctuation">}</span></code></pre><h4 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h4><p>每个类都隐式定义一个接口，该接口包含该类的所有实例成员，以及其实现的任何接口；如果你想要在不继承B类实现的情况下创建支持B类API的A类，则A类应该实现B接口。</p><p>类可以通过 implements 实现一个或者多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// A person. The implicit interface contains greet().</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// In the interface, but visible only in this library.</span>  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Not in the interface, since this is a constructor.</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// In the interface.</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hello, $who. I am $_name.'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// An implementation of the Person interface.</span><span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">;</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hi $who. Do you know who I am?'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String <span class="token function">greetBob</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Kathy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> Location <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="拓展一个类"><a href="#拓展一个类" class="headerlink" title="拓展一个类"></a>拓展一个类</h4><p>使用extends创建子类，使用super引用超类。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_illuminateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_activateIrSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_bootNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_initializeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_upgradeApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写成员"><a href="#重写成员" class="headerlink" title="重写成员"></a>重写成员</h5><p>子类可以重写实例方法，Getter和Setter，你可以用@override表示你打算重写某个承运。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写操作符"><a href="#重写操作符" class="headerlink" title="重写操作符"></a>重写操作符</h5><p>你可以重写操作符，比如你创建了一个Vector类，可以重写+操作符进行向量的加法：</p><p><code>！=</code>不可以重写，因为这只是一个语法糖。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Operator == and hashCode not shown. For details, see note below.</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你重写 <code>==</code>那么你也得重写<code>hashCode</code></p><h5 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h5><p>为了监测和响应调用没有实现的方法或者实例变量的情况，你应该重写noSuchMethod()方法；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Unless you override noSuchMethod, using a</span>  <span class="token comment" spellcheck="true">// non-existent member results in a NoSuchMethodError.</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'You tried to use a non-existent member: '</span> <span class="token operator">+</span>        <span class="token string">'${invocation.memberName}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span></code></pre><p>每个枚举类型中的值都有一个index getter，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取枚举中所有值的列表：</p><pre class=" language-dart"><code class="language-dart">List<span class="token operator">&lt;</span>Color<span class="token operator">></span> colors <span class="token operator">=</span> Color<span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用在switch流程中：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> aColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Red as roses!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Green as grass!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Without this, you see a WARNING.</span>    <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Color.blue'</span><span class="token punctuation">}</span></code></pre><h4 id="向class中添加特征：mixins"><a href="#向class中添加特征：mixins" class="headerlink" title="向class中添加特征：mixins"></a>向class中添加特征：mixins</h4><p>Mixins是一种在多个类层次中重用类代码的方式。</p><p>可以用with 关键字使用mixins：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> Musical <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span>    <span class="token keyword">with</span> Musical<span class="token punctuation">,</span> Aggressive<span class="token punctuation">,</span> Demented <span class="token punctuation">{</span>  <span class="token function">Maestro</span><span class="token punctuation">(</span>String maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span>    canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了实现一个mixin，创建一个继承Object的类，不要声明构造函数，不要调用super，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>  bool canPlayPiano <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canCompose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canConduct <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">entertainMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canPlayPiano<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Playing piano'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canConduct<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Waving hands'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Humming to self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Class-变量和方法"><a href="#Class-变量和方法" class="headerlink" title="Class 变量和方法"></a>Class 变量和方法</h4><p>和Java中的静态方法一样，用static表示：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>Queue<span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态变量使用的时候才会初始化。</p><p>静态方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:math'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> num <span class="token function">distanceBetween</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> distance <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>考虑用顶层函数替代静态方法。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>和Java一样，也都是List<E>形式的。</p><h4 id="使用集合字面量"><a href="#使用集合字面量" class="headerlink" title="使用集合字面量"></a>使用集合字面量</h4><p>List和map字面量都可以泛化：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token string">'index.html'</span><span class="token punctuation">:</span> <span class="token string">'Homepage'</span><span class="token punctuation">,</span>  <span class="token string">'robots.txt'</span><span class="token punctuation">:</span> <span class="token string">'Hints for web robots'</span><span class="token punctuation">,</span>  <span class="token string">'humans.txt'</span><span class="token punctuation">:</span> <span class="token string">'We are people, not machines'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="在构造函数中使用泛型"><a href="#在构造函数中使用泛型" class="headerlink" title="在构造函数中使用泛型"></a>在构造函数中使用泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nameSet <span class="token operator">=</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> views <span class="token operator">=</span> Map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span> View<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型集合和它们包含的类型"><a href="#泛型集合和它们包含的类型" class="headerlink" title="泛型集合和它们包含的类型"></a>泛型集合和它们包含的类型</h4><p>与Java不同，Dart中的泛型在运行时是可以携带类型信息的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="限定泛型"><a href="#限定泛型" class="headerlink" title="限定泛型"></a>限定泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Implementation goes here...</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Instance of 'Foo&lt;$T>'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Extender</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用子类作为泛型参数</span><span class="token keyword">var</span> someBaseClassFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>SomeBaseClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> extenderFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Extender<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不指定泛型也可以</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Instance of 'Foo&lt;SomeBaseClass>'</span></code></pre><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><pre class=" language-dart"><code class="language-dart">T first<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Do some initial work or error checking, then...</span>  T tmp <span class="token operator">=</span> ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do some additional checking or processing...</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Librarys-和它的可见性"><a href="#Librarys-和它的可见性" class="headerlink" title="Librarys 和它的可见性"></a>Librarys 和它的可见性</h3><p>可见性： _ 表示仅仅对该Library可见。</p><p>每一个Dart App都是一个Library。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:html'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:test/test.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定别名</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib1.</span>Element element1 <span class="token operator">=</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib2.</span>lib2<span class="token punctuation">.</span>Element element2 <span class="token operator">=</span> lib2<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import only foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span> show foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import all names EXCEPT foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> hide foo<span class="token punctuation">;</span></code></pre><h4 id="库的懒加载"><a href="#库的懒加载" class="headerlink" title="库的懒加载"></a>库的懒加载</h4><p>懒加载（延迟加载）允许app按需加载一个库。</p><p>下面是用到懒加载的一些场景：</p><ul><li>为了减少一个app的初始化启动时间</li><li>进行A/B测试</li><li>加载很少被使用的库</li></ul><p>使用方式：必须首先用deferred as</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:greetings/hello.dart'</span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span></code></pre><p>要使用的时候，调用库的loadLibrary()方法：</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hello<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码中，await表示等待hello库加载完成才继续执行。</p><p>你可以多次调用一个库的loadLibrary()方法，但是它只会被加载一次。</p><p>当你使用库的懒加载的时候，需要注意下面这些：</p><ul><li>一个懒加载库中的常量不是导入文件中的常量，在库加载之前，这些常量都不存在；</li><li>你不能在导入文件中使用懒加载库中的类型，但是，你可以考虑将接口类型移动到由懒加载库和导入文件导入的库。</li><li>Dart隐式的将loadLibrary()插入到使用deferred as namespace 定义的命名空间中，loadLibray()返回Future类型。</li></ul><p>注意：即使是在loadLibrary（）执行之前，Dart VM也允许访问懒加载库中的成员，这个特征在后面可能会变更，应该避免使用。</p><h3 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h3><p>Dart中很多函数都返回Future和Stream对象。 这些函数都是异步的。</p><p>async/await 支持你在Dart中进行异步编程。</p><p>当你使用await的时候，必须在方法外面用async包裹。</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">checkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do something with version</span><span class="token punctuation">}</span></code></pre><p>必要的时候需要处理异常：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>  version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// React to inability to look up the version</span><span class="token punctuation">}</span></code></pre><p>在异步方法中，你可以多次使用await</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> entrypoint <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findEntrypoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> exitCode <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runExecutable</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">flushThenExit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h4><pre class=" language-dart"><code class="language-dart">Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1.0.0'</span><span class="token punctuation">;</span></code></pre><p>如果不返回一个有用的值，可以用<code>Future&lt;void&gt;</code></p><h4 id="处理Streams"><a href="#处理Streams" class="headerlink" title="处理Streams"></a>处理Streams</h4><p>可以从Stream中获取值。</p><p>你需要用async和一个异步循环(await for)</p><p>注意：在使用await for之前，确信你知道要一直等待循环获取到所有结果。比如在处理UI事件的时候，就不应该使用这个，因为UI事件是无尽的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>varOrType identifier <span class="token keyword">in</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Executes each time the stream emits a value.</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart">Future <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> request <span class="token keyword">in</span> requestServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>你也可以用break或者return终止循环。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当你需要laily生成一系列值，你可以使用生成器。</p><p>目前有两种生成器：</p><ul><li>同步生成器： 返回Iterable对象</li><li>异步生成器： 返回Stream对象</li></ul><p>同步生成器： 用 sync* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步生成器： 用async* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Stream<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">asynchronousNaturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你的生成器是递归的，可以用yield*提升性能：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>    <span class="token keyword">yield*</span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.dartlang.org/guides/language/language-tour" target="_blank" rel="noopener">https://www.dartlang.org/guides/language/language-tour</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-实现图片圆角的几种方式</title>
      <link href="/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/"/>
      <url>/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>图片圆角在开发中还是非常常见的，用Flutter实现圆角还是非常简单的，目前了解的大概有下面这几种：</p><ul><li>通过Card的shape属性</li><li>通过Container的decoration</li><li>直接使用ClipRRect</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://oss.jiangkang.tech/jk/tupianyuanjiao.png" style="zoom:50%;" /><h2 id="通过Card的shape属性"><a href="#通过Card的shape属性" class="headerlink" title="通过Card的shape属性"></a>通过Card的shape属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Card</span><span class="token punctuation">(</span>            shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            clipBehavior<span class="token punctuation">:</span> Clip<span class="token punctuation">.</span>antiAlias<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>              <span class="token string">"images/landscape0.jpeg"</span><span class="token punctuation">,</span>              width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p>唯一值的注意的地方就是borderRadius看准了，不要用错了，要不然没效果。</p><h2 id="通过Container的decoration"><a href="#通过Container的decoration" class="headerlink" title="通过Container的decoration"></a>通过Container的decoration</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span>          decoration<span class="token punctuation">:</span> <span class="token function">ShapeDecoration</span><span class="token punctuation">(</span>              image<span class="token punctuation">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>                  image<span class="token punctuation">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/landscape1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>fitWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">Align</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Padding</span><span class="token punctuation">(</span>              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">"Container decoration实现圆角(radius = 20)"</span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>使用的DecorationImage，相当于把图片当做一个背景，这里需要注意的就是Container的child的尺寸问题，就算不放内容，也需要设置一个带尺寸的child Widget。</p><h2 id="直接使用ClipRRect"><a href="#直接使用ClipRRect" class="headerlink" title="直接使用ClipRRect"></a>直接使用ClipRRect</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">ClipRRect</span><span class="token punctuation">(</span>              borderRadius<span class="token punctuation">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string">"images/landscape2.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>这种方式是最简单的，直接使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 圆角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter深色模式</title>
      <link href="/2020/05/08/flutter/flutter-shen-se-mo-shi/"/>
      <url>/2020/05/08/flutter/flutter-shen-se-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>这些年，移动端UI的深色模式还是比较常见你的，IOS在系统级别已经率先支持了，Flutter作为一款优秀的跨端UI框架，在处理深色模式上是比较简单的。</p><img src="https://oss.jiangkang.tech/jk/shense.gif" style="zoom:50%;" /><h2 id="Brightness"><a href="#Brightness" class="headerlink" title="Brightness"></a>Brightness</h2><p>Flutter中有一个Brightness的概念，用来表示主题和颜色的亮暗模式。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Brightness <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The color is dark and will require a light text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be dark grey, requiring white text.</span>  dark<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// The color is light and will require a dark text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be bright white, requiring black text.</span>  light<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Flutter针对主题也提供了封装：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>dark<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问方式如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> lightTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> dartTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们首先想一下，要实现一个切换深色主题的功能的步骤是什么？</p><ol><li>设置页：进行浅色/深色模式切换，并进行持久化，以便app重启之后还是生效的；</li><li>App：启动的时候获取持久化的浅色/深色模式，并应用到app的主题上；</li><li>切换时实时刷新主题的深浅模式；</li></ol><h2 id="1-进行深浅色模式的切换"><a href="#1-进行深浅色模式的切换" class="headerlink" title="1. 进行深浅色模式的切换"></a>1. 进行深浅色模式的切换</h2><img src="https://oss.jiangkang.tech/jk/shense2.png" style="zoom:50%;" /><p>这里使用SharedPreferences来进行持久化，代码比较简单：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/constants/const_key_value.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/theme/custom_themes.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/utils/sp_utils.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:provider/provider.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 设置页</span><span class="token keyword">class</span> <span class="token class-name">SettingsPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _SettingsPageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_SettingsPageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_SettingsPageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>SettingsPage<span class="token operator">></span> <span class="token punctuation">{</span>  bool _isDarkMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _isDarkMode <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"设置页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">SafeArea</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">ListView</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">SwitchListTile</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"深色模式"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> _isDarkMode<span class="token punctuation">,</span>            onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SpUtils<span class="token punctuation">.</span><span class="token function">saveBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                _isDarkMode <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>newValue <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            activeColor<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="App启动时获取持久化的深浅色模式"><a href="#App启动时获取持久化的深浅色模式" class="headerlink" title="App启动时获取持久化的深浅色模式"></a>App启动时获取持久化的深浅色模式</h2><pre class=" language-dart"><code class="language-dart">SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="深浅色模式改变时，实时刷新APP"><a href="#深浅色模式改变时，实时刷新APP" class="headerlink" title="深浅色模式改变时，实时刷新APP"></a>深浅色模式改变时，实时刷新APP</h2><p>从前面的两段代码可以看出，我们使用了Provider。</p><p>这里我们可以把Provider当做一个单例模式，一处改变，全局生效。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> themeProvider <span class="token operator">=</span> Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Flutter System'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> themeProvider<span class="token operator">?</span><span class="token punctuation">.</span>currentTheme <span class="token operator">?</span><span class="token operator">?</span> lightTheme<span class="token punctuation">,</span>      debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> pageRouters<span class="token punctuation">,</span>      localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>        S<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalMaterialLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalWidgetsLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      supportedLocales<span class="token punctuation">:</span> S<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>supportedLocales<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深色模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的init方法</title>
      <link href="/2020/05/08/golang/golang-zhong-de-init-fang-fa/"/>
      <url>/2020/05/08/golang/golang-zhong-de-init-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="init方法是什么"><a href="#init方法是什么" class="headerlink" title="init方法是什么"></a><code>init</code>方法是什么</h2><p>我们都知道程序的入口在main包下的<code>main()</code>方法,其实还有一个方法会在<code>main</code>方法之前执行,这个方法就是<code>init()</code></p><p><code>init()</code>方法用于package级别的一些初始化操作.</p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li><code>init</code>先于<code>main</code>自动执行,不能被其他函数调用</li><li><code>init</code>方法没有输入参数和返回值</li><li>每个package可以有多个<code>init</code>方法</li><li>package下的每个源文件可以有多个<code>init</code>方法</li><li>同一个package下的<code>init</code> 方法执行顺序不确定,不要存在依赖关系</li><li>不同package的<code>init</code>方法的执行顺序由package依赖关系确定(没有依赖的package最先执行)</li></ul><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><p>需要注意的地方就是,想要让<code>init</code>方法起作用,你必须要导入对应的package,但是如果你只想使用<code>init</code>方法,不想使用包里的其他方法,这个时候就需要无副作用的导入了:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jiangkang/JustGo/basic"</span>    <span class="token boolean">_</span> <span class="token string">"net/http"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的存储路径</title>
      <link href="/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/"/>
      <url>/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="存储数据的几种方式"><a href="#存储数据的几种方式" class="headerlink" title="存储数据的几种方式"></a>存储数据的几种方式</h2><ul><li><p>应用专属存储空间</p><p>应用专属空间里的数据会在应用被卸载的时候删除，清除缓存通常指的是清除缓存文件下的文件，清空数据则是清空所有cache，files下文件，如果想让其他APP可以访问这些私有数据，可以利用FileProvider。</p><ul><li><p>内部存储</p><p>大多是通过Context获取的地址，一般在/data/data文件夹下，如</p><ul><li>dataDir: /data/data/packagename</li><li>filesDir: /data/data/packagename/files</li><li>cacheDir: /data/data/packagename/cache</li><li>codeCacheDir:/data/data/packagename/code_cache</li></ul></li><li><p>外部存储</p><p>可以通过Context获取，也可以通过Environment获取，一般在/storage/emulated/0/Android/data/pacakagename/，如：</p><ul><li>externalCacheDir：/storage/emulated/0/Android/data/pacakagename/cache</li><li>getExternalFilesDir:/storage/emulated/0/Android/data/pacakagename/files</li><li>externalMediaDirs</li></ul></li><li><p>SharedPreference</p></li><li><p>本地数据库</p></li></ul></li><li><p>共享的存储空间</p><p>可以被其他APP访问的数据，app卸载不会被删除,通常位于/storage/emulated/0下(除了/storage/emulated/0/Android/data/pacakagename)。</p><ul><li><p>media files</p><p>可以通过 MediaStore处理</p></li><li><p>文档和其他文件</p><p>可以通过ContentResolver和其他相关方法处理</p></li></ul></li></ul><h2 id="几个容易混淆的地方"><a href="#几个容易混淆的地方" class="headerlink" title="几个容易混淆的地方"></a>几个容易混淆的地方</h2><h3 id="data-data-vs-data-user-0"><a href="#data-data-vs-data-user-0" class="headerlink" title="/data/data vs /data/user/0"></a>/data/data vs /data/user/0</h3><h3 id="Android-data-vs-Android-user-0"><a href="#Android-data-vs-Android-user-0" class="headerlink" title="/Android/data vs /Android/user/0"></a>/Android/data vs /Android/user/0</h3><p>现在的手机操作系统多是支持多用户的，最常见的就是“访客模式”，通常情况下，/data/data 与 /data/user/0是等价的，对于不同的用户，实际的存储位置可能是/user/xxx,但是我们通常只需要访问/data/data即可。</p><h3 id="mnt-sdcard-vs-sdcard-vs-storage-sdcard0"><a href="#mnt-sdcard-vs-sdcard-vs-storage-sdcard0" class="headerlink" title="/mnt/sdcard vs /sdcard  vs /storage/sdcard0"></a>/mnt/sdcard vs /sdcard  vs /storage/sdcard0</h3><p> 这个其实就是“软链接”的区别，可以通过 <code>ls -l</code>命令查看：</p><pre class=" language-bash"><code class="language-bash">storage/sdcard0 -<span class="token operator">></span> /sdcardmnt/sdcard -<span class="token operator">></span> /storage/self/primarysdcard -<span class="token operator">></span> /storage/self/primary</code></pre><p>可以看到这几个地址的真实地址实际上都是/storage/self/primary。</p><h3 id="storage-emulated-0"><a href="#storage-emulated-0" class="headerlink" title="/storage/emulated/0"></a>/storage/emulated/0</h3><p>共享的存储空间的根目录，其中0代表的是主存，如果有移动的存储空间，如外接SD卡，则会有其他数字。</p><p>可通过下列方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在Android Q之后，这个方法标记废弃，可以使用</p><pre class=" language-java"><code class="language-java">Context#<span class="token function">getExternalFilesDir</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span></code></pre><p>或者<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>等方法作为替代。</p><p>该目录下在没有被app污染时，通常有以下这些子目录：</p><pre><code>Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</code></pre><p>对于具体的子目录，可以通过以下方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span>getExternalStoragePublicDirectory</code></pre><p>Android Q之后，可用上面说的<code>Context#getExternalFilesDir(String)</code>，<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>替代。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识SDL</title>
      <link href="/2020/05/08/c/chu-shi-sdl/"/>
      <url>/2020/05/08/c/chu-shi-sdl/</url>
      
        <content type="html"><![CDATA[<h2 id="SDL是什么"><a href="#SDL是什么" class="headerlink" title="SDL是什么"></a>SDL是什么</h2><p>Simple DirectMedia Layer 是一个跨平台的开发库,它提供了对音频,键盘,鼠标,游戏手柄的底层访问接口.以及通过OpenGL或者Direct3D控制图形硬件的接口.</p><p>目前支持以下平台:</p><ul><li><p>Windows </p></li><li><p>Linux</p></li><li><p>Android</p></li><li><p>IOS</p></li><li><p>MacOS</p></li></ul><h2 id="SDL可以做什么"><a href="#SDL可以做什么" class="headerlink" title="SDL可以做什么"></a>SDL可以做什么</h2><ul><li><p>视频播放器</p></li><li><p>音频处理</p></li><li><p>输入事件处理,比如键盘,鼠标等</p></li><li><p>文件I/O</p></li><li><p>线程,定时器等其余功能</p></li></ul><h2 id="SDL的核心架构"><a href="#SDL的核心架构" class="headerlink" title="SDL的核心架构"></a>SDL的核心架构</h2><h3 id="几个子系统"><a href="#几个子系统" class="headerlink" title="几个子系统"></a>几个子系统</h3><ul><li><p>Video:图像控制以及线程和事件管理</p></li><li><p>Audio:声音控制</p></li><li><p>Joystick: 游戏摇杆控制</p></li><li><p>Window: 视窗管理与集成</p></li><li><p>Event: 事件驱动处理</p></li><li><p>Haptic: 触摸事件处理</p></li><li><p>Timer : 时间,计时器管理</p></li></ul><p>SDL本身其实不复杂,甚至有些简陋,单靠SDL你是无法实现一个完善的产品的,往往都需要其他功能库的支持.比如SDL广泛用于音视频播放器开发,但是SDL很多时候只是作为一个跨平台,Window的集成功能,而视频编解码则是通过其他功能库,如FFMPEG等处理的.</p><p>所以,SDL核心之一就是<strong>跨平台</strong>.</p><p>想一个问题,如何将一幅图像显示到屏幕上,我们知道视频其实是有一帧帧的图像数据组成,解决了图像显示到屏幕上的问题就解决了大部分问题.首先我们得从固定格式的图像中,比如JPEG,PNG等格式中解析出原始的图像数据,然后利用OPenGL操作GPU进行处理,经过渲染管线处理,形成像素数据存储到内存中,显示器按照刷新率刷新时,将像素数据映射到屏幕上,形成了我们看到的图像.</p><p>而SDL主要做两件事,一个就是<strong>加载各种格式的图像数据</strong>,一个就是<strong>封装OpenGL或者Direct3D API,更简单的渲染</strong></p><p>还有一个就是<strong>视窗管理与集成</strong>,这个功能也有一些其他的代替库,比如GLFW之类的.</p><h3 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h3><ul><li>SDL_image : 各种图像格式解析与载入,如png,jpeg等</li><li>SDL_mixer : 声音输出方法和声音格式支持,比如mp3,ogg等</li><li>SDL_net : 网络支持</li><li>SDL_ttf : TrueType字体渲染支持</li><li>SDL_rtf: RTF渲染支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Timeline</title>
      <link href="/2020/05/08/flutter/flutter-timeline/"/>
      <url>/2020/05/08/flutter/flutter-timeline/</url>
      
        <content type="html"><![CDATA[<p>Flutter有三种构建模式：</p><ul><li>debug</li><li>release</li><li>profile</li></ul><p>在profile模式下，我们可以看到frame rendering图：</p><h2 id="Frame-Rendering-Chart"><a href="#Frame-Rendering-Chart" class="headerlink" title="Frame Rendering Chart"></a>Frame Rendering Chart</h2><p><img src="https://oss.jiangkang.tech/jk/Timeline.png" alt="渲染图"></p><p>横轴表示每一帧，纵轴表示帧渲染时间。红色表示jank，每一个柱状条可以点击，展开之后可以看到该帧的详细信息。</p><blockquote><p>需要注意的是：</p><ol><li><p>profile模式不支持模拟器</p></li><li><p>profile模式下才可以看到Frame rendering 图</p></li><li><p>开启profile模式的命令是：</p><pre class=" language-shell"><code class="language-shell">flutter run --profile</code></pre></li></ol></blockquote><p>frame rendering 包含两个过程，UI和GPU执行时间：</p><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>UI线程在DartVM中执行dart代码。当你的app创建并在屏幕上显示图像时，UI线程会创建一个layer tree（一个包含了与设备无关的绘制命令的轻量级对象），然后将layer tree发送给GPU去渲染。</p><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><p>GPU线程在Flutter Engine中执行图形代码。该线程接收layer tree作为输入，然后发送给GPU进行图形渲染。应用开发者一般不能直接访问GPU线程和它的数据(但是如果GPU线程很慢，则多半是你写的Dart代码的问题)。</p><p>Skia就是运行在GPU线程上的。</p><blockquote><p>GPU线程有时候也叫rasterizer thread（光栅化线程）</p></blockquote><p>有时候layer tree很容易构建，但是在GPU线程上的渲染成本很高，正如前面所说，这个时候你应该检查一个自己的代码为什么导致GPU渲染代码变慢。</p><h3 id="jank"><a href="#jank" class="headerlink" title="jank"></a>jank</h3><p>国内一般叫做卡顿（渲染时间超过16ms），在frame rendering图中会以红色来表示。</p><p>Timeline View有三种层级：</p><ul><li>Frame Rendering 图</li><li>Frame events 图</li><li>CPU分析图</li></ul><p>前文说的就是Frame Rendering图，下面说一下后面的两种图标。</p><h2 id="Frame-Events-Chart"><a href="#Frame-Events-Chart" class="headerlink" title="Frame Events Chart"></a>Frame Events Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_frame_events_chart.png" alt="事件图"></p><p>如图所示，event是自上而下产生的。</p><p>UI和GPU是独立的事件流，但是它们公用同一个Timeline View。</p><p>同样地，每一个Event信息也都可以点击，这样就会展开更加详细的信息，也就是CPU Profile图。</p><h2 id="CPU-Profile-Chart"><a href="#CPU-Profile-Chart" class="headerlink" title="CPU Profile Chart"></a>CPU Profile Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_cpu_profiler_flame_chart.png" alt="CPU"></p><p>有三种采样粒度：</p><ul><li>low ： 1 sample / 50 μs</li><li>medium（默认）：1 sample / 250 μs</li><li>high ： 1 sample / 1000 μs</li></ul><p>高采样率会影响APP性能。</p><p>CPU profile图和Android Studio上的类似，一般也就是火焰图，调用图，自底向上调用图等，具体的看图方法可以看官方文档。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://flutter.dev/docs/development/tools/devtools/timeline" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/devtools/timeline</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Timeline </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
