<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flutter-Text的使用</title>
      <link href="/2020/05/08/flutter/flutter-text-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-text-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>文本作为UI最基本的元素，最基本的用法有这些：</p><ul><li>字体</li><li>文字大小、颜色</li><li>一些常用样式，比如倾斜，加粗，下划线，删除线等</li><li>文字超出边界之后如何显示</li><li>文字的单行，多行控制</li><li>文字的显示方向</li><li>富文本的显示</li><li>文字渐变，阴影</li><li>文本点击事件</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>如果需要使用自定义字体，则需要在项目中的fonts文件夹下放置字体文件，然后在配置文件pubspec.yaml中进行配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  <span class="token key atrule">fonts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> Raleway      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Italic.ttf          <span class="token key atrule">style</span><span class="token punctuation">:</span> italic    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> RobotoMono      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Bold.ttf          <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">700</span></code></pre><p>使用字体主要有两种方式，一种是通过主题设置统一的字体，一种是为单独的Widget设置字体。</p><p><strong>通过主题设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  title<span class="token punctuation">:</span> <span class="token string">'Custom Fonts'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Set Raleway as the default app font.</span>  theme<span class="token punctuation">:</span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'Raleway'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  home<span class="token punctuation">:</span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>单独设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>  <span class="token string">'Roboto Mono sample'</span><span class="token punctuation">,</span>  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'RobotoMono'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="文字大小，颜色，倾斜，加粗"><a href="#文字大小，颜色，倾斜，加粗" class="headerlink" title="文字大小，颜色，倾斜，加粗"></a>文字大小，颜色，倾斜，加粗</h3><p>这些样式也都是在TextStyle中设置的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"style: color,fontWeight,fontSize,fontStyle"</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>                fontStyle<span class="token punctuation">:</span> FontStyle<span class="token punctuation">.</span>italic<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>其中fontSize使用的是逻辑像素，默认为14，FontWeight.bold表示加粗，当然还可以设置指定的值，fontStyle可以用来控制文本是否倾斜。</p><h3 id="下划线-上划线，删除线，波浪线"><a href="#下划线-上划线，删除线，波浪线" class="headerlink" title="下划线/上划线，删除线，波浪线"></a>下划线/上划线，删除线，波浪线</h3><p>下划线，删除线等属于文本装饰的一种，在TextStyle中通过decoration属性描述：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">TextStyle</span><span class="token punctuation">(</span>                decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>underline<span class="token punctuation">,</span>                decorationColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                decorationStyle<span class="token punctuation">:</span> TextDecorationStyle<span class="token punctuation">.</span>solid<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>效果如下：<br><img src="https://oss.jiangkang.tech/jk/text_underline.png?x-oss-process=style_jiangkang_tech" alt=""></p><p>可以指定下划线的颜色，样式，比如线的实现，还是虚线，还是波浪线等;<br>对于这些装饰，还可以设置双下划线，点线等效果。<br><img src="https://oss.jiangkang.tech/jk/text_underline_double.png?x-oss-process=style_jiangkang_tech" alt=""></p><h3 id="文字超出边界如何显示"><a href="#文字超出边界如何显示" class="headerlink" title="文字超出边界如何显示"></a>文字超出边界如何显示</h3><p>超出边界的显示有三种类型：</p><ul><li>显示省略号</li><li>直接截断</li><li>渐隐</li></ul><p>这几种显示样式都是通过overflow属性控制的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.clip;overflow: TextOverflow.clip;overflow: TextOverflow.clip;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>clip<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>fade<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="文字的单行与多行显示"><a href="#文字的单行与多行显示" class="headerlink" title="文字的单行与多行显示"></a>文字的单行与多行显示</h3><p>文本的多行显示，可以通过maxLines属性和softWrap属性控制，其中maxLines控制最大行数，softWrap控制是否自动换行。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: true;softWrap: true;softWrap: true;softWrap: true;softWrap: true;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3><p>可以使用Text.rich/ RichText + TextSpan来显示富文本：</p><pre class=" language-dart"><code class="language-dart">Text<span class="token punctuation">.</span><span class="token function">rich</span><span class="token punctuation">(</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">"plain text "</span><span class="token punctuation">,</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string">"fontSize"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"decoration"</span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>lineThrough<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_1.png?x-oss-process=style_jiangkang_tech" alt=""></p><pre class=" language-dart"><code class="language-dart"><span class="token function">RichText</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token function">TextSpan</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 1"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 2"</span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_2.png?x-oss-process=style_jiangkang_tech" alt=""></p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>文字的阴影可以通过TextStyle中的shadows属性进行控制：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"style: letterSpacing,shadows"</span><span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>              shadows<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Shadow<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pink<span class="token punctuation">,</span> offset<span class="token punctuation">:</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/text_shadow.png?x-oss-process=style_jiangkang_tech" alt=""></p><h3 id="Text的点击事件"><a href="#Text的点击事件" class="headerlink" title="Text的点击事件"></a>Text的点击事件</h3><p>可以使用GestureDetector，也可以使用InkWell：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">InkWell</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">"Default Text"</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Tabs的使用</title>
      <link href="/2020/05/08/flutter/flutter-tabs-de-shi-yong/"/>
      <url>/2020/05/08/flutter/flutter-tabs-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Flutter中使用tabs还是非常的简单的，可以用在顶部导航栏，也可以用在底部导航栏。</p><div style="width:100%">  <img src="https://oss.jiangkang.tech/jk/tabs1.png?x-oss-process=style_jiangkang_tech" alt="image-20190914220217883" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs2.png?x-oss-process=style_jiangkang_tech" alt="image-20190914220456409" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs3.png?x-oss-process=style_jiangkang_tech" alt="image-20190914220543657" style="zoom:50%;width:33%;float:left;" /></div><p>使用Tabs需要用到两个widget，一个是<code>TabBar</code>,用于顶导航或者底导航；一个是<code>TabBarView</code>，用于Tab下具体的内容。</p><h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><p>首先在AppBar中使用TabBar：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs4.png?x-oss-process=style_jiangkang_tech" alt="Indicator"></p><p>可以看到，底下还有一个Indicator，如果看源码，会发现默认使用的Indicator为<code>UnderlineTabIndicator</code>。</p><p>不过还是可以进行自定义：</p><pre class=" language-dart"><code class="language-dart">  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>其中indicatorColor用来指定Indicator的颜色，IndicatorPadding用来指定内容四周的边距，IndicatorSize可以选择两个值：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> TabBarIndicatorSize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 为tab时，Indicator撑满tab宽度</span>  tab<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// 为label时，Indicator宽度为tab的内容的宽度</span>  label<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs5.png?x-oss-process=style_jiangkang_tech" alt=""></p><h2 id="TabBarView"><a href="#TabBarView" class="headerlink" title="TabBarView"></a>TabBarView</h2><p>TabBarView对应Tab下的内容视图：</p><pre class=" language-dart"><code class="language-dart">  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以看到TabBar和TabBarView中都有一个Controller，这个Controller用途比较大，比如你想知道当前选中的是哪个tab，默认选中哪个tab，都需要TabController的帮助，我们一般用<code>DefaultTabController</code>来包裹具体的视图。</p><p>来看一下全部的代码吧：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/page/page_entry.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TabsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _TabsDemoState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_TabsDemoState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_TabsDemoState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>TabsDemo<span class="token operator">></span>    <span class="token keyword">with</span> SingleTickerProviderStateMixin <span class="token punctuation">{</span>  <span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabController _tabController<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _tabController <span class="token operator">=</span>        <span class="token function">TabController</span><span class="token punctuation">(</span>initialIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">DefaultTabController</span><span class="token punctuation">(</span>        length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>            appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Tabs Demo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              bottom<span class="token punctuation">:</span> <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            floatingActionButton<span class="token punctuation">:</span> <span class="token function">Builder</span><span class="token punctuation">(</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span>                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scaffold<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>        <span class="token function">SnackBar</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"当前选中index为${_tabController.index}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Tab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter时间处理</title>
      <link href="/2020/05/08/flutter/flutter-shi-jian-chu-li/"/>
      <url>/2020/05/08/flutter/flutter-shi-jian-chu-li/</url>
      
        <content type="html"><![CDATA[<p>Flutter 中在时间处理方面还是比较简单的，我们主要用到的有两个类：</p><ul><li><p>DateTime</p><p>表示一个指定的时间点，包括年月日时分秒</p></li><li><p>TimeOfDay</p><p>表示一天中的一个时间点，可以区分上午，下午，12小时制，24小时制等</p></li></ul><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里就得到了一个当前时间的DateTime对象，然后就可以拿到你想要的信息：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">final</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">final</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token punctuation">;</span></code></pre><p>还可以获取当前时星期几：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> week <span class="token operator">=</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">;</span></code></pre><h3 id="转时间戳"><a href="#转时间戳" class="headerlink" title="转时间戳"></a>转时间戳</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String timestamp <span class="token operator">=</span> now<span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><ul><li><p>前2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> before <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>后2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>两个时间点相隔的时间数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> diff <span class="token operator">=</span> after<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">.</span>inHours<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相隔的小时数，也可以是分钟数，秒数</span></code></pre></li></ul><h3 id="上午还是下午"><a href="#上午还是下午" class="headerlink" title="上午还是下午"></a>上午还是下午</h3><p>可以使用TimeOfDay来处理：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeOfDay <span class="token operator">=</span> TimeOfDay<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> amOrPm <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>period<span class="token punctuation">;</span></code></pre><p>其中timeOfDay.period实际上是一个枚举对象：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> DayPeriod <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// Ante meridiem (before noon).</span>  am<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// Post meridiem (after noon).</span>  pm<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这样可以判断是上午还是下午了。</p><h3 id="12-24小时制"><a href="#12-24小时制" class="headerlink" title="12/24小时制"></a>12/24小时制</h3><ul><li><p>24小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour24 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hour<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>12小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour12 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hourOfPeriod<span class="token punctuation">;</span></code></pre></li></ul><p>还可以格式化输出当前的分钟小时数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeStr <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11:49 PM</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart基础语法</title>
      <link href="/2020/05/08/flutter/dart-ji-chu-yu-fa/"/>
      <url>/2020/05/08/flutter/dart-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="重要的概念"><a href="#重要的概念" class="headerlink" title="重要的概念"></a>重要的概念</h3><ul><li>任何你可以放在一个变量中的都是一个object，并且每个object都是一个class的实例，甚至于数字，functions，null都是对象，所有的对象继承自Object类。</li><li>即使Dart是强类型的，但是类型说明是可选的，因为Dart可以推断类型；当你要显式说明没有指定任何类型的时候，可以用dynamic</li><li>Dart也支持泛型，比如List<int>（整数列表）或者List<dynamic>（一个任意类型的对象列表）</li><li>Dart支持顶层函数(如main()),以及绑定到一个类或者对象的方法（静态方法或者实例方法）；</li><li>同样的，Dart支持顶层变量;</li><li>不像Java，Dart中没有public，private，protected这些关键字，如果一个标识符以“_”(下划线)符号开头，则对其库来说是私有的。</li><li>标识符可以以字母或者下划线开头，后加字母或者数字组合</li><li>Dart有表达式（有运行时值）和语句（没有运行时值）， 如condition ? exp1:exp2,与if else 语句相比，前则有值，后者没有值。一个语句经常包含一个或者多个表达式，但是一个表达式不能直接包含一个语句。</li><li>Dart工具可以报告两种问题：errors和warnings。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token keyword">dynamic</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面可以改变类型</span>String name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>没有初始化的变量有一个初始值null，即使是数字类型也一样，因为数字类型也是一个对象。</p><pre class=" language-dart"><code class="language-dart">int lineCount<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果你有一个变量不会改变，应该使用final或者const。<br>一个const变量是一个编译时常量，而一个final 顶层或者类变量当第一次使用的时候初始化。</p><p>注意：实例变量可以是final，但不是const。final型实例变量必须在构造函数体执行之前(变量声明的时候)就初始化。</p><p>在你需要一个编译时常量的时候可以使用const，如果const常量在Class层级，则用static const，在声明的地方将变量设置为编译时常量，比如一个数字，一个字符串，一个const常量，或者一系列常量运算 的结果。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Without a type annotation</span><span class="token keyword">final</span> String nickname <span class="token operator">=</span> <span class="token string">'Bobby'</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unit of pressure (dynes/cm2)</span><span class="token keyword">const</span> double atm <span class="token operator">=</span> <span class="token number">1.01325</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Standard atmosphere</span></code></pre><p>Const关键字不仅可以用于声明常量，还可以用它创建常量值，以及声明创建常量值的构造器，任何变量可以有一个常量。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//你后面可以修改foo，如foo = [1, 2, 3]; </span><span class="token keyword">final</span> bar <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Equivalent to `const []`，后面不能修改baz</span></code></pre><h3 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h3><ul><li>numbers</li></ul><p>  有两种形式，int（64位，依赖于平台，在Dart VM中，为64位）和double（64位）</p><ul><li>strings</li></ul><p>  一个Dart String是一系列UTF-16代码单元，可以使用单引号和双引号。<br>  可以使用${expression}在字符串中表示动态内容，大括号可以省略，对于对象，会使用其toString（）方法；</p><p>   可以用三个引号创建多行文本：</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'''   You can create   multi-line strings like this one.   '''</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">"""This is also a   multi-line string."""</span><span class="token punctuation">;</span></code></pre><p>  可以用一个r创建一个raw string，比如Unicode字符串</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">r'In a raw string, not even \n gets special treatment.'</span><span class="token punctuation">;</span></code></pre><ul><li>booleans</li></ul><p>  为了表示布尔值，Dart有一个叫做bool的类型。</p><ul><li>list/arrays</li></ul><p>  在Dart中，arrays是List对象，这里就直接叫做lists了。</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  为了创建一个编译时常量的list，在list 字面量前加const，如：</p><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>maps</li></ul><p>  键值对，不用多说，上代码:</p><pre class=" language-dart"><code class="language-dart">      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Key:    Value</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">,</span>        <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'turtledoves'</span><span class="token punctuation">,</span>        <span class="token string">'fifth'</span><span class="token punctuation">:</span> <span class="token string">'golden rings'</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'partridge'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'turtledoves'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'golden rings'</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'helium'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'neon'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'argon'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//添加一个新的键值对</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fourth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'calling birds'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Add a key-value pair</span>          <span class="token comment" spellcheck="true">//取值</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'partridge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果不存在，会返回null</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//编译时常量</span>          <span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>            <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></code></pre><ul><li>runes(用于在字符串中标识Unicode字符)</li></ul><p>  Dart中， runes是字符串的UTF-32代码点。<br>  由于Dart使用的是UTF-16，因此在字符串中表示32位字符，需要特殊的语法。<br>  一般表示方式是\uXXXX,XXXX是一个4位16进制数</p><pre class=" language-dart"><code class="language-dart">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clapping <span class="token operator">=</span> <span class="token string">'\u{1f44f}'</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>codeUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>runes<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Runes input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runes</span><span class="token punctuation">(</span>    <span class="token string">'\u2665  \u{1f605}  \u{1f60e}  \u{1f47b}  \u{1f596}  \u{1f44d}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String<span class="token punctuation">.</span>fromCharCodes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>symbols</li></ul><p>  一个Symbol对象表示一个Dart程序中声明的运算符或者标识符。你可能永远都不会使用这个。不多说。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Dart是一个真正面向对象的语言，即使是function都有一个叫做Function的对象。也就是说，Function可以赋值给一个变量，或者作为参数传递给其他functions，你也可以像调用函数一样调用Dart实例，如Callable Classes。（后面又说，暂时忽略即可）</p><pre class=" language-dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果函数只是包含了一个简单的表达式，可以用速记方法表示</span>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><code>=&gt; expr</code> 是 { return expr; }的速写方式。值得注意的是，这里只可以用表达式的速写，而不可以用语句的速写，比如不可以使用if语句。</p><p>一个function有两种类型的参数，required和optional，必须的参数放在最前面，可选参数放在后面。命名的可选参数也可以用@required标记。</p><p>可选参数可以是位置性的，也可以是命名的，但是不能包含这两种情况。</p><h4 id="可选命名参数"><a href="#可选命名参数" class="headerlink" title="可选命名参数"></a>可选命名参数</h4><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Flutter中创建实例的参数很多，因此主要使用可选命名参数这种方式，便于阅读。</p><p>你也可以用@required注解表示这是个必须的参数，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span> <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Required 是在meta 包下面定义的，因此你需要import package:meta/meta.dart 或者，import那些输出meta包的包，如Flutter下的package:flutter/material.dart.</p><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title="可选位置参数"></a>可选位置参数</h4><p>用[] 包裹着的参数：</p><pre class=" language-dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>你的function可以用=为可选位置参数或者可选命名参数定义默认值，而且必须使用编译时常量值，如果没有提供默认值，那么默认值为null。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Sets the [bold] and [hidden] flags ...</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// bold will be true; hidden will be false.</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span>    <span class="token punctuation">[</span>String device <span class="token operator">=</span> <span class="token string">'carrier pigeon'</span><span class="token punctuation">,</span> String mood<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mood <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result (in a $mood mood)'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a carrier pigeon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> gifts <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'paper'</span><span class="token punctuation">,</span>      <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'cotton'</span><span class="token punctuation">,</span>      <span class="token string">'third'</span><span class="token punctuation">:</span> <span class="token string">'leather'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'list:  $list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'gifts: $gifts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p>每一个APP都必须有一个main（）方法，作为app的入口点。main（）方法返回void，可以有一个List<String> 作为参数。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sample_text_id'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Click me!'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>reverseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种..的语法叫做级联。通过级联，你可以对单个对象的成员执行多个操作。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Run the app like this: dart args.dart 1 test</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你也可以用args库，来定义和解析命令行参数。</p><h4 id="作为第一类对象的functions"><a href="#作为第一类对象的functions" class="headerlink" title="作为第一类对象的functions"></a>作为第一类对象的functions</h4><p>你可以将一个function作为参数传递给另一个function：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pass printElement as a parameter.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以将一个function赋值给一个变量：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'!!! ${msg.toUpperCase()} !!!'</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'!!! HELLO !!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>你可以创建一个没有命名的函数，如匿名函数，lambda，闭包等。<br>下面的代码块就包含了一个函数体：</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span> param1<span class="token punctuation">[</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   codeBlock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p>如下面这个方法，使用了没有指定类型的参数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token string">'oranges'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果函数只包含一个语句，可以用=&gt; 箭头速写方式。</p><pre class=" language-dart"><code class="language-dart">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="嵌套函数变量作用域问题"><a href="#嵌套函数变量作用域问题" class="headerlink" title="嵌套函数变量作用域问题"></a>嵌套函数变量作用域问题</h4><pre class=" language-dart"><code class="language-dart">bool topLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> insideMain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> insideFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">nestedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> insideNestedFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideMain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideNestedFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nestedFunction()可以使用每一个层级的变量。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>参考JavaScript中的闭包</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Returns a function that adds [addBy] to the</span><span class="token comment" spellcheck="true">/// function's argument.</span>Function <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a function that adds 2.</span>  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Create a function that adds 4.</span>  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>所有function都会返回一个值，如果没有指定，则返回null：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>基本的就不说了，和其他语言的大同小异，如Java,JavaScript等。</p><p>不同的是：</p><p>?? 代表 if null<br>?. 表示 如果不为null才执行（参考kotlin）<br>~/ 代表 整除（返回值为int）<br>/  返回值 为double<br>as 用来类型转换（和kotlin一样）<br>is 判断是否属于否个类型</p><h4 id="级联操作符"><a href="#级联操作符" class="headerlink" title="..(级联操作符)"></a>..(级联操作符)</h4><p>级联操作符允许你在相同的对象上执行一系列操作。除了函数调用，你还可以通过级联访问同一个对象上的多个字段（field）。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Get an object.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span> <span class="token comment" spellcheck="true">// Use its members.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与下面这段等价：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然，也可以进行嵌套：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> addressBook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">AddressBookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jenny'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">'jenny@example.com'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">PhoneNumberBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string">'415-555-0100'</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">'home'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在返回实际对象的function上运用级联要非常小心，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: method 'write' isn't defined for 'void'.</span></code></pre><p>Sb.write()返回void，你不能在void上构造级联。</p><h3 id="控制流-异常"><a href="#控制流-异常" class="headerlink" title="控制流/异常"></a>控制流/异常</h3><p>和其他语言大同小异，不多说。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过常量构造器创建编译时常量</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// They are the same instance!</span></code></pre><p>子类不从父类继承构造函数，如果子类没有声明构造函数，则是默认的午餐构造函数。</p><h4 id="获取一个对象的类型"><a href="#获取一个对象的类型" class="headerlink" title="获取一个对象的类型"></a>获取一个对象的类型</h4><p>可以使用runtimeType属性获取一个对象的类型，这个属性返回一个Type类型的对象。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The type of a is ${a.runtimeType}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Named constructor</span>  Point<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用一个非默认的超类构造函数"><a href="#调用一个非默认的超类构造函数" class="headerlink" title="调用一个非默认的超类构造函数"></a>调用一个非默认的超类构造函数</h4><p>默认情况下，一个子类的构造函数调用超类的没有命名的无参构造函数。超类的构造函数在构造函数体的开始被调用，如果还是用了初始化列表，则初始化列表先于超类被调用。<br>执行顺序如下：</p><ol><li>初始化列表</li><li>超类的无参构造函数</li><li>main class的无参构造函数</li></ol><p>如果超类没有无命名的无参构造函数，你必须手动调用它的一个构造函数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">getDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>除了调用超类构造函数之外，还可以在构造函数体执行之前初始化实例变量。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Initializer list sets instance variables before</span><span class="token comment" spellcheck="true">// the constructor body runs.</span>Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> num<span class="token operator">></span> json<span class="token punctuation">)</span>    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.fromJson(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化程序的右边部分无法访问this。</p><p>开发过程中也可以使用assert进行输入验证：</p><pre class=" language-dart"><code class="language-dart">Point<span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.withAssert(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title="重定向构造函数"></a>重定向构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The main constructor for this class.</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Delegates to the main constructor.</span>  Point<span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h4><p>如果你的类提供用不改变的对象，那么你可以将那些对象设置为编译时常量。为了实现这种效果，你需要定义个常量构造函数，并且确认所有的实例变量都是final类型的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutablePoint origin <span class="token operator">=</span>      <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>常量构造函数也不总是创建常量。</p><h4 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h4><p>借助factory关键字，你不用每次创建对象的时候都创建一个新的对象，而可以从缓存中返回，或者返回一个子类型的对象。</p><p>下面是一个从缓存中返回对象的例子：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// _cache is library-private, thanks to</span>  <span class="token comment" spellcheck="true">// the _ in front of its name.</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span> _cache <span class="token operator">=</span>      <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token function">Logger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span>      <span class="token keyword">return</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>值得注意的是工厂构造函数无法访问this。</p><p>调用工厂构造方法和调用其他构造方法的方式是一样的：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token string">'UI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method/方法"></a>Method/方法</h3><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter / Setter"></a>Getter / Setter</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Define two calculated properties: right and bottom.</span>  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>抽象方法仅存在于抽象类中；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define instance variables and methods...</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Define an abstract method.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Provide an implementation, so the method is not abstract here...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是不可以实例化的。如果你想要你的抽象类看起来是实例化的，可以定义一个工厂构造函数。</p><p>抽象类通常都有抽象方法。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// This class is declared abstract and thus</span><span class="token comment" spellcheck="true">// can't be instantiated.</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define constructors, fields, methods...</span>  <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Abstract method.</span><span class="token punctuation">}</span></code></pre><h4 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h4><p>每个类都隐式定义一个接口，该接口包含该类的所有实例成员，以及其实现的任何接口；如果你想要在不继承B类实现的情况下创建支持B类API的A类，则A类应该实现B接口。</p><p>类可以通过 implements 实现一个或者多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// A person. The implicit interface contains greet().</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// In the interface, but visible only in this library.</span>  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Not in the interface, since this is a constructor.</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// In the interface.</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hello, $who. I am $_name.'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// An implementation of the Person interface.</span><span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">;</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hi $who. Do you know who I am?'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String <span class="token function">greetBob</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Kathy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> Location <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="拓展一个类"><a href="#拓展一个类" class="headerlink" title="拓展一个类"></a>拓展一个类</h4><p>使用extends创建子类，使用super引用超类。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_illuminateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_activateIrSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_bootNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_initializeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_upgradeApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写成员"><a href="#重写成员" class="headerlink" title="重写成员"></a>重写成员</h5><p>子类可以重写实例方法，Getter和Setter，你可以用@override表示你打算重写某个承运。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写操作符"><a href="#重写操作符" class="headerlink" title="重写操作符"></a>重写操作符</h5><p>你可以重写操作符，比如你创建了一个Vector类，可以重写+操作符进行向量的加法：</p><p><code>！=</code>不可以重写，因为这只是一个语法糖。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Operator == and hashCode not shown. For details, see note below.</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你重写 <code>==</code>那么你也得重写<code>hashCode</code></p><h5 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h5><p>为了监测和响应调用没有实现的方法或者实例变量的情况，你应该重写noSuchMethod()方法；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Unless you override noSuchMethod, using a</span>  <span class="token comment" spellcheck="true">// non-existent member results in a NoSuchMethodError.</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'You tried to use a non-existent member: '</span> <span class="token operator">+</span>        <span class="token string">'${invocation.memberName}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span></code></pre><p>每个枚举类型中的值都有一个index getter，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取枚举中所有值的列表：</p><pre class=" language-dart"><code class="language-dart">List<span class="token operator">&lt;</span>Color<span class="token operator">></span> colors <span class="token operator">=</span> Color<span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用在switch流程中：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> aColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Red as roses!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Green as grass!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Without this, you see a WARNING.</span>    <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Color.blue'</span><span class="token punctuation">}</span></code></pre><h4 id="向class中添加特征：mixins"><a href="#向class中添加特征：mixins" class="headerlink" title="向class中添加特征：mixins"></a>向class中添加特征：mixins</h4><p>Mixins是一种在多个类层次中重用类代码的方式。</p><p>可以用with 关键字使用mixins：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> Musical <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span>    <span class="token keyword">with</span> Musical<span class="token punctuation">,</span> Aggressive<span class="token punctuation">,</span> Demented <span class="token punctuation">{</span>  <span class="token function">Maestro</span><span class="token punctuation">(</span>String maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span>    canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了实现一个mixin，创建一个继承Object的类，不要声明构造函数，不要调用super，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>  bool canPlayPiano <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canCompose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canConduct <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">entertainMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canPlayPiano<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Playing piano'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canConduct<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Waving hands'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Humming to self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Class-变量和方法"><a href="#Class-变量和方法" class="headerlink" title="Class 变量和方法"></a>Class 变量和方法</h4><p>和Java中的静态方法一样，用static表示：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>Queue<span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态变量使用的时候才会初始化。</p><p>静态方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:math'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> num <span class="token function">distanceBetween</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> distance <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>考虑用顶层函数替代静态方法。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>和Java一样，也都是List<E>形式的。</p><h4 id="使用集合字面量"><a href="#使用集合字面量" class="headerlink" title="使用集合字面量"></a>使用集合字面量</h4><p>List和map字面量都可以泛化：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token string">'index.html'</span><span class="token punctuation">:</span> <span class="token string">'Homepage'</span><span class="token punctuation">,</span>  <span class="token string">'robots.txt'</span><span class="token punctuation">:</span> <span class="token string">'Hints for web robots'</span><span class="token punctuation">,</span>  <span class="token string">'humans.txt'</span><span class="token punctuation">:</span> <span class="token string">'We are people, not machines'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="在构造函数中使用泛型"><a href="#在构造函数中使用泛型" class="headerlink" title="在构造函数中使用泛型"></a>在构造函数中使用泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nameSet <span class="token operator">=</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> views <span class="token operator">=</span> Map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span> View<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型集合和它们包含的类型"><a href="#泛型集合和它们包含的类型" class="headerlink" title="泛型集合和它们包含的类型"></a>泛型集合和它们包含的类型</h4><p>与Java不同，Dart中的泛型在运行时是可以携带类型信息的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="限定泛型"><a href="#限定泛型" class="headerlink" title="限定泛型"></a>限定泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Implementation goes here...</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Instance of 'Foo&lt;$T>'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Extender</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用子类作为泛型参数</span><span class="token keyword">var</span> someBaseClassFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>SomeBaseClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> extenderFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Extender<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不指定泛型也可以</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Instance of 'Foo&lt;SomeBaseClass>'</span></code></pre><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><pre class=" language-dart"><code class="language-dart">T first<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Do some initial work or error checking, then...</span>  T tmp <span class="token operator">=</span> ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do some additional checking or processing...</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Librarys-和它的可见性"><a href="#Librarys-和它的可见性" class="headerlink" title="Librarys 和它的可见性"></a>Librarys 和它的可见性</h3><p>可见性： _ 表示仅仅对该Library可见。</p><p>每一个Dart App都是一个Library。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:html'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:test/test.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定别名</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib1.</span>Element element1 <span class="token operator">=</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib2.</span>lib2<span class="token punctuation">.</span>Element element2 <span class="token operator">=</span> lib2<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import only foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span> show foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import all names EXCEPT foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> hide foo<span class="token punctuation">;</span></code></pre><h4 id="库的懒加载"><a href="#库的懒加载" class="headerlink" title="库的懒加载"></a>库的懒加载</h4><p>懒加载（延迟加载）允许app按需加载一个库。</p><p>下面是用到懒加载的一些场景：</p><ul><li>为了减少一个app的初始化启动时间</li><li>进行A/B测试</li><li>加载很少被使用的库</li></ul><p>使用方式：必须首先用deferred as</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:greetings/hello.dart'</span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span></code></pre><p>要使用的时候，调用库的loadLibrary()方法：</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hello<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码中，await表示等待hello库加载完成才继续执行。</p><p>你可以多次调用一个库的loadLibrary()方法，但是它只会被加载一次。</p><p>当你使用库的懒加载的时候，需要注意下面这些：</p><ul><li>一个懒加载库中的常量不是导入文件中的常量，在库加载之前，这些常量都不存在；</li><li>你不能在导入文件中使用懒加载库中的类型，但是，你可以考虑将接口类型移动到由懒加载库和导入文件导入的库。</li><li>Dart隐式的将loadLibrary()插入到使用deferred as namespace 定义的命名空间中，loadLibray()返回Future类型。</li></ul><p>注意：即使是在loadLibrary（）执行之前，Dart VM也允许访问懒加载库中的成员，这个特征在后面可能会变更，应该避免使用。</p><h3 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h3><p>Dart中很多函数都返回Future和Stream对象。 这些函数都是异步的。</p><p>async/await 支持你在Dart中进行异步编程。</p><p>当你使用await的时候，必须在方法外面用async包裹。</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">checkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do something with version</span><span class="token punctuation">}</span></code></pre><p>必要的时候需要处理异常：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>  version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// React to inability to look up the version</span><span class="token punctuation">}</span></code></pre><p>在异步方法中，你可以多次使用await</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> entrypoint <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findEntrypoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> exitCode <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runExecutable</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">flushThenExit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h4><pre class=" language-dart"><code class="language-dart">Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1.0.0'</span><span class="token punctuation">;</span></code></pre><p>如果不返回一个有用的值，可以用<code>Future&lt;void&gt;</code></p><h4 id="处理Streams"><a href="#处理Streams" class="headerlink" title="处理Streams"></a>处理Streams</h4><p>可以从Stream中获取值。</p><p>你需要用async和一个异步循环(await for)</p><p>注意：在使用await for之前，确信你知道要一直等待循环获取到所有结果。比如在处理UI事件的时候，就不应该使用这个，因为UI事件是无尽的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>varOrType identifier <span class="token keyword">in</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Executes each time the stream emits a value.</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart">Future <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> request <span class="token keyword">in</span> requestServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>你也可以用break或者return终止循环。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当你需要laily生成一系列值，你可以使用生成器。</p><p>目前有两种生成器：</p><ul><li>同步生成器： 返回Iterable对象</li><li>异步生成器： 返回Stream对象</li></ul><p>同步生成器： 用 sync* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步生成器： 用async* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Stream<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">asynchronousNaturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你的生成器是递归的，可以用yield*提升性能：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>    <span class="token keyword">yield*</span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.dartlang.org/guides/language/language-tour" target="_blank" rel="noopener">https://www.dartlang.org/guides/language/language-tour</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-实现图片圆角的几种方式</title>
      <link href="/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/"/>
      <url>/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>图片圆角在开发中还是非常常见的，用Flutter实现圆角还是非常简单的，目前了解的大概有下面这几种：</p><ul><li>通过Card的shape属性</li><li>通过Container的decoration</li><li>直接使用ClipRRect</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://oss.jiangkang.tech/jk/tupianyuanjiao.png?x-oss-process=style_jiangkang_tech" style="zoom:50%;" /><h2 id="通过Card的shape属性"><a href="#通过Card的shape属性" class="headerlink" title="通过Card的shape属性"></a>通过Card的shape属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Card</span><span class="token punctuation">(</span>            shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            clipBehavior<span class="token punctuation">:</span> Clip<span class="token punctuation">.</span>antiAlias<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>              <span class="token string">"images/landscape0.jpeg"</span><span class="token punctuation">,</span>              width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p>唯一值的注意的地方就是borderRadius看准了，不要用错了，要不然没效果。</p><h2 id="通过Container的decoration"><a href="#通过Container的decoration" class="headerlink" title="通过Container的decoration"></a>通过Container的decoration</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span>          decoration<span class="token punctuation">:</span> <span class="token function">ShapeDecoration</span><span class="token punctuation">(</span>              image<span class="token punctuation">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>                  image<span class="token punctuation">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/landscape1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>fitWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">Align</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Padding</span><span class="token punctuation">(</span>              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">"Container decoration实现圆角(radius = 20)"</span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>使用的DecorationImage，相当于把图片当做一个背景，这里需要注意的就是Container的child的尺寸问题，就算不放内容，也需要设置一个带尺寸的child Widget。</p><h2 id="直接使用ClipRRect"><a href="#直接使用ClipRRect" class="headerlink" title="直接使用ClipRRect"></a>直接使用ClipRRect</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">ClipRRect</span><span class="token punctuation">(</span>              borderRadius<span class="token punctuation">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string">"images/landscape2.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>这种方式是最简单的，直接使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 圆角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter深色模式</title>
      <link href="/2020/05/08/flutter/flutter-shen-se-mo-shi/"/>
      <url>/2020/05/08/flutter/flutter-shen-se-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>这些年，移动端UI的深色模式还是比较常见你的，IOS在系统级别已经率先支持了，Flutter作为一款优秀的跨端UI框架，在处理深色模式上是比较简单的。</p><img src="https://oss.jiangkang.tech/jk/shense.gif?x-oss-process=style_jiangkang_tech" style="zoom:50%;" /><h2 id="Brightness"><a href="#Brightness" class="headerlink" title="Brightness"></a>Brightness</h2><p>Flutter中有一个Brightness的概念，用来表示主题和颜色的亮暗模式。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Brightness <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The color is dark and will require a light text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be dark grey, requiring white text.</span>  dark<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// The color is light and will require a dark text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be bright white, requiring black text.</span>  light<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Flutter针对主题也提供了封装：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>dark<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问方式如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> lightTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> dartTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们首先想一下，要实现一个切换深色主题的功能的步骤是什么？</p><ol><li>设置页：进行浅色/深色模式切换，并进行持久化，以便app重启之后还是生效的；</li><li>App：启动的时候获取持久化的浅色/深色模式，并应用到app的主题上；</li><li>切换时实时刷新主题的深浅模式；</li></ol><h2 id="1-进行深浅色模式的切换"><a href="#1-进行深浅色模式的切换" class="headerlink" title="1. 进行深浅色模式的切换"></a>1. 进行深浅色模式的切换</h2><img src="https://oss.jiangkang.tech/jk/shense2.png?x-oss-process=style_jiangkang_tech" style="zoom:50%;" /><p>这里使用SharedPreferences来进行持久化，代码比较简单：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/constants/const_key_value.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/theme/custom_themes.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/utils/sp_utils.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:provider/provider.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 设置页</span><span class="token keyword">class</span> <span class="token class-name">SettingsPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _SettingsPageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_SettingsPageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_SettingsPageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>SettingsPage<span class="token operator">></span> <span class="token punctuation">{</span>  bool _isDarkMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _isDarkMode <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"设置页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">SafeArea</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">ListView</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">SwitchListTile</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"深色模式"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> _isDarkMode<span class="token punctuation">,</span>            onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SpUtils<span class="token punctuation">.</span><span class="token function">saveBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                _isDarkMode <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>newValue <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            activeColor<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="App启动时获取持久化的深浅色模式"><a href="#App启动时获取持久化的深浅色模式" class="headerlink" title="App启动时获取持久化的深浅色模式"></a>App启动时获取持久化的深浅色模式</h2><pre class=" language-dart"><code class="language-dart">SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="深浅色模式改变时，实时刷新APP"><a href="#深浅色模式改变时，实时刷新APP" class="headerlink" title="深浅色模式改变时，实时刷新APP"></a>深浅色模式改变时，实时刷新APP</h2><p>从前面的两段代码可以看出，我们使用了Provider。</p><p>这里我们可以把Provider当做一个单例模式，一处改变，全局生效。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> themeProvider <span class="token operator">=</span> Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Flutter System'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> themeProvider<span class="token operator">?</span><span class="token punctuation">.</span>currentTheme <span class="token operator">?</span><span class="token operator">?</span> lightTheme<span class="token punctuation">,</span>      debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> pageRouters<span class="token punctuation">,</span>      localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>        S<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalMaterialLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalWidgetsLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      supportedLocales<span class="token punctuation">:</span> S<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>supportedLocales<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 深色模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的init方法</title>
      <link href="/2020/05/08/golang/golang-zhong-de-init-fang-fa/"/>
      <url>/2020/05/08/golang/golang-zhong-de-init-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="init方法是什么"><a href="#init方法是什么" class="headerlink" title="init方法是什么"></a><code>init</code>方法是什么</h2><p>我们都知道程序的入口在main包下的<code>main()</code>方法,其实还有一个方法会在<code>main</code>方法之前执行,这个方法就是<code>init()</code></p><p><code>init()</code>方法用于package级别的一些初始化操作.</p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li><code>init</code>先于<code>main</code>自动执行,不能被其他函数调用</li><li><code>init</code>方法没有输入参数和返回值</li><li>每个package可以有多个<code>init</code>方法</li><li>package下的每个源文件可以有多个<code>init</code>方法</li><li>同一个package下的<code>init</code> 方法执行顺序不确定,不要存在依赖关系</li><li>不同package的<code>init</code>方法的执行顺序由package依赖关系确定(没有依赖的package最先执行)</li></ul><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><p>需要注意的地方就是,想要让<code>init</code>方法起作用,你必须要导入对应的package,但是如果你只想使用<code>init</code>方法,不想使用包里的其他方法,这个时候就需要无副作用的导入了:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jiangkang/JustGo/basic"</span>    <span class="token boolean">_</span> <span class="token string">"net/http"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中的存储路径</title>
      <link href="/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/"/>
      <url>/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="存储数据的几种方式"><a href="#存储数据的几种方式" class="headerlink" title="存储数据的几种方式"></a>存储数据的几种方式</h2><ul><li><p>应用专属存储空间</p><p>应用专属空间里的数据会在应用被卸载的时候删除，清除缓存通常指的是清除缓存文件下的文件，清空数据则是清空所有cache，files下文件，如果想让其他APP可以访问这些私有数据，可以利用FileProvider。</p><ul><li><p>内部存储</p><p>大多是通过Context获取的地址，一般在/data/data文件夹下，如</p><ul><li>dataDir: /data/data/packagename</li><li>filesDir: /data/data/packagename/files</li><li>cacheDir: /data/data/packagename/cache</li><li>codeCacheDir:/data/data/packagename/code_cache</li></ul></li><li><p>外部存储</p><p>可以通过Context获取，也可以通过Environment获取，一般在/storage/emulated/0/Android/data/pacakagename/，如：</p><ul><li>externalCacheDir：/storage/emulated/0/Android/data/pacakagename/cache</li><li>getExternalFilesDir:/storage/emulated/0/Android/data/pacakagename/files</li><li>externalMediaDirs</li></ul></li><li><p>SharedPreference</p></li><li><p>本地数据库</p></li></ul></li><li><p>共享的存储空间</p><p>可以被其他APP访问的数据，app卸载不会被删除,通常位于/storage/emulated/0下(除了/storage/emulated/0/Android/data/pacakagename)。</p><ul><li><p>media files</p><p>可以通过 MediaStore处理</p></li><li><p>文档和其他文件</p><p>可以通过ContentResolver和其他相关方法处理</p></li></ul></li></ul><h2 id="几个容易混淆的地方"><a href="#几个容易混淆的地方" class="headerlink" title="几个容易混淆的地方"></a>几个容易混淆的地方</h2><h3 id="data-data-vs-data-user-0"><a href="#data-data-vs-data-user-0" class="headerlink" title="/data/data vs /data/user/0"></a>/data/data vs /data/user/0</h3><h3 id="Android-data-vs-Android-user-0"><a href="#Android-data-vs-Android-user-0" class="headerlink" title="/Android/data vs /Android/user/0"></a>/Android/data vs /Android/user/0</h3><p>现在的手机操作系统多是支持多用户的，最常见的就是“访客模式”，通常情况下，/data/data 与 /data/user/0是等价的，对于不同的用户，实际的存储位置可能是/user/xxx,但是我们通常只需要访问/data/data即可。</p><h3 id="mnt-sdcard-vs-sdcard-vs-storage-sdcard0"><a href="#mnt-sdcard-vs-sdcard-vs-storage-sdcard0" class="headerlink" title="/mnt/sdcard vs /sdcard  vs /storage/sdcard0"></a>/mnt/sdcard vs /sdcard  vs /storage/sdcard0</h3><p> 这个其实就是“软链接”的区别，可以通过 <code>ls -l</code>命令查看：</p><pre class=" language-bash"><code class="language-bash">storage/sdcard0 -<span class="token operator">></span> /sdcardmnt/sdcard -<span class="token operator">></span> /storage/self/primarysdcard -<span class="token operator">></span> /storage/self/primary</code></pre><p>可以看到这几个地址的真实地址实际上都是/storage/self/primary。</p><h3 id="storage-emulated-0"><a href="#storage-emulated-0" class="headerlink" title="/storage/emulated/0"></a>/storage/emulated/0</h3><p>共享的存储空间的根目录，其中0代表的是主存，如果有移动的存储空间，如外接SD卡，则会有其他数字。</p><p>可通过下列方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在Android Q之后，这个方法标记废弃，可以使用</p><pre class=" language-java"><code class="language-java">Context#<span class="token function">getExternalFilesDir</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span></code></pre><p>或者<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>等方法作为替代。</p><p>该目录下在没有被app污染时，通常有以下这些子目录：</p><pre><code>Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</code></pre><p>对于具体的子目录，可以通过以下方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span>getExternalStoragePublicDirectory</code></pre><p>Android Q之后，可用上面说的<code>Context#getExternalFilesDir(String)</code>，<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>替代。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识SDL</title>
      <link href="/2020/05/08/c/chu-shi-sdl/"/>
      <url>/2020/05/08/c/chu-shi-sdl/</url>
      
        <content type="html"><![CDATA[<h2 id="SDL是什么"><a href="#SDL是什么" class="headerlink" title="SDL是什么"></a>SDL是什么</h2><p>Simple DirectMedia Layer 是一个跨平台的开发库,它提供了对音频,键盘,鼠标,游戏手柄的底层访问接口.以及通过OpenGL或者Direct3D控制图形硬件的接口.</p><p>目前支持以下平台:</p><ul><li><p>Windows </p></li><li><p>Linux</p></li><li><p>Android</p></li><li><p>IOS</p></li><li><p>MacOS</p></li></ul><h2 id="SDL可以做什么"><a href="#SDL可以做什么" class="headerlink" title="SDL可以做什么"></a>SDL可以做什么</h2><ul><li><p>视频播放器</p></li><li><p>音频处理</p></li><li><p>输入事件处理,比如键盘,鼠标等</p></li><li><p>文件I/O</p></li><li><p>线程,定时器等其余功能</p></li></ul><h2 id="SDL的核心架构"><a href="#SDL的核心架构" class="headerlink" title="SDL的核心架构"></a>SDL的核心架构</h2><h3 id="几个子系统"><a href="#几个子系统" class="headerlink" title="几个子系统"></a>几个子系统</h3><ul><li><p>Video:图像控制以及线程和事件管理</p></li><li><p>Audio:声音控制</p></li><li><p>Joystick: 游戏摇杆控制</p></li><li><p>Window: 视窗管理与集成</p></li><li><p>Event: 事件驱动处理</p></li><li><p>Haptic: 触摸事件处理</p></li><li><p>Timer : 时间,计时器管理</p></li></ul><p>SDL本身其实不复杂,甚至有些简陋,单靠SDL你是无法实现一个完善的产品的,往往都需要其他功能库的支持.比如SDL广泛用于音视频播放器开发,但是SDL很多时候只是作为一个跨平台,Window的集成功能,而视频编解码则是通过其他功能库,如FFMPEG等处理的.</p><p>所以,SDL核心之一就是<strong>跨平台</strong>.</p><p>想一个问题,如何将一幅图像显示到屏幕上,我们知道视频其实是有一帧帧的图像数据组成,解决了图像显示到屏幕上的问题就解决了大部分问题.首先我们得从固定格式的图像中,比如JPEG,PNG等格式中解析出原始的图像数据,然后利用OPenGL操作GPU进行处理,经过渲染管线处理,形成像素数据存储到内存中,显示器按照刷新率刷新时,将像素数据映射到屏幕上,形成了我们看到的图像.</p><p>而SDL主要做两件事,一个就是<strong>加载各种格式的图像数据</strong>,一个就是<strong>封装OpenGL或者Direct3D API,更简单的渲染</strong></p><p>还有一个就是<strong>视窗管理与集成</strong>,这个功能也有一些其他的代替库,比如GLFW之类的.</p><h3 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h3><ul><li>SDL_image : 各种图像格式解析与载入,如png,jpeg等</li><li>SDL_mixer : 声音输出方法和声音格式支持,比如mp3,ogg等</li><li>SDL_net : 网络支持</li><li>SDL_ttf : TrueType字体渲染支持</li><li>SDL_rtf: RTF渲染支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-Timeline</title>
      <link href="/2020/05/08/flutter/flutter-timeline/"/>
      <url>/2020/05/08/flutter/flutter-timeline/</url>
      
        <content type="html"><![CDATA[<p>Flutter有三种构建模式：</p><ul><li>debug</li><li>release</li><li>profile</li></ul><p>在profile模式下，我们可以看到frame rendering图：</p><h2 id="Frame-Rendering-Chart"><a href="#Frame-Rendering-Chart" class="headerlink" title="Frame Rendering Chart"></a>Frame Rendering Chart</h2><p><img src="https://oss.jiangkang.tech/jk/Timeline.png?x-oss-process=style_jiangkang_tech" alt="渲染图"></p><p>横轴表示每一帧，纵轴表示帧渲染时间。红色表示jank，每一个柱状条可以点击，展开之后可以看到该帧的详细信息。</p><blockquote><p>需要注意的是：</p><ol><li><p>profile模式不支持模拟器</p></li><li><p>profile模式下才可以看到Frame rendering 图</p></li><li><p>开启profile模式的命令是：</p><pre class=" language-shell"><code class="language-shell">flutter run --profile</code></pre></li></ol></blockquote><p>frame rendering 包含两个过程，UI和GPU执行时间：</p><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p>UI线程在DartVM中执行dart代码。当你的app创建并在屏幕上显示图像时，UI线程会创建一个layer tree（一个包含了与设备无关的绘制命令的轻量级对象），然后将layer tree发送给GPU去渲染。</p><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><p>GPU线程在Flutter Engine中执行图形代码。该线程接收layer tree作为输入，然后发送给GPU进行图形渲染。应用开发者一般不能直接访问GPU线程和它的数据(但是如果GPU线程很慢，则多半是你写的Dart代码的问题)。</p><p>Skia就是运行在GPU线程上的。</p><blockquote><p>GPU线程有时候也叫rasterizer thread（光栅化线程）</p></blockquote><p>有时候layer tree很容易构建，但是在GPU线程上的渲染成本很高，正如前面所说，这个时候你应该检查一个自己的代码为什么导致GPU渲染代码变慢。</p><h3 id="jank"><a href="#jank" class="headerlink" title="jank"></a>jank</h3><p>国内一般叫做卡顿（渲染时间超过16ms），在frame rendering图中会以红色来表示。</p><p>Timeline View有三种层级：</p><ul><li>Frame Rendering 图</li><li>Frame events 图</li><li>CPU分析图</li></ul><p>前文说的就是Frame Rendering图，下面说一下后面的两种图标。</p><h2 id="Frame-Events-Chart"><a href="#Frame-Events-Chart" class="headerlink" title="Frame Events Chart"></a>Frame Events Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_frame_events_chart.png?x-oss-process=style_jiangkang_tech" alt="事件图"></p><p>如图所示，event是自上而下产生的。</p><p>UI和GPU是独立的事件流，但是它们公用同一个Timeline View。</p><p>同样地，每一个Event信息也都可以点击，这样就会展开更加详细的信息，也就是CPU Profile图。</p><h2 id="CPU-Profile-Chart"><a href="#CPU-Profile-Chart" class="headerlink" title="CPU Profile Chart"></a>CPU Profile Chart</h2><p><img src="https://oss.jiangkang.tech/jk/timeline_cpu_profiler_flame_chart.png?x-oss-process=style_jiangkang_tech" alt="CPU"></p><p>有三种采样粒度：</p><ul><li>low ： 1 sample / 50 μs</li><li>medium（默认）：1 sample / 250 μs</li><li>high ： 1 sample / 1000 μs</li></ul><p>高采样率会影响APP性能。</p><p>CPU profile图和Android Studio上的类似，一般也就是火焰图，调用图，自底向上调用图等，具体的看图方法可以看官方文档。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://flutter.dev/docs/development/tools/devtools/timeline" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/devtools/timeline</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
