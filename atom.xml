<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姜康的技术博客</title>
  
  <subtitle>读书,行路,阅人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jiangkang.tech/"/>
  <updated>2020-05-29T14:42:58.199Z</updated>
  <id>https://www.jiangkang.tech/</id>
  
  <author>
    <name>姜康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GN构建C++项目之HelloWorld</title>
    <link href="https://www.jiangkang.tech/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/"/>
    <id>https://www.jiangkang.tech/2020/05/29/c/gn-gou-jian-c-xiang-mu-zhi-helloworld/</id>
    <published>2020-05-29T14:41:27.000Z</published>
    <updated>2020-05-29T14:42:58.199Z</updated>
    
    <content type="html"><![CDATA[<p>使用Google的gn工具构建C++项目,但是官方的demo构建脚本还是不够简单,这里写一个最简单的构建结构.</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://oss.jiangkang.tech/jk/gn-tree.png" alt="目录结构"></p><h2 id="必要的几个文件"><a href="#必要的几个文件" class="headerlink" title="必要的几个文件"></a>必要的几个文件</h2><ul><li>.gn</li><li>根目录下的BUIlD.gn</li><li>BUILDCONFIG.gn</li></ul><h2 id="gn"><a href="#gn" class="headerlink" title=".gn"></a>.gn</h2><pre><code># gn help dotfilebuildconfig = &quot;//build/config/BUILDCONFIG.gn&quot;</code></pre><p>这里就指定个最简单的buildconfig文件即可.</p><h2 id="BUILD-gn"><a href="#BUILD-gn" class="headerlink" title="BUILD.gn"></a>BUILD.gn</h2><pre><code>executable(&quot;gn-demo&quot;) {    sources = [        &quot;main.cpp&quot;    ]}</code></pre><p>代表着要构建可执行文件.</p><h2 id="BUILDCONFIG-gn"><a href="#BUILDCONFIG-gn" class="headerlink" title="BUILDCONFIG.gn"></a>BUILDCONFIG.gn</h2><pre><code>set_default_toolchain(&quot;//build/config/toolchains:mac&quot;)</code></pre><p>这里指定了使用的默认工具链</p><h2 id="toolchains"><a href="#toolchains" class="headerlink" title="toolchains"></a>toolchains</h2><p>build/config/toolchains/BUILD.gn</p><pre><code>toolchain(&quot;mac&quot;) {    tool(&quot;cxx&quot;){        command = &quot;clang++ -c {{source}} -o {{output}}&quot;        outputs = [ &quot;{{source_out_dir}}/{{target_output_name}}.o&quot; ]    }    tool(&quot;link&quot;){        exe_name = &quot;{{root_out_dir}}/{{target_output_name}}{{output_extension}}&quot;        command = &quot;clang++ {{inputs}} -o $exe_name&quot;        outputs = [&quot;$exe_name&quot;]    }}</code></pre><p>写工具链的脚本,需要大致明白C++的编译流程.</p><p>其中<code>cxx</code>:代表编译C++,<code>link</code>代表链接.由于我使用的是Mac,所以这里使用clang进行编译.</p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><pre class=" language-shell"><code class="language-shell">gn gen out/Debugninja -C out/Debug</code></pre><p>可执行文件就构建成功了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Google的gn工具构建C++项目,但是官方的demo构建脚本还是不够简单,这里写一个最简单的构建结构.&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="C++" scheme="https://www.jiangkang.tech/categories/C/"/>
    
    
      <category term="编译" scheme="https://www.jiangkang.tech/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="GN" scheme="https://www.jiangkang.tech/tags/GN/"/>
    
  </entry>
  
  <entry>
    <title>CMake的简单使用</title>
    <link href="https://www.jiangkang.tech/2020/05/25/c/cmake-de-jian-dan-shi-yong/"/>
    <id>https://www.jiangkang.tech/2020/05/25/c/cmake-de-jian-dan-shi-yong/</id>
    <published>2020-05-25T10:34:13.000Z</published>
    <updated>2020-05-29T14:44:44.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建可执行程序"><a href="#构建可执行程序" class="headerlink" title="构建可执行程序"></a>构建可执行程序</h2><pre class=" language-cmake"><code class="language-cmake">add_executable(<name> [WIN32] [MACOSX_BUNDLE]               [EXCLUDE_FROM_ALL]               [source1] [source2 ...])</code></pre><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} main.cpp)</code></pre><p>或者源码目录:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)add_executable(${PROJECT_NAME} ${DIR_SOURCES})</code></pre><h2 id="构建动态链接库-静态库"><a href="#构建动态链接库-静态库" class="headerlink" title="构建动态链接库/静态库"></a>构建动态链接库/静态库</h2><pre class=" language-cmake"><code class="language-cmake">add_library(<name> [STATIC | SHARED | MODULE]            [EXCLUDE_FROM_ALL]            [source1] [source2 ...])</code></pre><p><code>STATIC</code>:表示静态库,如<code>libname.a</code></p><p><code>SHARED</code>:表示动态链接库,如<code>libname.dylib</code></p><p><code>MODULE</code>:表示可以用类似<code>dlopen</code>得方法动态加载库,如<code>libname.so</code></p><p>构建出来的库名字会自动加上<code>lib</code>前缀,如<code>libname.a</code>,<code>libname.dylib</code>,<code>libname.so</code></p><p>如:</p><pre class=" language-cmake"><code class="language-cmake">add_library(${PROJECT_NAME} SHARED main.cpp)</code></pre><h2 id="添加头文件"><a href="#添加头文件" class="headerlink" title="添加头文件"></a>添加头文件</h2><pre class=" language-cmake"><code class="language-cmake">include_directories(include_dir)</code></pre><p><code>include_dir</code>为<code>.h</code>文件所在的文件夹</p><h2 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h2><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(./src DIR_SOURCES)</code></pre><p>查找把<code>./src</code>下所有源文件,并保存到变量<code>DIR_SOURCES</code>中,后面可以使用<code>${DIR_SOURCES}</code>表示.</p><p>需要注意的地方是:</p><ul><li><code>aux_source_directory</code>不会递归包含子目录,仅包含指定的目录.</li><li>当添加源文件时,如需重新编译,得重新运行cmake</li></ul><p>还可以使用<code>CMAKE_CURRENT_LIST_DIR</code>内置变量:</p><pre class=" language-cmake"><code class="language-cmake">aux_source_directory(${CMAKE_CURRENT_LIST_DIR} DIR_SOURCES)</code></pre><h2 id="添加子目录"><a href="#添加子目录" class="headerlink" title="添加子目录"></a>添加子目录</h2><pre class=" language-cmake"><code class="language-cmake">add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></pre><p>除了写helloworld,一般都需要配置多个源码目录,这个时候可以使用<code>add_subdirectory</code>命令,其中<code>source_dir</code>表示子目录中CMakeList.txt所在的路径,<code>binary_dir</code>表示输出目录.</p><h2 id="查找依赖库"><a href="#查找依赖库" class="headerlink" title="查找依赖库"></a>查找依赖库</h2><ul><li><p>通过<code>link_directories</code> (极少使用)</p><pre class=" language-cmake"><code class="language-cmake">link_directories([AFTER|BEFORE] directory1 [directory2 ...])</code></pre><p>linker会在这些定义的目录里查找依赖的库.如lib文件夹下放置一个<code>libskia.so</code>库文件:</p><pre class=" language-cmake"><code class="language-cmake">link_directories(${CMAKE_CURRENT_LIST_DIR}/lib)</code></pre><p>最后链接的时候:</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre><p>这个时候,会自动到上面包含的lib文件下去寻找libskia.so(或者libskia.a,libskia.dylib)文件.</p><p><strong>使用XCode等项目生成器需要根据架构动态切换依赖库,或者库本身依赖私库等情况会使用这个命令,一般使用find_library()替换.</strong></p></li><li><p>通过<code>find_library</code></p><pre class=" language-cmake"><code class="language-cmake">find_library (<VAR> name1 [path1 path2 ...])</code></pre><p>如果库被找到,结果会被存储到变量<code>VAR</code>中.如果没有找到库文件,则结果会被存储到<code>&lt;VAR&gt;-NOTFOUND</code>.如:</p><pre class=" language-cmake"><code class="language-cmake">find_library(LIB_SKIA skia lib)if(LIB_SKIA-NOTFOUND)    message("没有找到Skia")endif(LIB_SKIA-NOTFOUND)target_link_libraries(${PROJECT_NAME} ${LIB_SKIA})</code></pre></li><li><p>通过<code>find_package</code></p><pre class=" language-cmake"><code class="language-cmake">find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]             [REQUIRED] [[COMPONENTS] [components...]]             [OPTIONAL_COMPONENTS components...]             [NO_POLICY_SCOPE])</code></pre><p>cmake中自带了一些cmake脚本,通过<code>cmake --help-module-list</code>命令即可查看.拿libpng举例:</p><pre class=" language-cmake"><code class="language-cmake">add_executable(${PROJECT_NAME} ${DIR_SOURCES})find_package(PNG)if(PNG_FOUND)    include_directories(${PNG_INCLUDE_DIR})    target_link_libraries(${PROJECT_NAME} ${PNG_LIBRARY})    message("找到了PNG")endif(PNG_FOUND)if(NOT PNG_FOUND)    message("没有找到PNG")endif(NOT PNG_FOUND)</code></pre><p>如果遇到已有脚本存在,但是就是无法找到的情况,无需在此浪费时间,换一种查找方法即可.</p></li></ul><h2 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h2><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(<target> ... <item>... ...)</code></pre><p>这其中item可以是下面的任何一种:</p><ul><li><p>库名(不带<code>lib</code>前缀,不带后缀)</p><pre class=" language-cmake"><code class="language-cmake">target_link_libraries(${PROJECT_NAME} skia)</code></pre></li><li><p>库文件的完整路径</p></li><li><p>表达式</p></li></ul><h2 id="自定义输出路径"><a href="#自定义输出路径" class="headerlink" title="自定义输出路径"></a>自定义输出路径</h2><ul><li><p>指定执行文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/build)</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUGCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE</code></pre></li></ul></li><li><p>指定库文件输出路径</p><pre class=" language-cmake"><code class="language-cmake">LIBRARY_OUTPUT_PATH</code></pre><ul><li><p>指定Debug/Release版本</p><pre class=" language-cmake"><code class="language-cmake">CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUGCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE</code></pre></li><li><p>指定Debug/Release版本后缀名</p><pre class=" language-cmake"><code class="language-cmake">set(CMAKE_DEBUG_POSTFIX "_d")set(CMAKE_RELEASE_POSTFIX "_r")</code></pre></li></ul></li></ul><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul><li><p>CMAKE_CURRENT_LIST_DIR</p><p>当前CMakeList.txt所在目录</p></li><li><p>PROJECT_NAME</p><p>项目名</p></li><li><p><code>PROJECT_SOURCE_DIR</code></p><p>源码目录</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;构建可执行程序&quot;&gt;&lt;a href=&quot;#构建可执行程序&quot; class=&quot;headerlink&quot; title=&quot;构建可执行程序&quot;&gt;&lt;/a&gt;构建可执行程序&lt;/h2&gt;&lt;pre class=&quot; language-cmake&quot;&gt;&lt;code class=&quot;language-cm
      
    
    </summary>
    
    
      <category term="C++" scheme="https://www.jiangkang.tech/categories/C/"/>
    
    
      <category term="CMake" scheme="https://www.jiangkang.tech/tags/CMake/"/>
    
      <category term="编译" scheme="https://www.jiangkang.tech/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>ModernC++的一些特性</title>
    <link href="https://www.jiangkang.tech/2020/05/23/c/modernc-de-yi-xie-te-xing/"/>
    <id>https://www.jiangkang.tech/2020/05/23/c/modernc-de-yi-xie-te-xing/</id>
    <published>2020-05-23T09:51:07.000Z</published>
    <updated>2020-05-23T09:52:02.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Modern-C"><a href="#Modern-C" class="headerlink" title="Modern C++"></a>Modern C++</h2><p>Modern C++指的是C++11/C++14/C++17/C++20等版本,新增和改进了C++语法,提升开发效率.</p><h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>nullptr是用来替换NULL的</p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><p>常量表达式</p><pre class=" language-c++"><code class="language-c++">constexpr int num = 1 + 2+ 3;</code></pre><h2 id="if-switch-变量声明强化"><a href="#if-switch-变量声明强化" class="headerlink" title="if/switch 变量声明强化"></a>if/switch 变量声明强化</h2><pre class=" language-c++"><code class="language-c++">    if (int i = num - 1){    }</code></pre><p>即判断条件中可以直接声明临时变量.</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <string>using namespace std;class Person {public:    string name;    int age;    int sex;    const string &getName() const {        return name;    }    int getAge() const {        return age;    }    int getSex() const {        return sex;    }};void testInit() {    Person person = {"jack", 18, 1};}</code></pre><p>C++11之前的版本初始化比较麻烦,需要写一些无用代码,这之后比较灵活,可以按照上面的方式进行初始化.</p><h2 id="结构化绑定"><a href="#结构化绑定" class="headerlink" title="结构化绑定"></a>结构化绑定</h2><p>即多返回值的封包/拆包,在Python,Go,Kotlin中比较常见.</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <tuple>using namespace std;void testTuple() {    auto[x, y, z] = make_tuple(1, false, "hello");    cout << x << y << z << endl;}</code></pre><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>即类型推断,不用每个变量声明都声明类型.</p><p>需要注意的就是:<strong>auto不能用于函数传参,也不能用于推导数组类型</strong></p><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><p>auto只能用于变量的类型推断,decltype则对表达式类型推断做了补充.</p><pre class=" language-c++"><code class="language-c++">auto x = 1;auto y = 2;decltype(x+y) z;</code></pre><h2 id="区间for迭代"><a href="#区间for迭代" class="headerlink" title="区间for迭代"></a>区间for迭代</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>#include <vector>#include <algorithm>int main() {    std::vector<int> vec = {1, 2, 3, 4};    if (auto itr = std::find(vec.begin(), vec.end(), 3); itr != vec.end()) *itr = 4;    for (auto element : vec)        std::cout << element << std::endl; // read only    for (auto &element : vec) {        element += 1;                      // writeable    }    for (auto element : vec)        std::cout << element << std::endl; // read only}</code></pre><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>将一切能在编译期解决的问题放在编译期解决,仅在运行时处理核心的动态服务.</p><h3 id="外部模板"><a href="#外部模板" class="headerlink" title="外部模板"></a>外部模板</h3><pre class=" language-c++"><code class="language-c++">template class std::vector<bool>;          // 强行实例化extern template class std::vector<double>; // 不在该当前编译文件中实例化模板</code></pre><p>其实就是一个实例化时机的问题.</p><h3 id="类型别名模板"><a href="#类型别名模板" class="headerlink" title="类型别名模板"></a>类型别名模板</h3><p>模板是用来生成类型的.</p><p>类型别名一般这样用:</p><pre class=" language-c++"><code class="language-c++">typedef 原名称 新名称</code></pre><p>对于复杂一点的就显得很难看,可以使用<code>using</code>:</p><pre class=" language-c++"><code class="language-c++">typedef int (*process)(void *);using NewProcess = int(*)(void *);template<typename T>using TrueDarkMagic = MagicType<std::vector<T>, std::string>;int main() {    TrueDarkMagic<bool> you;}</code></pre><h2 id="委托构造"><a href="#委托构造" class="headerlink" title="委托构造"></a>委托构造</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>class Base {public:    int value1;    int value2;    Base() {        value1 = 1;    }    Base(int value) : Base() { // 委托 Base() 构造函数        value2 = value;    }};int main() {    Base b(2);    std::cout << b.value1 << std::endl;    std::cout << b.value2 << std::endl;}</code></pre><p>没什么好说的,其他语言在设计的时候就已经支持了.</p><h2 id="继承构造"><a href="#继承构造" class="headerlink" title="继承构造"></a>继承构造</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>class Base {public:    int value1;    int value2;    Base() {        value1 = 1;    }    Base(int value) : Base() { // 委托 Base() 构造函数        value2 = value;    }};class Subclass : public Base {public:    using Base::Base; // 继承构造};int main() {    Subclass s(3);    std::cout << s.value1 << std::endl;    std::cout << s.value2 << std::endl;}</code></pre><h2 id="overide-final"><a href="#overide-final" class="headerlink" title="overide , final"></a>overide , final</h2><pre class=" language-c++"><code class="language-c++">struct Base {    virtual void foo(int);};struct SubClass: Base {    virtual void foo(int) override; // 合法    virtual void foo(float) override; // 非法, 父类没有此虚函数};</code></pre><pre class=" language-c++"><code class="language-c++">struct Base {    virtual void foo() final;};struct SubClass1 final: Base {}; // 合法struct SubClass2 : SubClass1 {}; // 非法, SubClass1 已 finalstruct SubClass3: Base {    void foo(); // 非法, foo 已 final};</code></pre><p>这两点也没什么好说的,其他语言早就支持了.</p><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><pre class=" language-c++"><code class="language-c++">[捕获列表](参数列表) mutable(可选) 异常属性 -> 返回类型 {// 函数体}</code></pre><h3 id="值捕获"><a href="#值捕获" class="headerlink" title="值捕获"></a>值捕获</h3><pre class=" language-c++"><code class="language-c++">void lambda_value_capture() {    int value = 1;    auto copy_value = [value] {        return value;    };    value = 100;    auto stored_value = copy_value();    std::cout << "stored_value = " << stored_value << std::endl;    // 这时, stored_value == 1, 而 value == 100.    // 因为 copy_value 在创建时就保存了一份 value 的拷贝}</code></pre><h3 id="引用捕获"><a href="#引用捕获" class="headerlink" title="引用捕获"></a>引用捕获</h3><pre class=" language-c++"><code class="language-c++">void lambda_reference_capture() {    int value = 1;    auto copy_value = [&value] {        return value;    };    value = 100;    auto stored_value = copy_value();    std::cout << "stored_value = " << stored_value << std::endl;    // 这时, stored_value == 100, value == 100.    // 因为 copy_value 保存的是引用}</code></pre><h3 id="范型Lambda"><a href="#范型Lambda" class="headerlink" title="范型Lambda"></a>范型Lambda</h3><pre class=" language-c++"><code class="language-c++">auto add = [](auto x, auto y) {    return x+y;};add(1, 2);add(1.1, 2.2);</code></pre><h2 id="函数对象包装器"><a href="#函数对象包装器" class="headerlink" title="函数对象包装器"></a>函数对象包装器</h2><p>如果不使用<code>std::fucntion()</code>是这样子的:</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using foo = void(int); // 定义函数类型, using 的使用见上一节中的别名语法void functional(foo f) { // 定义在参数列表中的函数类型 foo 被视为退化后的函数指针类型 foo*    f(1); // 通过函数指针调用函数}int main() {    auto f = [](int value) {        std::cout << value << std::endl;    };    functional(f); // 传递闭包对象，隐式转换为 foo* 类型的函数指针值    f(1); // lambda 表达式调用    return 0;}</code></pre><p>使用了之后是这样的:</p><pre class=" language-c++"><code class="language-c++">#include <functional>#include <iostream>int foo(int para) {    return para;}int main() {    // std::function 包装了一个返回值为 int, 参数为 int 的函数    std::function<int(int)> func = foo;    int important = 10;    std::function<int(int)> func2 = [&](int value) -> int {        return 1+value+important;    };    std::cout << func(10) << std::endl;    std::cout << func2(10) << std::endl;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Modern-C&quot;&gt;&lt;a href=&quot;#Modern-C&quot; class=&quot;headerlink&quot; title=&quot;Modern C++&quot;&gt;&lt;/a&gt;Modern C++&lt;/h2&gt;&lt;p&gt;Modern C++指的是C++11/C++14/C++17/C++20等版本,新增
      
    
    </summary>
    
    
      <category term="C++" scheme="https://www.jiangkang.tech/categories/C/"/>
    
    
      <category term="语法" scheme="https://www.jiangkang.tech/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Skia的编译</title>
    <link href="https://www.jiangkang.tech/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/"/>
    <id>https://www.jiangkang.tech/2020/05/18/tu-xing-xuan-ran/skia-de-bian-yi/</id>
    <published>2020-05-18T11:00:12.000Z</published>
    <updated>2020-05-18T11:01:39.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/google/skia" target="_blank" rel="noopener">https://github.com/google/skia</a></p><p><a href="https://skia.googlesource.com/skia" target="_blank" rel="noopener">https://skia.googlesource.com/skia</a></p><p>这两个都可以,如果不能科学上网,建议使用github上的镜像.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre class=" language-shell"><code class="language-shell">bin/gn gen out/Static --args='is_official_build=false'bin/gn gen out/Shared --args='is_official_build=false is_component_build=true'</code></pre><p>如果出现问题,就使用python脚本更新依赖:</p><pre class=" language-shell"><code class="language-shell">python2 tools/git-sync-deps</code></pre><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="is-official-build"><a href="#is-official-build" class="headerlink" title="is_official_build"></a>is_official_build</h3><p>如果这个属性为true,则会在你电脑上的系统环境取寻找一些依赖库,比如libjpeg,libpng等,如果你设置成true,编译过程中发现一些库不存在或者函数错误等,建议直接把is_official_build设置成false.这样就用skia项目中的源码依赖了,就不会出问题了.</p><h3 id="is-component-build"><a href="#is-component-build" class="headerlink" title="is_component_build"></a>is_component_build</h3><p>设置为true,则编译成多个小的动态链接库,比如各种so文件.如果需要使用skia,建议设置成true.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源码地址&quot;&gt;&lt;a href=&quot;#源码地址&quot; class=&quot;headerlink&quot; title=&quot;源码地址&quot;&gt;&lt;/a&gt;源码地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/google/skia&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="图形渲染" scheme="https://www.jiangkang.tech/categories/%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93/"/>
    
    
      <category term="编译" scheme="https://www.jiangkang.tech/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="Skia" scheme="https://www.jiangkang.tech/tags/Skia/"/>
    
  </entry>
  
  <entry>
    <title>调试flutter_tools</title>
    <link href="https://www.jiangkang.tech/2020/05/15/flutter/diao-shi-flutter-tools/"/>
    <id>https://www.jiangkang.tech/2020/05/15/flutter/diao-shi-flutter-tools/</id>
    <published>2020-05-15T11:42:45.000Z</published>
    <updated>2020-05-25T10:54:38.791Z</updated>
    
    <content type="html"><![CDATA[<p>在运行<code>flutter</code>命令的时候,比如<code>flutter run</code>,实际上执行的是<code>flutter_tools.snapshots</code>,而这个快照文件的源码入口就是<code>flutter_tools.dart</code>.</p><p>既然是普通的dart命令行程序,那么按照Dart命令行程序的调试方法进行调试即可.</p><p>建议提前下载一个flutter项目的源码.下载源码之后,按照下面的步骤就可以进行调试了:</p><h2 id="配置-Dart-SDK"><a href="#配置-Dart-SDK" class="headerlink" title="配置 Dart SDK"></a>配置 Dart SDK</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_dart_sdk.png" alt="配置Dart SDK"></p><h2 id="添加Configuration"><a href="#添加Configuration" class="headerlink" title="添加Configuration"></a>添加Configuration</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_config.png" alt="Configuration"></p><h2 id="执行调试"><a href="#执行调试" class="headerlink" title="执行调试"></a>执行调试</h2><p><img src="https://oss.jiangkang.tech/jk/flutter_tools_debug.png" alt="调试"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在运行&lt;code&gt;flutter&lt;/code&gt;命令的时候,比如&lt;code&gt;flutter run&lt;/code&gt;,实际上执行的是&lt;code&gt;flutter_tools.snapshots&lt;/code&gt;,而这个快照文件的源码入口就是&lt;code&gt;flutter_tools.dar
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="flutter tools" scheme="https://www.jiangkang.tech/tags/flutter-tools/"/>
    
  </entry>
  
  <entry>
    <title>Java中的Lock</title>
    <link href="https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-lock/"/>
    <id>https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-lock/</id>
    <published>2020-05-15T05:30:56.000Z</published>
    <updated>2020-05-25T10:54:38.824Z</updated>
    
    <content type="html"><![CDATA[<p>Java 中保证线程安全，操作同步的方法有很多种，比如：</p><ul><li>使用synchronized关键字</li><li>使用<code>Lock</code>的实现类</li></ul><p>其中synchronized属于语言级别的处理，无需我们去处理细节，而<code>Lock</code>则是一个接口，我们可以自定义Lock或者使用内置的Lock实现类，比如ReentrantLock等去精确控制同步。</p><h2 id="概念-锁分类"><a href="#概念-锁分类" class="headerlink" title="概念/锁分类"></a>概念/锁分类</h2><h3 id="悲观锁-VS-乐观锁"><a href="#悲观锁-VS-乐观锁" class="headerlink" title="悲观锁 VS 乐观锁"></a>悲观锁 VS 乐观锁</h3><p>悲观锁和乐观锁并不是特指哪个锁（比如叫做悲观锁，乐观锁的类），而是并发情形下的两种不同策略。</p><ul><li><p>悲观锁</p><p>每次线程去读数据的时候都认为会被其他线程修改，因此每次访问数据的时候都会上锁，其他线程如果想访问必须等到它释放锁；</p></li><li><p>乐观锁</p><p>每次线程去读数据的时候都认为不会被其他线程修改，因此不会上锁；如果线程想更新数据，会在更新前检查一下自己在读取和更新的这段时间里有没有其他线程修改过这个数据，如果修改过，则重新读取，再次尝试更新，否则更新，依次循环；</p></li></ul><p>总的来说，就是悲观锁阻塞事务，乐观锁回滚重试。</p><p>乐观锁比较适合用于修改比较少的情形，如果修改比较多，则冲突比较多，会降低性能，不如使用悲观锁。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>即Compare And Swap，是用于实现多线程同步的原子指令。</p><ol><li>比较：读取到一个值A，在将其更新为B之前，坚持原值是否仍为A</li><li>交换：如果是，则将A更新为B，结束，否则什么都不做；</li></ol><p>上面的两个步骤是原子性的，在CPU看来就是一个指令。</p><p>CAS利用CPU指令，在硬件层面保证了操作的原子性。</p><p>CAS整个过程中并<strong>没有加锁</strong>，乐观锁就是基于CAS实现的。</p><p>CAS的使用可以参考AtomicInteger等数字并发类。</p><p>使用CAS可以有效解决并发的效率问题，但同时也会引入ABA问题，比如一个线程将A改成B又改回A，另一个线程对其进行更新，则会忽略这个操作，会产生问题。JDK中的实现类添加了特殊的标记，用来解决这个问题。</p><p>Java中几乎全部都是悲观锁，因为乐观锁本质上不是锁，只是CAS算法循环。</p><h3 id="自旋锁、偏向锁、轻量级锁、重量级锁"><a href="#自旋锁、偏向锁、轻量级锁、重量级锁" class="headerlink" title="自旋锁、偏向锁、轻量级锁、重量级锁"></a>自旋锁、偏向锁、轻量级锁、重量级锁</h3><p>synchronized关键字处理有以下几个情形：</p><ol><li>初次执行synchronized代码块的时候，锁对象变成了<strong>偏向锁</strong>，通俗点说就是偏向于第一个获取它的线程，执行完同步块之后并不会主动释放锁，当第二次到达同步块的时候，此时线程判断持有锁的是自己，如果是正常往下执行，则由于之前没有释放锁，因此不必重新加锁，如果始终只有一个线程，偏向锁几乎没有多余的开销，性能比较好；</li><li>一旦有第二个线程加入锁竞争（当某个线程获取锁的时候发现锁已经被占用，只能等待其释放），偏向锁就升级为轻量级锁（自旋锁）。在轻量级锁状态下的继续锁竞争，没有抢到锁的线程将自旋（循环判断锁是否能被成功获取），长时间的自旋是很消耗资源的，一个线程有锁，其余线程只能空耗CPU，这种情况叫做忙等。如果多个线程用一个锁，但是没有发生锁竞争，或发生了轻微的锁竞争，synchronized使用轻量级锁，允许短时间的忙等。</li><li>忙等是有限度的，某个达到最大自旋次数的线程，会将轻量级锁升级成重量级锁。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</li></ol><p>一个锁，只能按照偏向锁 –&gt; 轻量级锁 –&gt; 重量级锁的顺序逐渐升级，不允许降级。</p><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p><strong>允许同一个线程多次获取同一把锁</strong>，比如一个递归方法中有加锁操作，递归操作不阻塞自己，这种锁就叫做可重入锁。</p><p>Java中几乎所有的场景都只需要使用可重入锁，ReentrantLock等（以Reentraant开头的锁），以及JDK提供的所有Lock的实现类，包括synchronized都是属于可重入锁。</p><h3 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h3><p><strong>公平锁</strong>： 如果多个线程申请同一把公平锁，当锁释放的时候，先申请的线程先得到锁；</p><p><strong>非公平锁</strong>：如果多个线程申请同一把非公平锁，当锁释放的时候，后申请的线程可能先获得到锁，其顺序是随机的，或者是根据指定的优先级顺序。</p><p>对于synchronized而言，它就是一个非公平锁，而且没有办法变成公平锁。</p><h3 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h3><p>Java中并没有提供任何直接中断线程的方法，只提供了中断机制，即线程A向线程B发起中断请求，但线程B并不会立即停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略该中断。</p><p>如果线程A持有锁，线程B等待获取该锁，由于线程A持有锁的时间比较长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程请求中断B，这就是可中断锁。</p><p>Java中<strong>synchronized是不可中断锁，Lock的实现类都是可中断锁</strong>。</p><h3 id="读写锁、共享锁、互斥锁"><a href="#读写锁、共享锁、互斥锁" class="headerlink" title="读写锁、共享锁、互斥锁"></a>读写锁、共享锁、互斥锁</h3><p>读写锁其实是一对锁，即一个读锁（共享锁），一个写锁（互斥锁，排他锁）。</p><p>看看代码中的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadWriteLock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for reading.     *     * @return the lock used for reading     */</span>    Lock <span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Returns the lock used for writing.     *     * @return the lock used for writing     */</span>    Lock <span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到读写锁接口只定义两个方法，一个用来返回读锁，一个用来返回写锁。</p><p>如果读取一个值是为了更新它，加锁的时候就加写锁；</p><p>如果读取一个值只是为了展示，加锁的时候可以加读锁；</p><p>读写锁是悲观锁策略。</p><h2 id="Lock的定义"><a href="#Lock的定义" class="headerlink" title="Lock的定义"></a>Lock的定义</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取锁.     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取锁，直到当前线程被标记为中断     * {@linkplain Thread#interrupt interrupted}.     */</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果获取到了锁就返回true，否则立即返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 超时时间内获取到锁，则返回true，否则返回false     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 释放锁.     */</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个绑定到该Lock对象的Condition实例     */</span>    Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再来看看它的常见实现类：</p><p><img src="https://oss.jiangkang.tech/jk/Lock.png" alt="Lock"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/71156910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/71156910</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 中保证线程安全，操作同步的方法有很多种，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用synchronized关键字&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Lock&lt;/code&gt;的实现类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中synchronized属于语言级别的处理，无需我们去处
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Java" scheme="https://www.jiangkang.tech/tags/Java/"/>
    
      <category term="Lock" scheme="https://www.jiangkang.tech/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>Java中的Map</title>
    <link href="https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-map/"/>
    <id>https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-map/</id>
    <published>2020-05-15T05:30:26.000Z</published>
    <updated>2020-05-25T10:54:38.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/Map.png" alt="Map"></p><h2 id="哈希表-散列表"><a href="#哈希表-散列表" class="headerlink" title="哈希表/散列表"></a>哈希表/散列表</h2><p><img src="https://oss.jiangkang.tech/jk/HashMap%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt=""></p><p>通俗的说就是，使用散列函数将key值映射到数组下标，这样就可以根据key值直接访问到元素存储位置，这种结构就叫哈希表（散列表）。</p><p>将key值映射到数组下标的函数就做散列函数，这个映射过程是一个key值压缩的过程，因而不可避免会存在两个不同的值映射到了相同的下标的情况，这种情况叫做<strong>哈希冲突</strong>。</p><p>散列函数的选取也是有套路可循的，比如除数取余法，平方取中法，数字分析法，折叠法扥等。</p><p>解决哈希冲突一般有两种方法：</p><ul><li><p>开放定址法</p><p>如果遇到冲突，则向后几步再存；</p></li><li><p>链接法（拉链法）</p><p>如果遇到冲突，则在对应位置后面添加一个链表节点。</p></li></ul><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程安全的。</p><p>查询的效率可以达到O(1)。</p><p>Java8中大部分情况是基于哈希表实现，当链表长度达到8的时候，转为红黑树实现。</p><p>不保证存取顺序；</p><p><img src="https://oss.jiangkang.tech/jk/HashMap-%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt=""></p><p>具体的看存储结构：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>        <span class="token keyword">final</span> K key<span class="token punctuation">;</span>        V value<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>看看树节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// red-black tree links</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needed to unlink next upon deletion</span>        <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>不允许key和value为null。</p><p>使用一个链表数组（bucket，也叫哈希表，散列表）来存储数据。</p><p>线程不安全的。</p><p>先来看看查找的关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">;</span> e <span class="token operator">!=</span> null <span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，就是先取key的hash值，然后对表长取余确定好数组下标。然后从数组下标处的链表开始查找。</p><p>再来看看put操作的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure the value is not null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Makes sure the key is not already in the hashtable.</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> entry <span class="token operator">!=</span> null <span class="token punctuation">;</span> entry <span class="token operator">=</span> entry<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entry<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                V old <span class="token operator">=</span> entry<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                entry<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> old<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> tab<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Rehash the table if the threshold is exceeded</span>            <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tab <span class="token operator">=</span> table<span class="token punctuation">;</span>            hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&amp;</span> <span class="token number">0x7FFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">%</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Creates the new entry.</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span> tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>还是通过对key做hash运算，然后取余得到数组下标，再进行遍历，如果已经存在对应的key，则替换新值；如果是新key，则添加到链表最前面。</p><p>并且可以看到value不可以为null，否则抛出异常。key也不能为null，要不然也会抛出空指针异常。</p><p>可以看到看到get/put方法都是同步的，保证了线程安全。</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>双向链表与HashMap的结合。</p><p>保证插入的顺序，遍历的时候先得到的是先插入的元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/Map.png&quot; alt=&quot;Map&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;哈希表-散列表&quot;&gt;&lt;a href=&quot;#哈希表-散列表&quot; class=&quot;headerlink&quot; title=&quot;哈希表/散列表&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="数据结构" scheme="https://www.jiangkang.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Map" scheme="https://www.jiangkang.tech/tags/Map/"/>
    
      <category term="Java" scheme="https://www.jiangkang.tech/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的List</title>
    <link href="https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-list/"/>
    <id>https://www.jiangkang.tech/2020/05/15/android/java-zhong-de-list/</id>
    <published>2020-05-15T05:30:20.000Z</published>
    <updated>2020-05-25T10:54:38.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p><img src="https://oss.jiangkang.tech/jk/UML-List.png" alt=""></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>通过动态数组存储数据的，数组默认长度为10，实际使用过程中可以通过<code>trimToSize()</code>方法剪裁到实际的list大小。</p><p>ArrayList是线程不安全的；</p><p>ArrayList由于通过数组索引定位，所以查找效率比较高，但是插入和删除操作需要移动数组元素，因此插入和删除效率比较低；</p><p>当数组元素增加的时候，会增加原来尺寸的一半进行扩容；如果还不满足，则直接用原来的长度加上添加元素的长度作为最终的长度。</p><p>实现了RandomAccess接口，可以随机访问；</p><p>无参构造函数new出来的ArrayList数组默认长度为10，在明确元素个数的时候可以指定数组长度；</p><p>操作的关键在于对数组的控制，比如扩容，复制等等。</p><h3 id="扩容关键代码"><a href="#扩容关键代码" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// minCapacity is usually close to size, so this is a win:</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码"><a href="#查找关键代码" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码"><a href="#插入关键代码" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Increments modCount!!</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>基于链表实现的，LinkedList中持有一个size，一个头结点，一个尾结点。</p><p>每个结点包括结点值，指向前一个结点的引用，指向后一个结点的引用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> prev<span class="token punctuation">,</span> E element<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>LinkedList是线程不安全的；</p><p>实现了Deque，可以用做双向队列。</p><p>插入/删除效率比较高，但是查询效率比ArrayList低。</p><p>操作的关键在于对链表的操作，比如新增，删除，查找，遍历等。</p><h3 id="插入关键代码-1"><a href="#插入关键代码-1" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Inserts element e before non-null Node succ.     */</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert succ != null;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-1"><a href="#查找关键代码-1" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>基于数组实现的List，可以扩容和裁剪。</p><p>Vector是线程安全的。</p><p>默认长度为10。</p><p>扩容方式与ArrayList不同，Vector中在构造函数里可以传入一个增量扩容大小capacityIncrement，如果不指定则默认为0；当扩容的时候，先判断这个增量扩容大小capacityIncrement，如果capacityIncrement大于0，则容量增加capacityIncrement，否则容量翻倍。</p><p>查询效率高，插入，删除效率低，由于是同步操作，比ArrayList性能低。</p><h3 id="扩容关键代码-1"><a href="#扩容关键代码-1" class="headerlink" title="扩容关键代码"></a>扩容关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>capacityIncrement <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         capacityIncrement <span class="token operator">:</span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="插入关键代码-2"><a href="#插入关键代码-2" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span>E obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> elementCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index                                                     <span class="token operator">+</span> <span class="token string">" > "</span> <span class="token operator">+</span> elementCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> elementCount <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>        elementCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-2"><a href="#查找关键代码-2" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre><code>public synchronized int indexOf(Object o, int index) {        if (o == null) {            for (int i = index ; i &lt; elementCount ; i++)                if (elementData[i]==null)                    return i;        } else {            for (int i = index ; i &lt; elementCount ; i++)                if (o.equals(elementData[i]))                    return i;        }        return -1;    }</code></pre><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>继承自Vector，新增了pop/push操作。</p><p>继承Vector的特性。</p><h3 id="pop-push操作关键代码"><a href="#pop-push操作关键代码" class="headerlink" title="pop/push操作关键代码"></a>pop/push操作关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">push</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addElement</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        E       obj<span class="token punctuation">;</span>        <span class="token keyword">int</span>     len <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeElementAt</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>基于数组实现，并利用<code>ReentrantLock</code>实现同步机制，保证线程安全。</p><p>然后利用了写时复制的思想，在修改的时候首先复制一个副本，在副本上进行修改，最后将引用设置到副本上。</p><h3 id="插入关键代码-3"><a href="#插入关键代码-3" class="headerlink" title="插入关键代码"></a>插入关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> len <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token operator">+</span>index<span class="token operator">+</span>                                                    <span class="token string">", Size: "</span><span class="token operator">+</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements<span class="token punctuation">;</span>            <span class="token keyword">int</span> numMoved <span class="token operator">=</span> len <span class="token operator">-</span> index<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> index<span class="token punctuation">,</span> newElements<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            newElements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="查找关键代码-3"><a href="#查找关键代码-3" class="headerlink" title="查找关键代码"></a>查找关键代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">,</span>                               <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> fence<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fence<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/UML-List.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="数据结构" scheme="https://www.jiangkang.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="https://www.jiangkang.tech/tags/Java/"/>
    
      <category term="List" scheme="https://www.jiangkang.tech/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Java队列</title>
    <link href="https://www.jiangkang.tech/2020/05/15/android/java-dui-lie/"/>
    <id>https://www.jiangkang.tech/2020/05/15/android/java-dui-lie/</id>
    <published>2020-05-15T05:30:01.000Z</published>
    <updated>2020-05-25T10:54:38.789Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/UML-Queue.png" alt="Queue"></p><p>先来看一下Queue的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//插入成功返回true，如果容量不足，抛出异常</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//插入成功返回true，否则返回false，对于容量有限的队列，建议使用add(E e)</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取并移除队列头，如果队列为空，则返回null</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则抛出NoSuchElementException异常</span>    E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取但不移除队列头，如果队列为空，则返回null</span>    E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些方法的区别：</p><table><thead><tr><th>操作</th><th>抛出异常</th><th>返回具体值</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td></tr><tr><td>检查(只查看)</td><td>element()</td><td>peek()</td></tr></tbody></table><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>BlockingQueue也是一个接口，继承自Queue。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞插入，等待队列有剩余容量才插入</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 阻塞获取，一直等到数列不为空才出队</span>    E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>    E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取剩余容量，但是在多线程的情况下不准</span>    <span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//移除队列中所有的元素，并添加到指定的集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从队列中最多移除maxElements个元素，并添加到指定集合中</span>    <span class="token keyword">int</span> <span class="token function">drainTo</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> maxElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="如何理解这个“blocking”？"><a href="#如何理解这个“blocking”？" class="headerlink" title="如何理解这个“blocking”？"></a>如何理解这个“blocking”？</h3><p><strong>对于插入（入队）操作：</strong>如果是无边界的队列，则直接插入；如果是有边界的队列，则需要等待队列中又空余容量的时候才能插入。</p><p><strong>对于出队操作：</strong>当队列不为空时，才会出队。</p><p>BlockingQueue还有如下特点：</p><ul><li>线程安全</li><li>不允许null值</li></ul><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><p>这是基于链表的BlockingQueue实现。</p><p>这里还有一个<strong>吞吐量</strong>的概念：队列每秒可以处理的消息数量，包括两个方面，一方面是发送的数量，一方面是接收的数量。</p><p>可以在构造方法传入一个容量，用来避免队列过度扩大，如果不指定容量，默认容量就位<code>Integer.MAX_VALUE</code>。</p><p>通过<code>ReentranceLock</code>和<code>Condition</code>来保证线程安全。</p><p>先来看一下链表节点：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        E item<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>        <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还有一些主要的fields：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** The capacity bound, or Integer.MAX_VALUE if none */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Current number of elements */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Head of linked list.     * Invariant: head.item == null     */</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Tail of linked list.     * Invariant: last.next == null     */</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by take, poll, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting takes */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Lock held by put, offer, etc */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Wait queue for waiting puts */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由此知道LinkedBlockingQueue中包含了元素个数，容量边界，以及头尾节点等filed，还包含了用来保证线程安全性的takeLock，putLock，以及条件队列notEmpty和notFull。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不允许null值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 线程安全操作</span>        <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//如果队列已满，则阻塞</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 入队操作</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取当前元素个数</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//如果队列还未满，则唤醒其他线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert putLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert last.next == null;</span>        last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，队列不允许null值，并且通过ReentrantLock和Condition保证线程安全。</p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E x<span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>        takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>            <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert takeLock.isHeldByCurrentThread();</span>        <span class="token comment" spellcheck="true">// assert head.item == null;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>        head <span class="token operator">=</span> first<span class="token punctuation">;</span>        E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>操作和插入操作差不多。</p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于数组实现的BlockingQueue。</p><p>属于典型的有界缓冲区，有固定的容量，一旦创建，容量无法修改。</p><p>在构造方法中必须传入一个容量参数，还可以传入一个参数用来指示队列的公平性访问问题；</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>        notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到，传入的fair参数实际上是用在ReentrantLock上的，用来表示用的是公平锁，还是非公平锁。</p><p>如果一个线程申请一把公平锁，那么当锁释放的时候，先申请的线程先得到锁，非常公平；</p><p>如果一个线程申请的是一把非公平锁，那么当锁释放的时候，后申请的线程可能会先得到锁，有随机性；</p><p>使用非公平锁的队列的吞吐量比使用公平锁的对垒的吞吐量要大，通常情况下都是优先使用非公平锁。</p><p>对于synchronized关键字来说，它也是一种非公平锁，而且没有任何方式可以将它变成公平锁。</p><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 队列满则阻塞</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[putIndex] == null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-1"><a href="#移除-1" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// assert lock.getHoldCount() == 1;</span>        <span class="token comment" spellcheck="true">// assert items[takeIndex] != null;</span>        <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>            itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><p>SynchronousQueue也是一种BlockingQueue，但是它比较特殊，它有如下特点：</p><ul><li>并不存储任何元素，即容量为0，数据直接在配对的生产者/消费者之间传递，不会输入到缓冲队列中；</li><li>入队和出队线程必须一一匹配，要不然先到的线程会阻塞；</li><li>支持公平，非公平策略，默认为非公平策略。公平策略，基于内部的<code>TransferStack</code>结构实现，非公平策略基于内部的<code>TransferQueue</code>结构实现；</li><li>基于一种无锁算法实现</li></ul><p>从构造方法中可以看出其公平策略不同导致实现的不同：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        transferer <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TransferQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TransferStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这两个数据结构均是内部抽象类<code>Transfer</code>的实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Transferer</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 执行put和take操作         *         * @param e 如果不为空，则交由消费者处理;         *          如果为空，请求返回生产者添加的一个item.         * @param timed 是否支持超时         * @param nanos 超时时间，纳秒         * @return 如果不为空，表示值被提供或者被接收了; 如果为空,         *         则表示操作由于超时失败，或者线程调用Thread.interrupted方法         */</span>        <span class="token keyword">abstract</span> E <span class="token function">transfer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再来看一下它的size方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>不会存储任何元素，容量为0.</p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 入队e，如果没有另一个线程接收（出队），则阻塞</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-2"><a href="#移除-2" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 出队，如果没有另一个线程入队，则阻塞</span>    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        E e <span class="token operator">=</span> transferer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>基于数组（平衡二叉堆，优先堆）实现，元素是有序的，你需要实现Comparable，以方便元素进行比较，如果不实现，则按照自然顺序，如果队列不为空，则第一个元素为最小的元素。</p><p>这是一个无界的队列，默认容量大小为11，添加元素的时候会进行扩容。</p><p>总结一下特点吧：</p><ul><li>基于数组实现，因而可以自由扩容，属于无界队列</li><li>有序（根据优先级，而优先级是通过Comparable实现进行比较），小的元素再前面</li><li>线程不安全</li><li>不支持null值</li></ul><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token function">grow</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">siftUp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其中有扩容操作，还有对堆的操作：</p><h3 id="扩容方式"><a href="#扩容方式" class="headerlink" title="扩容方式"></a>扩容方式</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果之前容量小于64，则容量翻倍; 否则增长50%</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldCapacity <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>                                         <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// overflow-conscious code</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="移除-3"><a href="#移除-3" class="headerlink" title="移除"></a>移除</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">--</span>size<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        E result <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>依然是对数组的处理，关键点在处理堆的过程上。</p><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><p>PriorityBlockingQueue是一个阻塞队列，既然是阻塞队列，那么肯定有阻塞操作put和take。同时也是线程安全的。</p><p>它也是基于数组实现的，和PriorityQueue的存储结构无异，区别有以下几点：</p><ul><li>PriorityBlockingQueue是线程安全的（ReentrantLock保证）；</li><li>支持阻塞操作put和take</li></ul><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><p>DelayQueue也是一个BlockingQueue，内部存储基于PriorityQueue，并通过ReentrantLock保证线程安全操作。</p><p>它有如下特点：</p><ul><li>支持延迟获取元素（在创建的时候有一个过期时间，过期之后才可以获取元素）</li><li>PriorityQueue是无界的，因此DelayQueue也是无界的</li><li>线程安全的</li></ul><p>插入的元素类型必须实现Delay接口:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回剩余的delay时间     *     * @param unit 时间单元     * @return 剩余的时间; 为0或者负数，则表示已经过期     */</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关键在于出队操作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// 此处是关键，获取剩余时间，如已经没有剩余时间则出队</span>                    <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                                leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用DelayQueue最常见的的场景有：</p><ul><li><p>缓存系统的设计</p><p>使用DelayQueue保存带有效期的缓存元素，使用一个线程轮询DelayQueue，一旦获取到元素则表示缓存到期了；</p></li><li><p>定时任务调度</p><p>使用DelayQueue保存当天要执行的任务和时间，一旦获取到任务就开始执行，Timer中的TimingQueue就是基于DelayQueue实现的。</p></li></ul><h2 id="使用场景总结"><a href="#使用场景总结" class="headerlink" title="使用场景总结"></a>使用场景总结</h2><p>队列一般用作基于生产-消费者模型的系统中，下面举一些比较常见的例子：</p><ul><li><p>线程池的设计</p><p>JDK中的线程池设计使用到了各种BlockingQueue的实现，用来作为线程的容器。</p><p>比如固定线程数量和单个线程的ExecutorService，使用的是LinkedBlockingQueue；</p><p>缓存线程个数的ExecutorService，使用的是SynchronousQueue；</p></li><li><p>缓存系统的设计</p><p>比如前面提到的DelayQueue，元素可以带缓存时间。</p></li><li><p>定时调度的设计（如Timer）</p><p>比如前面提到的DelayQueue</p></li><li><p>Android Framework中队列的使用</p><ul><li>Android 的AsyncLayoutInflater中使用的ArrayBlockingQueue；</li><li>AnimationThread中使用了PriorityQueue；</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/UML-Queue.png&quot; alt=&quot;Queue&quot;&gt;&lt;/p&gt;
&lt;p&gt;先来看一下Queue的定义：&lt;/p&gt;
&lt;pre class=&quot; language-java&quot;&gt;&lt;code class=&quot;la
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="数据结构" scheme="https://www.jiangkang.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="https://www.jiangkang.tech/tags/Java/"/>
    
      <category term="队列" scheme="https://www.jiangkang.tech/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Gradle读取配置文件</title>
    <link href="https://www.jiangkang.tech/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/"/>
    <id>https://www.jiangkang.tech/2020/05/15/android/gradle-du-qu-pei-zhi-wen-jian/</id>
    <published>2020-05-15T05:23:45.000Z</published>
    <updated>2020-05-15T05:25:20.558Z</updated>
    
    <content type="html"><![CDATA[<p>gradle中使用了gradle.properties和local.properties文件.</p><p>build.gradle 可以直接获取同级目录和上层目录的properties文件.</p><p>如果properties文件在其他目录,或者不是<code>.properties</code>的格式,我们可以使用Java中的Properties类来读取这些文件.</p><p>Properties文件支持以下几种格式:</p><ul><li>key=value</li><li>key: value</li></ul><p>在Android Studio中建议统一使用<code>key=value</code>形式</p><p>看一个kotin dsl 的例子:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> flutterProjectRoot<span class="token operator">:</span> Path <span class="token operator">=</span> rootProject<span class="token punctuation">.</span>projectDir<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> plugins <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> pluginsFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>flutterProjectRoot<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">".flutter-plugins"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 读取属性文件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pluginsFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    plugins<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">FileReader</span><span class="token punctuation">(</span>pluginsFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历属性</span>plugins<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token operator">-></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$key</span>:<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取指定key的value</span><span class="token function">println</span><span class="token punctuation">(</span>plugins<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sqflite"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Path中可以使用<code>resolve</code>方法,将路径字符串转换成对应格式的Path.</p><pre class=" language-kotlin"><code class="language-kotlin">flutterProjectRoot<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gradle中使用了gradle.properties和local.properties文件.&lt;/p&gt;
&lt;p&gt;build.gradle 可以直接获取同级目录和上层目录的properties文件.&lt;/p&gt;
&lt;p&gt;如果properties文件在其他目录,或者不是&lt;code&gt;.p
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Gradle" scheme="https://www.jiangkang.tech/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Golang语法快速入门</title>
    <link href="https://www.jiangkang.tech/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/"/>
    <id>https://www.jiangkang.tech/2020/05/09/golang/golang-yu-fa-kuai-su-ru-men/</id>
    <published>2020-05-09T13:51:22.000Z</published>
    <updated>2020-05-09T13:52:41.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if-else-变体"><a href="#if-else-变体" class="headerlink" title="if/else 变体"></a>if/else 变体</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> statement<span class="token punctuation">;</span> condition <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">if</span> condition<span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch 下的每个case不必带break,匹配到了某个case之后会自动跳出.</p><p>可以使用<code>fallthrough</code>强制执行后面的case的代码.</p><p>如果switch没有条件表达式,它会默认匹配true</p><p>也可以判断变量的type:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token keyword">type</span><span class="token punctuation">:</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 你可以定义任意个数的case */</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* 可选 */</span>       <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">switch</span> i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" x 的类型 :%T"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>                      <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>               fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 int 型"</span><span class="token punctuation">)</span>                             <span class="token keyword">case</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 float64 型"</span><span class="token punctuation">)</span>                 <span class="token keyword">case</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 func(int) 型"</span><span class="token punctuation">)</span>                            <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"x 是 bool 或 string 型"</span> <span class="token punctuation">)</span>             <span class="token keyword">default</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"未知型"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>可以使用 <code>for.. range</code>进行迭代:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> oldMap <span class="token punctuation">{</span>    newMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">}</span></code></pre><p>for中的三个条件都可以忽略.</p><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p>自增+1,多用于枚举</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>golang中的数组是值类型,修改副本中的元素不会影响原来的数据.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"France"</span><span class="token punctuation">}</span>    b <span class="token operator">:=</span> a <span class="token comment" spellcheck="true">// a copy of a is assigned to b</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Singapore"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>输出结果:</p><pre class=" language-go"><code class="language-go">a is <span class="token punctuation">[</span>USA China India Germany France<span class="token punctuation">]</span>  b is <span class="token punctuation">[</span>Singapore China India Germany France<span class="token punctuation">]</span> </code></pre><p>数组的大小是类型的一部分。因此[3]int和[2]int是不同的类型。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>Golang中切片是数组的抽象,Go中数组长度不可变,但是切片可以.切片本身没有任何数据,它只是对现有数组的引用.</p><p>因此,。对切片所做的任何修改都将反映在底层数组中.</p><p>可以使用make方法创建切片:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以简写为</span>slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">)</span></code></pre><p><code>len()</code>是切片中元素的数量</p><p><code>cap()</code>是底层数组中元素的数量</p><p><code>append()</code>可以用来给切片追加元素,也会改变底层数组的内容,但是在切片cap不大于len的情况下,会扩容导致分配新的数组空间,这种情况下引用该数组的其他切片不被影响.</p><p><code>copy()</code>不会在两个切片之间建立联系.</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>同样可以使用<code>make</code>创建,也可以直接初始化:</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">/* 声明变量，默认 map 是 nil */</span><span class="token keyword">var</span> map_variable <span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token comment" spellcheck="true">/* 使用 make 函数 */</span>map_variable <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>key_data_type<span class="token punctuation">]</span>value_data_type<span class="token punctuation">)</span>rating <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">float32</span> <span class="token punctuation">{</span><span class="token string">"C"</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">:</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span></code></pre><p>如果不初始化,则是一个nil map.</p><p><code>delete(map, key)</code>用来删除元素</p><p><code>map[key]</code>获取不存在的key值时,会返回默认值,string返回空字符串,可以使用:</p><pre class=" language-go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> </code></pre><p>ok是布尔类型.</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可变参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">myfunc</span><span class="token punctuation">(</span>arg <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>函数也是Go中的一种数据类型,可以作为另一个函数的参数.</p><p><code>defer</code>:当一个函数执行到最后,会逆序执行defer语句,然后return.</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>声明指针:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> var_name <span class="token operator">*</span><span class="token keyword">var</span><span class="token operator">-</span><span class="token keyword">type</span><span class="token keyword">var</span> ip <span class="token operator">*</span><span class="token builtin">int</span>        <span class="token comment" spellcheck="true">/* 指向整型*/</span><span class="token keyword">var</span> fp <span class="token operator">*</span><span class="token builtin">float32</span>    <span class="token comment" spellcheck="true">/* 指向浮点型 */</span></code></pre><p>获取指针的值:<code>*ptr</code></p><p>使用指针传递参数:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">*</span>val <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">}</span></code></pre><h2 id="结构嵌套"><a href="#结构嵌套" class="headerlink" title="结构嵌套"></a>结构嵌套</h2><ul><li><p>结构体嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>      city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>      name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    address Address<span class="token punctuation">}</span></code></pre></li><li><p>匿名字段/提升字段</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    weight <span class="token builtin">int</span><span class="token punctuation">}</span> <span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human <span class="token comment" spellcheck="true">// 匿名字段，那么默认Student就包含了Human的所有字段</span>    speciality <span class="token builtin">string</span><span class="token punctuation">}</span> </code></pre><p>可以像这样初始化:</p><pre class=" language-go"><code class="language-go">mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Computer Science"</span><span class="token punctuation">}</span></code></pre><p>字段可以直接访问.</p><pre class=" language-go"><code class="language-go">mark<span class="token punctuation">.</span>name</code></pre></li></ul><p>如果想导出结构体和它的字段,则首字母必须大写.</p><p>结构体是值类型,如果两个结构体中的字段都相等(前提是字段类型可以比较),则认为两个结构体是相等的.</p><h2 id="make与new"><a href="#make与new" class="headerlink" title="make与new"></a>make与new</h2><p><code>make</code>用于内建类型(map, slice,channel)的内存分配.</p><p><code>new</code>用于各种类型的内存分配,返回的是指针.</p><h2 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h2><p>方法指的是带接收者(即对象)的函数.</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Type<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">funcName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">return</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p> 方法是可以继承的,如果匿名字段实现了一个方法,包含这个匿名字段的struct也能调用这个方法:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Human <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name  <span class="token builtin">string</span>    age   <span class="token builtin">int</span>    phone <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human  <span class="token comment" spellcheck="true">//匿名字段</span>    school <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Human   <span class="token comment" spellcheck="true">//匿名字段</span>    company <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Human<span class="token punctuation">)</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hi, I am %s you can call me on %s\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>name<span class="token punctuation">,</span> h<span class="token punctuation">.</span>phone<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mark <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"222-222-YYYY"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"MIT"</span><span class="token punctuation">}</span>    sam <span class="token operator">:=</span> Employee<span class="token punctuation">{</span>Human<span class="token punctuation">{</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"111-888-XXXX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Golang Inc"</span><span class="token punctuation">}</span>    mark<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sam<span class="token punctuation">.</span><span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>方法还可以重写,即在包含匿名字段的struct再实现一个方法.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;if-else-变体&quot;&gt;&lt;a href=&quot;#if-else-变体&quot; class=&quot;headerlink&quot; title=&quot;if/else 变体&quot;&gt;&lt;/a&gt;if/else 变体&lt;/h2&gt;&lt;pre class=&quot; language-go&quot;&gt;&lt;code class=&quot;la
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.jiangkang.tech/categories/Golang/"/>
    
    
      <category term="语法" scheme="https://www.jiangkang.tech/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Golang" scheme="https://www.jiangkang.tech/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Text的使用</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/flutter-text-de-shi-yong/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/flutter-text-de-shi-yong/</id>
    <published>2020-05-08T13:56:58.000Z</published>
    <updated>2020-05-25T10:54:38.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>文本作为UI最基本的元素，最基本的用法有这些：</p><ul><li>字体</li><li>文字大小、颜色</li><li>一些常用样式，比如倾斜，加粗，下划线，删除线等</li><li>文字超出边界之后如何显示</li><li>文字的单行，多行控制</li><li>文字的显示方向</li><li>富文本的显示</li><li>文字渐变，阴影</li><li>文本点击事件</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>如果需要使用自定义字体，则需要在项目中的fonts文件夹下放置字体文件，然后在配置文件pubspec.yaml中进行配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">flutter</span><span class="token punctuation">:</span>  <span class="token key atrule">fonts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> Raleway      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/Raleway<span class="token punctuation">-</span>Italic.ttf          <span class="token key atrule">style</span><span class="token punctuation">:</span> italic    <span class="token punctuation">-</span> <span class="token key atrule">family</span><span class="token punctuation">:</span> RobotoMono      <span class="token key atrule">fonts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Regular.ttf        <span class="token punctuation">-</span> <span class="token key atrule">asset</span><span class="token punctuation">:</span> fonts/RobotoMono<span class="token punctuation">-</span>Bold.ttf          <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">700</span></code></pre><p>使用字体主要有两种方式，一种是通过主题设置统一的字体，一种是为单独的Widget设置字体。</p><p><strong>通过主题设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  title<span class="token punctuation">:</span> <span class="token string">'Custom Fonts'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Set Raleway as the default app font.</span>  theme<span class="token punctuation">:</span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'Raleway'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  home<span class="token punctuation">:</span> <span class="token function">MyHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>单独设置字体：</strong></p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>  <span class="token string">'Roboto Mono sample'</span><span class="token punctuation">,</span>  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> <span class="token string">'RobotoMono'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="文字大小，颜色，倾斜，加粗"><a href="#文字大小，颜色，倾斜，加粗" class="headerlink" title="文字大小，颜色，倾斜，加粗"></a>文字大小，颜色，倾斜，加粗</h3><p>这些样式也都是在TextStyle中设置的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"style: color,fontWeight,fontSize,fontStyle"</span><span class="token punctuation">,</span>              style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>                color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                fontWeight<span class="token punctuation">:</span> FontWeight<span class="token punctuation">.</span>bold<span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>                fontStyle<span class="token punctuation">:</span> FontStyle<span class="token punctuation">.</span>italic<span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>其中fontSize使用的是逻辑像素，默认为14，FontWeight.bold表示加粗，当然还可以设置指定的值，fontStyle可以用来控制文本是否倾斜。</p><h3 id="下划线-上划线，删除线，波浪线"><a href="#下划线-上划线，删除线，波浪线" class="headerlink" title="下划线/上划线，删除线，波浪线"></a>下划线/上划线，删除线，波浪线</h3><p>下划线，删除线等属于文本装饰的一种，在TextStyle中通过decoration属性描述：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">TextStyle</span><span class="token punctuation">(</span>                decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>underline<span class="token punctuation">,</span>                decorationColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">,</span>                decorationStyle<span class="token punctuation">:</span> TextDecorationStyle<span class="token punctuation">.</span>solid<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>效果如下：<br><img src="https://oss.jiangkang.tech/jk/text_underline.png" alt=""></p><p>可以指定下划线的颜色，样式，比如线的实现，还是虚线，还是波浪线等;<br>对于这些装饰，还可以设置双下划线，点线等效果。<br><img src="https://oss.jiangkang.tech/jk/text_underline_double.png" alt=""></p><h3 id="文字超出边界如何显示"><a href="#文字超出边界如何显示" class="headerlink" title="文字超出边界如何显示"></a>文字超出边界如何显示</h3><p>超出边界的显示有三种类型：</p><ul><li>显示省略号</li><li>直接截断</li><li>渐隐</li></ul><p>这几种显示样式都是通过overflow属性控制的：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;overflow: TextOverflow.ellipsis;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>ellipsis<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.clip;overflow: TextOverflow.clip;overflow: TextOverflow.clip;"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>clip<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">ListTile</span><span class="token punctuation">(</span>          title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,overflow: TextOverflow.fade,"</span><span class="token punctuation">,</span>            overflow<span class="token punctuation">:</span> TextOverflow<span class="token punctuation">.</span>fade<span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="文字的单行与多行显示"><a href="#文字的单行与多行显示" class="headerlink" title="文字的单行与多行显示"></a>文字的单行与多行显示</h3><p>文本的多行显示，可以通过maxLines属性和softWrap属性控制，其中maxLines控制最大行数，softWrap控制是否自动换行。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;softWrap: false;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"softWrap: true;softWrap: true;softWrap: true;softWrap: true;softWrap: true;"</span><span class="token punctuation">,</span>            softWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><h3 id="富文本"><a href="#富文本" class="headerlink" title="富文本"></a>富文本</h3><p>可以使用Text.rich/ RichText + TextSpan来显示富文本：</p><pre class=" language-dart"><code class="language-dart">Text<span class="token punctuation">.</span><span class="token function">rich</span><span class="token punctuation">(</span>            <span class="token function">TextSpan</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token string">"plain text "</span><span class="token punctuation">,</span>              children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string">"fontSize"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">TextSpan</span><span class="token punctuation">(</span>                    text<span class="token punctuation">:</span> <span class="token string">"decoration"</span><span class="token punctuation">,</span>                    style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>decoration<span class="token punctuation">:</span> TextDecoration<span class="token punctuation">.</span>lineThrough<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_1.png" alt=""></p><pre class=" language-dart"><code class="language-dart"><span class="token function">RichText</span><span class="token punctuation">(</span>              text<span class="token punctuation">:</span> <span class="token function">TextSpan</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>TextSpan<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 1"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>blueAccent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">TextSpan</span><span class="token punctuation">(</span>                  text<span class="token punctuation">:</span> <span class="token string">"Text 2"</span><span class="token punctuation">,</span>                  style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pinkAccent<span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/rich_text_2.png" alt=""></p><h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p>文字的阴影可以通过TextStyle中的shadows属性进行控制：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">Text</span><span class="token punctuation">(</span>            <span class="token string">"style: letterSpacing,shadows"</span><span class="token punctuation">,</span>            style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>              shadows<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Shadow<span class="token operator">></span><span class="token punctuation">[</span>                <span class="token function">Shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>pink<span class="token punctuation">,</span> offset<span class="token punctuation">:</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/text_shadow.png" alt=""></p><h3 id="Text的点击事件"><a href="#Text的点击事件" class="headerlink" title="Text的点击事件"></a>Text的点击事件</h3><p>可以使用GestureDetector，也可以使用InkWell：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">InkWell</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>              <span class="token string">"Default Text"</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            onTap<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关注 &lt;a href=&quot;https://github.com/jiangkang/flutter-system&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jiangkang/flutter
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="Text" scheme="https://www.jiangkang.tech/tags/Text/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-Tabs的使用</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/flutter-tabs-de-shi-yong/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/flutter-tabs-de-shi-yong/</id>
    <published>2020-05-08T13:52:42.000Z</published>
    <updated>2020-05-25T10:54:38.825Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter中使用tabs还是非常的简单的，可以用在顶部导航栏，也可以用在底部导航栏。</p><div style="width:100%">  <img src="https://oss.jiangkang.tech/jk/tabs1.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs2.png" style="zoom:50%;width:33%;float:left;" />  <img src="https://oss.jiangkang.tech/jk/tabs3.png" style="zoom:50%;width:33%;float:left;" /></div><p>使用Tabs需要用到两个widget，一个是<code>TabBar</code>,用于顶导航或者底导航；一个是<code>TabBarView</code>，用于Tab下具体的内容。</p><h3 id="TabBar"><a href="#TabBar" class="headerlink" title="TabBar"></a>TabBar</h3><p>首先在AppBar中使用TabBar：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs4.png" alt="Indicator"></p><p>可以看到，底下还有一个Indicator，如果看源码，会发现默认使用的Indicator为<code>UnderlineTabIndicator</code>。</p><p>不过还是可以进行自定义：</p><pre class=" language-dart"><code class="language-dart">  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>其中indicatorColor用来指定Indicator的颜色，IndicatorPadding用来指定内容四周的边距，IndicatorSize可以选择两个值：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> TabBarIndicatorSize <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// 为tab时，Indicator撑满tab宽度</span>  tab<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// 为label时，Indicator宽度为tab的内容的宽度</span>  label<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><img src="https://oss.jiangkang.tech/jk/tabs5.png" alt=""></p><h2 id="TabBarView"><a href="#TabBarView" class="headerlink" title="TabBarView"></a>TabBarView</h2><p>TabBarView对应Tab下的内容视图：</p><pre class=" language-dart"><code class="language-dart">  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>可以看到TabBar和TabBarView中都有一个Controller，这个Controller用途比较大，比如你想知道当前选中的是哪个tab，默认选中哪个tab，都需要TabController的帮助，我们一般用<code>DefaultTabController</code>来包裹具体的视图。</p><p>来看一下全部的代码吧：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/page/page_entry.dart'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TabsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _TabsDemoState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">_TabsDemoState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_TabsDemoState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>TabsDemo<span class="token operator">></span>    <span class="token keyword">with</span> SingleTickerProviderStateMixin <span class="token punctuation">{</span>  <span class="token keyword">final</span> TABS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>videocam<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Tab</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>games<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> PAGES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ArticleEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">PageEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">DemoEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  TabController _tabController<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _tabController <span class="token operator">=</span>        <span class="token function">TabController</span><span class="token punctuation">(</span>initialIndex<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span> vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">DefaultTabController</span><span class="token punctuation">(</span>        length<span class="token punctuation">:</span> TABS<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>            appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>              title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"Tabs Demo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              bottom<span class="token punctuation">:</span> <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            floatingActionButton<span class="token punctuation">:</span> <span class="token function">Builder</span><span class="token punctuation">(</span>              builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FloatingActionButton</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token function">Icon</span><span class="token punctuation">(</span>Icons<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">,</span>                  onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBarView <span class="token function">_buildTabBarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBarView</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> PAGES<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TabBar <span class="token function">_buildTabBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">TabBar</span><span class="token punctuation">(</span>      controller<span class="token punctuation">:</span> _tabController<span class="token punctuation">,</span>      tabs<span class="token punctuation">:</span> TABS<span class="token punctuation">,</span>      indicatorColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>      indicatorPadding<span class="token punctuation">:</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      indicatorWeight<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      indicatorSize<span class="token punctuation">:</span> TabBarIndicatorSize<span class="token punctuation">.</span>label<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">_showSnackBar</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scaffold<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showSnackBar</span><span class="token punctuation">(</span>        <span class="token function">SnackBar</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"当前选中index为${_tabController.index}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter中使用tabs还是非常的简单的，可以用在顶部导航栏，也可以用在底部导航栏。&lt;/p&gt;
&lt;div style=&quot;width:100%&quot;&gt;
  &lt;img src=&quot;https://oss.jiangkang.tech/jk/tabs1.png&quot; style=&quot;zoo
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="Tab" scheme="https://www.jiangkang.tech/tags/Tab/"/>
    
  </entry>
  
  <entry>
    <title>Flutter时间处理</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/flutter-shi-jian-chu-li/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/flutter-shi-jian-chu-li/</id>
    <published>2020-05-08T13:47:29.000Z</published>
    <updated>2020-05-08T13:48:04.656Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter 中在时间处理方面还是比较简单的，我们主要用到的有两个类：</p><ul><li><p>DateTime</p><p>表示一个指定的时间点，包括年月日时分秒</p></li><li><p>TimeOfDay</p><p>表示一天中的一个时间点，可以区分上午，下午，12小时制，24小时制等</p></li></ul><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里就得到了一个当前时间的DateTime对象，然后就可以拿到你想要的信息：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">final</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">final</span> day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token punctuation">;</span></code></pre><p>还可以获取当前时星期几：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> week <span class="token operator">=</span> now<span class="token punctuation">.</span>weekday<span class="token punctuation">;</span></code></pre><h3 id="转时间戳"><a href="#转时间戳" class="headerlink" title="转时间戳"></a>转时间戳</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String timestamp <span class="token operator">=</span> now<span class="token punctuation">.</span>millisecondsSinceEpoch<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="时间运算"><a href="#时间运算" class="headerlink" title="时间运算"></a>时间运算</h3><ul><li><p>前2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> before <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>后2天</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>两个时间点相隔的时间数</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> after <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">Duration</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> diff <span class="token operator">=</span> after<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">.</span>inHours<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相隔的小时数，也可以是分钟数，秒数</span></code></pre></li></ul><h3 id="上午还是下午"><a href="#上午还是下午" class="headerlink" title="上午还是下午"></a>上午还是下午</h3><p>可以使用TimeOfDay来处理：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeOfDay <span class="token operator">=</span> TimeOfDay<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> amOrPm <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>period<span class="token punctuation">;</span></code></pre><p>其中timeOfDay.period实际上是一个枚举对象：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> DayPeriod <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// Ante meridiem (before noon).</span>  am<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// Post meridiem (after noon).</span>  pm<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>这样可以判断是上午还是下午了。</p><h3 id="12-24小时制"><a href="#12-24小时制" class="headerlink" title="12/24小时制"></a>12/24小时制</h3><ul><li><p>24小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour24 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hour<span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>12小时</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> hour12 <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span>hourOfPeriod<span class="token punctuation">;</span></code></pre></li></ul><p>还可以格式化输出当前的分钟小时数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> timeStr <span class="token operator">=</span> timeOfDay<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11:49 PM</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter 中在时间处理方面还是比较简单的，我们主要用到的有两个类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DateTime&lt;/p&gt;
&lt;p&gt;表示一个指定的时间点，包括年月日时分秒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TimeOfDay&lt;/p&gt;
&lt;p&gt;表示一天中的一个时间点，可以
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="时间处理" scheme="https://www.jiangkang.tech/tags/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Dart基础语法</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/dart-ji-chu-yu-fa/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/dart-ji-chu-yu-fa/</id>
    <published>2020-05-08T13:45:15.000Z</published>
    <updated>2020-05-08T13:45:49.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重要的概念"><a href="#重要的概念" class="headerlink" title="重要的概念"></a>重要的概念</h3><ul><li>任何你可以放在一个变量中的都是一个object，并且每个object都是一个class的实例，甚至于数字，functions，null都是对象，所有的对象继承自Object类。</li><li>即使Dart是强类型的，但是类型说明是可选的，因为Dart可以推断类型；当你要显式说明没有指定任何类型的时候，可以用dynamic</li><li>Dart也支持泛型，比如List<int>（整数列表）或者List<dynamic>（一个任意类型的对象列表）</li><li>Dart支持顶层函数(如main()),以及绑定到一个类或者对象的方法（静态方法或者实例方法）；</li><li>同样的，Dart支持顶层变量;</li><li>不像Java，Dart中没有public，private，protected这些关键字，如果一个标识符以“_”(下划线)符号开头，则对其库来说是私有的。</li><li>标识符可以以字母或者下划线开头，后加字母或者数字组合</li><li>Dart有表达式（有运行时值）和语句（没有运行时值）， 如condition ? exp1:exp2,与if else 语句相比，前则有值，后者没有值。一个语句经常包含一个或者多个表达式，但是一个表达式不能直接包含一个语句。</li><li>Dart工具可以报告两种问题：errors和warnings。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token keyword">dynamic</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后面可以改变类型</span>String name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>没有初始化的变量有一个初始值null，即使是数字类型也一样，因为数字类型也是一个对象。</p><pre class=" language-dart"><code class="language-dart">int lineCount<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>lineCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>如果你有一个变量不会改变，应该使用final或者const。<br>一个const变量是一个编译时常量，而一个final 顶层或者类变量当第一次使用的时候初始化。</p><p>注意：实例变量可以是final，但不是const。final型实例变量必须在构造函数体执行之前(变量声明的时候)就初始化。</p><p>在你需要一个编译时常量的时候可以使用const，如果const常量在Class层级，则用static const，在声明的地方将变量设置为编译时常量，比如一个数字，一个字符串，一个const常量，或者一系列常量运算 的结果。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Without a type annotation</span><span class="token keyword">final</span> String nickname <span class="token operator">=</span> <span class="token string">'Bobby'</span><span class="token punctuation">;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unit of pressure (dynes/cm2)</span><span class="token keyword">const</span> double atm <span class="token operator">=</span> <span class="token number">1.01325</span> <span class="token operator">*</span> bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Standard atmosphere</span></code></pre><p>Const关键字不仅可以用于声明常量，还可以用它创建常量值，以及声明创建常量值的构造器，任何变量可以有一个常量。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//你后面可以修改foo，如foo = [1, 2, 3]; </span><span class="token keyword">final</span> bar <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Equivalent to `const []`，后面不能修改baz</span></code></pre><h3 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h3><ul><li>numbers</li></ul><p>  有两种形式，int（64位，依赖于平台，在Dart VM中，为64位）和double（64位）</p><ul><li>strings</li></ul><p>  一个Dart String是一系列UTF-16代码单元，可以使用单引号和双引号。<br>  可以使用${expression}在字符串中表示动态内容，大括号可以省略，对于对象，会使用其toString（）方法；</p><p>   可以用三个引号创建多行文本：</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'''   You can create   multi-line strings like this one.   '''</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">"""This is also a   multi-line string."""</span><span class="token punctuation">;</span></code></pre><p>  可以用一个r创建一个raw string，比如Unicode字符串</p><pre class=" language-dart"><code class="language-dart">   <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">r'In a raw string, not even \n gets special treatment.'</span><span class="token punctuation">;</span></code></pre><ul><li>booleans</li></ul><p>  为了表示布尔值，Dart有一个叫做bool的类型。</p><ul><li>list/arrays</li></ul><p>  在Dart中，arrays是List对象，这里就直接叫做lists了。</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  为了创建一个编译时常量的list，在list 字面量前加const，如：</p><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">var</span> constantList <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>maps</li></ul><p>  键值对，不用多说，上代码:</p><pre class=" language-dart"><code class="language-dart">      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Key:    Value</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">,</span>        <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'turtledoves'</span><span class="token punctuation">,</span>        <span class="token string">'fifth'</span><span class="token punctuation">:</span> <span class="token string">'golden rings'</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'partridge'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'second'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'turtledoves'</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'golden rings'</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> nobleGases <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'helium'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'neon'</span><span class="token punctuation">;</span>          nobleGases<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'argon'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//添加一个新的键值对</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          gifts<span class="token punctuation">[</span><span class="token string">'fourth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'calling birds'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Add a key-value pair</span>          <span class="token comment" spellcheck="true">//取值</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'partridge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//如果不存在，会返回null</span>          <span class="token keyword">var</span> gifts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'partridge'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">assert</span><span class="token punctuation">(</span>gifts<span class="token punctuation">[</span><span class="token string">'fifth'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//编译时常量</span>          <span class="token keyword">final</span> constantMap <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'helium'</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'neon'</span><span class="token punctuation">,</span>            <span class="token number">18</span><span class="token punctuation">:</span> <span class="token string">'argon'</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// constantMap[2] = 'Helium'; // Uncommenting this causes an error.</span></code></pre><ul><li>runes(用于在字符串中标识Unicode字符)</li></ul><p>  Dart中， runes是字符串的UTF-32代码点。<br>  由于Dart使用的是UTF-16，因此在字符串中表示32位字符，需要特殊的语法。<br>  一般表示方式是\uXXXX,XXXX是一个4位16进制数</p><pre class=" language-dart"><code class="language-dart">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> clapping <span class="token operator">=</span> <span class="token string">'\u{1f44f}'</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>codeUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>clapping<span class="token punctuation">.</span>runes<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Runes input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runes</span><span class="token punctuation">(</span>    <span class="token string">'\u2665  \u{1f605}  \u{1f60e}  \u{1f47b}  \u{1f596}  \u{1f44d}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String<span class="token punctuation">.</span>fromCharCodes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>symbols</li></ul><p>  一个Symbol对象表示一个Dart程序中声明的运算符或者标识符。你可能永远都不会使用这个。不多说。</p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>Dart是一个真正面向对象的语言，即使是function都有一个叫做Function的对象。也就是说，Function可以赋值给一个变量，或者作为参数传递给其他functions，你也可以像调用函数一样调用Dart实例，如Callable Classes。（后面又说，暂时忽略即可）</p><pre class=" language-dart"><code class="language-dart">bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果函数只是包含了一个简单的表达式，可以用速记方法表示</span>bool <span class="token function">isNoble</span><span class="token punctuation">(</span>int atomicNumber<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _nobleGases<span class="token punctuation">[</span>atomicNumber<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p><code>=&gt; expr</code> 是 { return expr; }的速写方式。值得注意的是，这里只可以用表达式的速写，而不可以用语句的速写，比如不可以使用if语句。</p><p>一个function有两种类型的参数，required和optional，必须的参数放在最前面，可选参数放在后面。命名的可选参数也可以用@required标记。</p><p>可选参数可以是位置性的，也可以是命名的，但是不能包含这两种情况。</p><h4 id="可选命名参数"><a href="#可选命名参数" class="headerlink" title="可选命名参数"></a>可选命名参数</h4><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">//定义</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold<span class="token punctuation">,</span> bool hidden<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> hidden<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Flutter中创建实例的参数很多，因此主要使用可选命名参数这种方式，便于阅读。</p><p>你也可以用@required注解表示这是个必须的参数，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">const</span> <span class="token function">Scrollbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Key key<span class="token punctuation">,</span> <span class="token metadata symbol">@required</span> Widget child<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Required 是在meta 包下面定义的，因此你需要import package:meta/meta.dart 或者，import那些输出meta包的包，如Flutter下的package:flutter/material.dart.</p><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title="可选位置参数"></a>可选位置参数</h4><p>用[] 包裹着的参数：</p><pre class=" language-dart"><code class="language-dart">String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> <span class="token punctuation">[</span>String device<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Bob says Howdy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">,</span> <span class="token string">'smoke signal'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a smoke signal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h4><p>你的function可以用=为可选位置参数或者可选命名参数定义默认值，而且必须使用编译时常量值，如果没有提供默认值，那么默认值为null。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Sets the [bold] and [hidden] flags ...</span><span class="token keyword">void</span> <span class="token function">enableFlags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bool bold <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool hidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// bold will be true; hidden will be false.</span><span class="token function">enableFlags</span><span class="token punctuation">(</span>bold<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String <span class="token function">say</span><span class="token punctuation">(</span>String from<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span>    <span class="token punctuation">[</span>String device <span class="token operator">=</span> <span class="token string">'carrier pigeon'</span><span class="token punctuation">,</span> String mood<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'$from says $msg'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result with a $device'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mood <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token string">'$result (in a $mood mood)'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Howdy'</span><span class="token punctuation">)</span> <span class="token operator">==</span>    <span class="token string">'Bob says Howdy with a carrier pigeon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> gifts <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>      <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'paper'</span><span class="token punctuation">,</span>      <span class="token string">'second'</span><span class="token punctuation">:</span> <span class="token string">'cotton'</span><span class="token punctuation">,</span>      <span class="token string">'third'</span><span class="token punctuation">:</span> <span class="token string">'leather'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'list:  $list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'gifts: $gifts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h4 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h4><p>每一个APP都必须有一个main（）方法，作为app的入口点。main（）方法返回void，可以有一个List<String> 作为参数。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#sample_text_id'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Click me!'</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>reverseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这种..的语法叫做级联。通过级联，你可以对单个对象的成员执行多个操作。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Run the app like this: dart args.dart 1 test</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你也可以用args库，来定义和解析命令行参数。</p><h4 id="作为第一类对象的functions"><a href="#作为第一类对象的functions" class="headerlink" title="作为第一类对象的functions"></a>作为第一类对象的functions</h4><p>你可以将一个function作为参数传递给另一个function：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">void</span> <span class="token function">printElement</span><span class="token punctuation">(</span>int element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pass printElement as a parameter.</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>printElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以将一个function赋值给一个变量：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> loudify <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'!!! ${msg.toUpperCase()} !!!'</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">loudify</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'!!! HELLO !!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>你可以创建一个没有命名的函数，如匿名函数，lambda，闭包等。<br>下面的代码块就包含了一个函数体：</p><pre class=" language-dart"><code class="language-dart"><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span> param1<span class="token punctuation">[</span><span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   codeBlock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><p>如下面这个方法，使用了没有指定类型的参数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">,</span> <span class="token string">'oranges'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果函数只包含一个语句，可以用=&gt; 箭头速写方式。</p><pre class=" language-dart"><code class="language-dart">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'${list.indexOf(item)}: $item'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="嵌套函数变量作用域问题"><a href="#嵌套函数变量作用域问题" class="headerlink" title="嵌套函数变量作用域问题"></a>嵌套函数变量作用域问题</h4><pre class=" language-dart"><code class="language-dart">bool topLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> insideMain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> insideFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">nestedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> insideNestedFunction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideMain<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span><span class="token punctuation">(</span>insideNestedFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>nestedFunction()可以使用每一个层级的变量。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>参考JavaScript中的闭包</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// Returns a function that adds [addBy] to the</span><span class="token comment" spellcheck="true">/// function's argument.</span>Function <span class="token function">makeAdder</span><span class="token punctuation">(</span>num addBy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>num i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> addBy <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a function that adds 2.</span>  <span class="token keyword">var</span> add2 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Create a function that adds 4.</span>  <span class="token keyword">var</span> add4 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">add4</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>所有function都会返回一个值，如果没有指定，则返回null：</p><pre class=" language-dart"><code class="language-dart"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>基本的就不说了，和其他语言的大同小异，如Java,JavaScript等。</p><p>不同的是：</p><p>?? 代表 if null<br>?. 表示 如果不为null才执行（参考kotlin）<br>~/ 代表 整除（返回值为int）<br>/  返回值 为double<br>as 用来类型转换（和kotlin一样）<br>is 判断是否属于否个类型</p><h4 id="级联操作符"><a href="#级联操作符" class="headerlink" title="..(级联操作符)"></a>..(级联操作符)</h4><p>级联操作符允许你在相同的对象上执行一系列操作。除了函数调用，你还可以通过级联访问同一个对象上的多个字段（field）。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Get an object.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span> <span class="token comment" spellcheck="true">// Use its members.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与下面这段等价：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#confirm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'Confirm'</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'important'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Confirmed!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然，也可以进行嵌套：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> addressBook <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">AddressBookBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jenny'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">'jenny@example.com'</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">PhoneNumberBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token string">'415-555-0100'</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span>label <span class="token operator">=</span> <span class="token string">'home'</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在返回实际对象的function上运用级联要非常小心，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: method 'write' isn't defined for 'void'.</span></code></pre><p>Sb.write()返回void，你不能在void上构造级联。</p><h3 id="控制流-异常"><a href="#控制流-异常" class="headerlink" title="控制流/异常"></a>控制流/异常</h3><p>和其他语言大同小异，不多说。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以通过常量构造器创建编译时常量</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token function">identical</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// They are the same instance!</span></code></pre><p>子类不从父类继承构造函数，如果子类没有声明构造函数，则是默认的午餐构造函数。</p><h4 id="获取一个对象的类型"><a href="#获取一个对象的类型" class="headerlink" title="获取一个对象的类型"></a>获取一个对象的类型</h4><p>可以使用runtimeType属性获取一个对象的类型，这个属性返回一个Type类型的对象。</p><pre class=" language-dart"><code class="language-dart"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'The type of a is ${a.runtimeType}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title="命名构造函数"></a>命名构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Named constructor</span>  Point<span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用一个非默认的超类构造函数"><a href="#调用一个非默认的超类构造函数" class="headerlink" title="调用一个非默认的超类构造函数"></a>调用一个非默认的超类构造函数</h4><p>默认情况下，一个子类的构造函数调用超类的没有命名的无参构造函数。超类的构造函数在构造函数体的开始被调用，如果还是用了初始化列表，则初始化列表先于超类被调用。<br>执行顺序如下：</p><ol><li>初始化列表</li><li>超类的无参构造函数</li><li>main class的无参构造函数</li></ol><p>如果超类没有无命名的无参构造函数，你必须手动调用它的一个构造函数：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token function">getDefaultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><p>除了调用超类构造函数之外，还可以在构造函数体执行之前初始化实例变量。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// Initializer list sets instance variables before</span><span class="token comment" spellcheck="true">// the constructor body runs.</span>Point<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> num<span class="token operator">></span> json<span class="token punctuation">)</span>    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.fromJson(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>初始化程序的右边部分无法访问this。</p><p>开发过程中也可以使用assert进行输入验证：</p><pre class=" language-dart"><code class="language-dart">Point<span class="token punctuation">.</span><span class="token function">withAssert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'In Point.withAssert(): ($x, $y)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title="重定向构造函数"></a>重定向构造函数</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The main constructor for this class.</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Delegates to the main constructor.</span>  Point<span class="token punctuation">.</span><span class="token function">alongXAxis</span><span class="token punctuation">(</span>num x<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title="常量构造函数"></a>常量构造函数</h4><p>如果你的类提供用不改变的对象，那么你可以将那些对象设置为编译时常量。为了实现这种效果，你需要定义个常量构造函数，并且确认所有的实例变量都是final类型的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutablePoint origin <span class="token operator">=</span>      <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>常量构造函数也不总是创建常量。</p><h4 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h4><p>借助factory关键字，你不用每次创建对象的时候都创建一个新的对象，而可以从缓存中返回，或者返回一个子类型的对象。</p><p>下面是一个从缓存中返回对象的例子：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// _cache is library-private, thanks to</span>  <span class="token comment" spellcheck="true">// the _ in front of its name.</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span> _cache <span class="token operator">=</span>      <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Logger<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">factory</span> <span class="token function">Logger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      _cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> logger<span class="token punctuation">;</span>      <span class="token keyword">return</span> logger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Logger<span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>值得注意的是工厂构造函数无法访问this。</p><p>调用工厂构造方法和调用其他构造方法的方式是一样的：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">Logger</span><span class="token punctuation">(</span><span class="token string">'UI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method/方法"></a>Method/方法</h3><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="Getter / Setter"></a>Getter / Setter</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  num left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">;</span>  <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Define two calculated properties: right and bottom.</span>  num <span class="token keyword">get</span> right <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">+</span> width<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">right</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> left <span class="token operator">=</span> value <span class="token operator">-</span> width<span class="token punctuation">;</span>  num <span class="token keyword">get</span> bottom <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">+</span> height<span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token function">bottom</span><span class="token punctuation">(</span>num value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> top <span class="token operator">=</span> value <span class="token operator">-</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> rect <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>抽象方法仅存在于抽象类中；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define instance variables and methods...</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Define an abstract method.</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">EffectiveDoer</span> <span class="token keyword">extends</span> <span class="token class-name">Doer</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Provide an implementation, so the method is not abstract here...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是不可以实例化的。如果你想要你的抽象类看起来是实例化的，可以定义一个工厂构造函数。</p><p>抽象类通常都有抽象方法。</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// This class is declared abstract and thus</span><span class="token comment" spellcheck="true">// can't be instantiated.</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractContainer</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Define constructors, fields, methods...</span>  <span class="token keyword">void</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Abstract method.</span><span class="token punctuation">}</span></code></pre><h4 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h4><p>每个类都隐式定义一个接口，该接口包含该类的所有实例成员，以及其实现的任何接口；如果你想要在不继承B类实现的情况下创建支持B类API的A类，则A类应该实现B接口。</p><p>类可以通过 implements 实现一个或者多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// A person. The implicit interface contains greet().</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// In the interface, but visible only in this library.</span>  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Not in the interface, since this is a constructor.</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// In the interface.</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hello, $who. I am $_name.'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// An implementation of the Person interface.</span><span class="token keyword">class</span> <span class="token class-name">Impostor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span> _name <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">;</span>  String <span class="token function">greet</span><span class="token punctuation">(</span>String who<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Hi $who. Do you know who I am?'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>String <span class="token function">greetBob</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'Kathy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greetBob</span><span class="token punctuation">(</span><span class="token function">Impostor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现多个接口：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">,</span> Location <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="拓展一个类"><a href="#拓展一个类" class="headerlink" title="拓展一个类"></a>拓展一个类</h4><p>使用extends创建子类，使用super引用超类。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_illuminateDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_activateIrSensor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_bootNetworkInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_initializeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_upgradeApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写成员"><a href="#重写成员" class="headerlink" title="重写成员"></a>重写成员</h5><p>子类可以重写实例方法，Getter和Setter，你可以用@override表示你打算重写某个承运。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">SmartTelevision</span> <span class="token keyword">extends</span> <span class="token class-name">Television</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span></code></pre><h5 id="重写操作符"><a href="#重写操作符" class="headerlink" title="重写操作符"></a>重写操作符</h5><p>你可以重写操作符，比如你创建了一个Vector类，可以重写+操作符进行向量的加法：</p><p><code>！=</code>不可以重写，因为这只是一个语法糖。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Vector</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> int x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">+</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  Vector <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span>Vector v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Vector</span><span class="token punctuation">(</span>x <span class="token operator">-</span> v<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> v<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Operator == and hashCode not shown. For details, see note below.</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> v <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> w <span class="token operator">=</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">+</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>v <span class="token operator">-</span> w <span class="token operator">==</span> <span class="token function">Vector</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你重写 <code>==</code>那么你也得重写<code>hashCode</code></p><h5 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h5><p>为了监测和响应调用没有实现的方法或者实例变量的情况，你应该重写noSuchMethod()方法；</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Unless you override noSuchMethod, using a</span>  <span class="token comment" spellcheck="true">// non-existent member results in a NoSuchMethodError.</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">noSuchMethod</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'You tried to use a non-existent member: '</span> <span class="token operator">+</span>        <span class="token string">'${invocation.memberName}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token punctuation">}</span></code></pre><p>每个枚举类型中的值都有一个index getter，</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取枚举中所有值的列表：</p><pre class=" language-dart"><code class="language-dart">List<span class="token operator">&lt;</span>Color<span class="token operator">></span> colors <span class="token operator">=</span> Color<span class="token punctuation">.</span>values<span class="token punctuation">;</span><span class="token keyword">assert</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>用在switch流程中：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> aColor <span class="token operator">=</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>aColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>red<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Red as roses!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Green as grass!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// Without this, you see a WARNING.</span>    <span class="token function">print</span><span class="token punctuation">(</span>aColor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Color.blue'</span><span class="token punctuation">}</span></code></pre><h4 id="向class中添加特征：mixins"><a href="#向class中添加特征：mixins" class="headerlink" title="向class中添加特征：mixins"></a>向class中添加特征：mixins</h4><p>Mixins是一种在多个类层次中重用类代码的方式。</p><p>可以用with 关键字使用mixins：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Musician</span> <span class="token keyword">extends</span> <span class="token class-name">Performer</span> <span class="token keyword">with</span> Musical <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Maestro</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span>    <span class="token keyword">with</span> Musical<span class="token punctuation">,</span> Aggressive<span class="token punctuation">,</span> Demented <span class="token punctuation">{</span>  <span class="token function">Maestro</span><span class="token punctuation">(</span>String maestroName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> maestroName<span class="token punctuation">;</span>    canConduct <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了实现一个mixin，创建一个继承Object的类，不要声明构造函数，不要调用super，如：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Musical</span> <span class="token punctuation">{</span>  bool canPlayPiano <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canCompose <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  bool canConduct <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">entertainMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>canPlayPiano<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Playing piano'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canConduct<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Waving hands'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Humming to self'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Class-变量和方法"><a href="#Class-变量和方法" class="headerlink" title="Class 变量和方法"></a>Class 变量和方法</h4><p>和Java中的静态方法一样，用static表示：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">const</span> initialCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ···</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>Queue<span class="token punctuation">.</span>initialCapacity <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>静态变量使用的时候才会初始化。</p><p>静态方法：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:math'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  num x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> num <span class="token function">distanceBetween</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">var</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> distance <span class="token operator">=</span> Point<span class="token punctuation">.</span><span class="token function">distanceBetween</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">2.8</span> <span class="token operator">&lt;</span> distance <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> <span class="token number">2.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>考虑用顶层函数替代静态方法。</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>和Java一样，也都是List<E>形式的。</p><h4 id="使用集合字面量"><a href="#使用集合字面量" class="headerlink" title="使用集合字面量"></a>使用集合字面量</h4><p>List和map字面量都可以泛化：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token string">'index.html'</span><span class="token punctuation">:</span> <span class="token string">'Homepage'</span><span class="token punctuation">,</span>  <span class="token string">'robots.txt'</span><span class="token punctuation">:</span> <span class="token string">'Hints for web robots'</span><span class="token punctuation">,</span>  <span class="token string">'humans.txt'</span><span class="token punctuation">:</span> <span class="token string">'We are people, not machines'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="在构造函数中使用泛型"><a href="#在构造函数中使用泛型" class="headerlink" title="在构造函数中使用泛型"></a>在构造函数中使用泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nameSet <span class="token operator">=</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> views <span class="token operator">=</span> Map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span> View<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型集合和它们包含的类型"><a href="#泛型集合和它们包含的类型" class="headerlink" title="泛型集合和它们包含的类型"></a>泛型集合和它们包含的类型</h4><p>与Java不同，Dart中的泛型在运行时是可以携带类型信息的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> names <span class="token operator">=</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Seth'</span><span class="token punctuation">,</span> <span class="token string">'Kathy'</span><span class="token punctuation">,</span> <span class="token string">'Lars'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>names <span class="token operator">is</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h4 id="限定泛型"><a href="#限定泛型" class="headerlink" title="限定泛型"></a>限定泛型</h4><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Implementation goes here...</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Instance of 'Foo&lt;$T>'"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Extender</span> <span class="token keyword">extends</span> <span class="token class-name">SomeBaseClass</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用子类作为泛型参数</span><span class="token keyword">var</span> someBaseClassFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>SomeBaseClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> extenderFoo <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Extender<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不指定泛型也可以</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Instance of 'Foo&lt;SomeBaseClass>'</span></code></pre><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><pre class=" language-dart"><code class="language-dart">T first<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> ts<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Do some initial work or error checking, then...</span>  T tmp <span class="token operator">=</span> ts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do some additional checking or processing...</span>  <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Librarys-和它的可见性"><a href="#Librarys-和它的可见性" class="headerlink" title="Librarys 和它的可见性"></a>Librarys 和它的可见性</h3><p>可见性： _ 表示仅仅对该Library可见。</p><p>每一个Dart App都是一个Library。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'dart:html'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:test/test.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定别名</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> <span class="token operator">as</span> lib2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib1.</span>Element element1 <span class="token operator">=</span> <span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uses Element from lib2.</span>lib2<span class="token punctuation">.</span>Element element2 <span class="token operator">=</span> lib2<span class="token punctuation">.</span><span class="token function">Element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import only foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib1/lib1.dart'</span> show foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Import all names EXCEPT foo.</span><span class="token keyword">import</span> <span class="token string">'package:lib2/lib2.dart'</span> hide foo<span class="token punctuation">;</span></code></pre><h4 id="库的懒加载"><a href="#库的懒加载" class="headerlink" title="库的懒加载"></a>库的懒加载</h4><p>懒加载（延迟加载）允许app按需加载一个库。</p><p>下面是用到懒加载的一些场景：</p><ul><li>为了减少一个app的初始化启动时间</li><li>进行A/B测试</li><li>加载很少被使用的库</li></ul><p>使用方式：必须首先用deferred as</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:greetings/hello.dart'</span> <span class="token keyword">deferred</span> <span class="token operator">as</span> hello<span class="token punctuation">;</span></code></pre><p>要使用的时候，调用库的loadLibrary()方法：</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hello<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以上代码中，await表示等待hello库加载完成才继续执行。</p><p>你可以多次调用一个库的loadLibrary()方法，但是它只会被加载一次。</p><p>当你使用库的懒加载的时候，需要注意下面这些：</p><ul><li>一个懒加载库中的常量不是导入文件中的常量，在库加载之前，这些常量都不存在；</li><li>你不能在导入文件中使用懒加载库中的类型，但是，你可以考虑将接口类型移动到由懒加载库和导入文件导入的库。</li><li>Dart隐式的将loadLibrary()插入到使用deferred as namespace 定义的命名空间中，loadLibray()返回Future类型。</li></ul><p>注意：即使是在loadLibrary（）执行之前，Dart VM也允许访问懒加载库中的成员，这个特征在后面可能会变更，应该避免使用。</p><h3 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h3><p>Dart中很多函数都返回Future和Stream对象。 这些函数都是异步的。</p><p>async/await 支持你在Dart中进行异步编程。</p><p>当你使用await的时候，必须在方法外面用async包裹。</p><pre class=" language-dart"><code class="language-dart">Future <span class="token function">checkVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do something with version</span><span class="token punctuation">}</span></code></pre><p>必要的时候需要处理异常：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">try</span> <span class="token punctuation">{</span>  version <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// React to inability to look up the version</span><span class="token punctuation">}</span></code></pre><p>在异步方法中，你可以多次使用await</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">var</span> entrypoint <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findEntrypoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> exitCode <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runExecutable</span><span class="token punctuation">(</span>entrypoint<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token function">flushThenExit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h4><pre class=" language-dart"><code class="language-dart">Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">lookUpVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1.0.0'</span><span class="token punctuation">;</span></code></pre><p>如果不返回一个有用的值，可以用<code>Future&lt;void&gt;</code></p><h4 id="处理Streams"><a href="#处理Streams" class="headerlink" title="处理Streams"></a>处理Streams</h4><p>可以从Stream中获取值。</p><p>你需要用async和一个异步循环(await for)</p><p>注意：在使用await for之前，确信你知道要一直等待循环获取到所有结果。比如在处理UI事件的时候，就不应该使用这个，因为UI事件是无尽的。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>varOrType identifier <span class="token keyword">in</span> expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Executes each time the stream emits a value.</span><span class="token punctuation">}</span></code></pre><pre class=" language-dart"><code class="language-dart">Future <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">await</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> request <span class="token keyword">in</span> requestServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>你也可以用break或者return终止循环。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>当你需要laily生成一系列值，你可以使用生成器。</p><p>目前有两种生成器：</p><ul><li>同步生成器： 返回Iterable对象</li><li>异步生成器： 返回Stream对象</li></ul><p>同步生成器： 用 sync* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异步生成器： 用async* 标记方法，用yield传递值：</p><pre class=" language-dart"><code class="language-dart">Stream<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">asynchronousNaturalsTo</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>  int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token keyword">yield</span> k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你的生成器是递归的，可以用yield*提升性能：</p><pre class=" language-dart"><code class="language-dart">Iterable<span class="token operator">&lt;</span>int<span class="token operator">></span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token keyword">sync*</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> n<span class="token punctuation">;</span>    <span class="token keyword">yield*</span> <span class="token function">naturalsDownFrom</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.dartlang.org/guides/language/language-tour" target="_blank" rel="noopener">https://www.dartlang.org/guides/language/language-tour</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;重要的概念&quot;&gt;&lt;a href=&quot;#重要的概念&quot; class=&quot;headerlink&quot; title=&quot;重要的概念&quot;&gt;&lt;/a&gt;重要的概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;任何你可以放在一个变量中的都是一个object，并且每个object都是一个class的实例，甚至于数字
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="Dart" scheme="https://www.jiangkang.tech/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-实现图片圆角的几种方式</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/flutter-shi-xian-tu-pian-yuan-jiao-de-ji-chong-fang-shi/</id>
    <published>2020-05-08T13:44:09.000Z</published>
    <updated>2020-05-25T10:54:38.791Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关注 <a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a> 了解更多Flutter相关的知识</p></blockquote><p>图片圆角在开发中还是非常常见的，用Flutter实现圆角还是非常简单的，目前了解的大概有下面这几种：</p><ul><li>通过Card的shape属性</li><li>通过Container的decoration</li><li>直接使用ClipRRect</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://oss.jiangkang.tech/jk/tupianyuanjiao.png" style="zoom:50%;" /><h2 id="通过Card的shape属性"><a href="#通过Card的shape属性" class="headerlink" title="通过Card的shape属性"></a>通过Card的shape属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Card</span><span class="token punctuation">(</span>            shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            clipBehavior<span class="token punctuation">:</span> Clip<span class="token punctuation">.</span>antiAlias<span class="token punctuation">,</span>            child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span>              <span class="token string">"images/landscape0.jpeg"</span><span class="token punctuation">,</span>              width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span></code></pre><p>唯一值的注意的地方就是borderRadius看准了，不要用错了，要不然没效果。</p><h2 id="通过Container的decoration"><a href="#通过Container的decoration" class="headerlink" title="通过Container的decoration"></a>通过Container的decoration</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">Container</span><span class="token punctuation">(</span>          decoration<span class="token punctuation">:</span> <span class="token function">ShapeDecoration</span><span class="token punctuation">(</span>              image<span class="token punctuation">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>                  image<span class="token punctuation">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/landscape1.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  fit<span class="token punctuation">:</span> BoxFit<span class="token punctuation">.</span>fitWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>              shape<span class="token punctuation">:</span> <span class="token function">RoundedRectangleBorder</span><span class="token punctuation">(</span>                  borderRadius<span class="token punctuation">:</span> BorderRadiusDirectional<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          width<span class="token punctuation">:</span> double<span class="token punctuation">.</span>maxFinite<span class="token punctuation">,</span>          height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>          child<span class="token punctuation">:</span> <span class="token function">Align</span><span class="token punctuation">(</span>            child<span class="token punctuation">:</span> <span class="token function">Padding</span><span class="token punctuation">(</span>              padding<span class="token punctuation">:</span> <span class="token keyword">const</span> EdgeInsets<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">"Container decoration实现圆角(radius = 20)"</span><span class="token punctuation">,</span>                style<span class="token punctuation">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            alignment<span class="token punctuation">:</span> Alignment<span class="token punctuation">.</span>bottomCenter<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span></code></pre><p>使用的DecorationImage，相当于把图片当做一个背景，这里需要注意的就是Container的child的尺寸问题，就算不放内容，也需要设置一个带尺寸的child Widget。</p><h2 id="直接使用ClipRRect"><a href="#直接使用ClipRRect" class="headerlink" title="直接使用ClipRRect"></a>直接使用ClipRRect</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">ClipRRect</span><span class="token punctuation">(</span>              borderRadius<span class="token punctuation">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> Image<span class="token punctuation">.</span><span class="token function">asset</span><span class="token punctuation">(</span><span class="token string">"images/landscape2.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>这种方式是最简单的，直接使用即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关注 &lt;a href=&quot;https://github.com/jiangkang/flutter-system&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jiangkang/flutter
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="圆角" scheme="https://www.jiangkang.tech/tags/%E5%9C%86%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>Flutter深色模式</title>
    <link href="https://www.jiangkang.tech/2020/05/08/flutter/flutter-shen-se-mo-shi/"/>
    <id>https://www.jiangkang.tech/2020/05/08/flutter/flutter-shen-se-mo-shi/</id>
    <published>2020-05-08T13:41:00.000Z</published>
    <updated>2020-05-25T10:54:38.825Z</updated>
    
    <content type="html"><![CDATA[<p>这些年，移动端UI的深色模式还是比较常见你的，IOS在系统级别已经率先支持了，Flutter作为一款优秀的跨端UI框架，在处理深色模式上是比较简单的。</p><img src="https://oss.jiangkang.tech/jk/shense.gif" style="zoom:50%;" /><h2 id="Brightness"><a href="#Brightness" class="headerlink" title="Brightness"></a>Brightness</h2><p>Flutter中有一个Brightness的概念，用来表示主题和颜色的亮暗模式。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">enum</span> Brightness <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The color is dark and will require a light text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be dark grey, requiring white text.</span>  dark<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/// The color is light and will require a dark text color to achieve readable</span>  <span class="token comment" spellcheck="true">/// contrast.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// For example, the color might be bright white, requiring black text.</span>  light<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Flutter针对主题也提供了封装：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">factory</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">ThemeData</span><span class="token punctuation">(</span>brightness<span class="token punctuation">:</span> Brightness<span class="token punctuation">.</span>dark<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问方式如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> lightTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> dartTheme <span class="token operator">=</span> ThemeData<span class="token punctuation">.</span><span class="token function">dark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们首先想一下，要实现一个切换深色主题的功能的步骤是什么？</p><ol><li>设置页：进行浅色/深色模式切换，并进行持久化，以便app重启之后还是生效的；</li><li>App：启动的时候获取持久化的浅色/深色模式，并应用到app的主题上；</li><li>切换时实时刷新主题的深浅模式；</li></ol><h2 id="1-进行深浅色模式的切换"><a href="#1-进行深浅色模式的切换" class="headerlink" title="1. 进行深浅色模式的切换"></a>1. 进行深浅色模式的切换</h2><img src="https://oss.jiangkang.tech/jk/shense2.png" style="zoom:50%;" /><p>这里使用SharedPreferences来进行持久化，代码比较简单：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/constants/const_key_value.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/theme/custom_themes.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter_system/utils/sp_utils.dart'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:provider/provider.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 设置页</span><span class="token keyword">class</span> <span class="token class-name">SettingsPage</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  _SettingsPageState <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_SettingsPageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">_SettingsPageState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>SettingsPage<span class="token operator">></span> <span class="token punctuation">{</span>  bool _isDarkMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _isDarkMode <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"设置页"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        centerTitle<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">SafeArea</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">ListView</span><span class="token punctuation">(</span>        children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">SwitchListTile</span><span class="token punctuation">(</span>            title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"深色模式"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> _isDarkMode<span class="token punctuation">,</span>            onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SpUtils<span class="token punctuation">.</span><span class="token function">saveBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                _isDarkMode <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>newValue <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            activeColor<span class="token punctuation">:</span> Theme<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>accentColor<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="App启动时获取持久化的深浅色模式"><a href="#App启动时获取持久化的深浅色模式" class="headerlink" title="App启动时获取持久化的深浅色模式"></a>App启动时获取持久化的深浅色模式</h2><pre class=" language-dart"><code class="language-dart">SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="深浅色模式改变时，实时刷新APP"><a href="#深浅色模式改变时，实时刷新APP" class="headerlink" title="深浅色模式改变时，实时刷新APP"></a>深浅色模式改变时，实时刷新APP</h2><p>从前面的两段代码可以看出，我们使用了Provider。</p><p>这里我们可以把Provider当做一个单例模式，一处改变，全局生效。</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">_MyAppState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>MyApp<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token metadata symbol">@override</span>  <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpUtils<span class="token punctuation">.</span><span class="token function">getBool</span><span class="token punctuation">(</span>keyIsDarkMode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listen<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCurrentTheme</span><span class="token punctuation">(</span>value <span class="token operator">?</span> dartTheme <span class="token punctuation">:</span> lightTheme<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token metadata symbol">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> themeProvider <span class="token operator">=</span> Provider<span class="token punctuation">.</span>of<span class="token operator">&lt;</span>ThemesNotifier<span class="token operator">></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Flutter System'</span><span class="token punctuation">,</span>      theme<span class="token punctuation">:</span> themeProvider<span class="token operator">?</span><span class="token punctuation">.</span>currentTheme <span class="token operator">?</span><span class="token operator">?</span> lightTheme<span class="token punctuation">,</span>      debugShowCheckedModeBanner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      routes<span class="token punctuation">:</span> pageRouters<span class="token punctuation">,</span>      localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>        S<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalMaterialLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>        GlobalWidgetsLocalizations<span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      supportedLocales<span class="token punctuation">:</span> S<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>supportedLocales<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这些年，移动端UI的深色模式还是比较常见你的，IOS在系统级别已经率先支持了，Flutter作为一款优秀的跨端UI框架，在处理深色模式上是比较简单的。&lt;/p&gt;
&lt;img src=&quot;https://oss.jiangkang.tech/jk/shense.gif&quot; style
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/tags/Flutter/"/>
    
      <category term="深色模式" scheme="https://www.jiangkang.tech/tags/%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的init方法</title>
    <link href="https://www.jiangkang.tech/2020/05/08/golang/golang-zhong-de-init-fang-fa/"/>
    <id>https://www.jiangkang.tech/2020/05/08/golang/golang-zhong-de-init-fang-fa/</id>
    <published>2020-05-08T10:40:36.000Z</published>
    <updated>2020-05-08T10:41:16.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init方法是什么"><a href="#init方法是什么" class="headerlink" title="init方法是什么"></a><code>init</code>方法是什么</h2><p>我们都知道程序的入口在main包下的<code>main()</code>方法,其实还有一个方法会在<code>main</code>方法之前执行,这个方法就是<code>init()</code></p><p><code>init()</code>方法用于package级别的一些初始化操作.</p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li><code>init</code>先于<code>main</code>自动执行,不能被其他函数调用</li><li><code>init</code>方法没有输入参数和返回值</li><li>每个package可以有多个<code>init</code>方法</li><li>package下的每个源文件可以有多个<code>init</code>方法</li><li>同一个package下的<code>init</code> 方法执行顺序不确定,不要存在依赖关系</li><li>不同package的<code>init</code>方法的执行顺序由package依赖关系确定(没有依赖的package最先执行)</li></ul><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><p>需要注意的地方就是,想要让<code>init</code>方法起作用,你必须要导入对应的package,但是如果你只想使用<code>init</code>方法,不想使用包里的其他方法,这个时候就需要无副作用的导入了:</p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/jiangkang/JustGo/basic"</span>    <span class="token boolean">_</span> <span class="token string">"net/http"</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;init方法是什么&quot;&gt;&lt;a href=&quot;#init方法是什么&quot; class=&quot;headerlink&quot; title=&quot;init方法是什么&quot;&gt;&lt;/a&gt;&lt;code&gt;init&lt;/code&gt;方法是什么&lt;/h2&gt;&lt;p&gt;我们都知道程序的入口在main包下的&lt;code&gt;main(
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://www.jiangkang.tech/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://www.jiangkang.tech/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Android中的存储路径</title>
    <link href="https://www.jiangkang.tech/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/"/>
    <id>https://www.jiangkang.tech/2020/05/08/android/android-zhong-de-cun-chu-lu-jing/</id>
    <published>2020-05-08T10:36:51.000Z</published>
    <updated>2020-05-08T10:37:30.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储数据的几种方式"><a href="#存储数据的几种方式" class="headerlink" title="存储数据的几种方式"></a>存储数据的几种方式</h2><ul><li><p>应用专属存储空间</p><p>应用专属空间里的数据会在应用被卸载的时候删除，清除缓存通常指的是清除缓存文件下的文件，清空数据则是清空所有cache，files下文件，如果想让其他APP可以访问这些私有数据，可以利用FileProvider。</p><ul><li><p>内部存储</p><p>大多是通过Context获取的地址，一般在/data/data文件夹下，如</p><ul><li>dataDir: /data/data/packagename</li><li>filesDir: /data/data/packagename/files</li><li>cacheDir: /data/data/packagename/cache</li><li>codeCacheDir:/data/data/packagename/code_cache</li></ul></li><li><p>外部存储</p><p>可以通过Context获取，也可以通过Environment获取，一般在/storage/emulated/0/Android/data/pacakagename/，如：</p><ul><li>externalCacheDir：/storage/emulated/0/Android/data/pacakagename/cache</li><li>getExternalFilesDir:/storage/emulated/0/Android/data/pacakagename/files</li><li>externalMediaDirs</li></ul></li><li><p>SharedPreference</p></li><li><p>本地数据库</p></li></ul></li><li><p>共享的存储空间</p><p>可以被其他APP访问的数据，app卸载不会被删除,通常位于/storage/emulated/0下(除了/storage/emulated/0/Android/data/pacakagename)。</p><ul><li><p>media files</p><p>可以通过 MediaStore处理</p></li><li><p>文档和其他文件</p><p>可以通过ContentResolver和其他相关方法处理</p></li></ul></li></ul><h2 id="几个容易混淆的地方"><a href="#几个容易混淆的地方" class="headerlink" title="几个容易混淆的地方"></a>几个容易混淆的地方</h2><h3 id="data-data-vs-data-user-0"><a href="#data-data-vs-data-user-0" class="headerlink" title="/data/data vs /data/user/0"></a>/data/data vs /data/user/0</h3><h3 id="Android-data-vs-Android-user-0"><a href="#Android-data-vs-Android-user-0" class="headerlink" title="/Android/data vs /Android/user/0"></a>/Android/data vs /Android/user/0</h3><p>现在的手机操作系统多是支持多用户的，最常见的就是“访客模式”，通常情况下，/data/data 与 /data/user/0是等价的，对于不同的用户，实际的存储位置可能是/user/xxx,但是我们通常只需要访问/data/data即可。</p><h3 id="mnt-sdcard-vs-sdcard-vs-storage-sdcard0"><a href="#mnt-sdcard-vs-sdcard-vs-storage-sdcard0" class="headerlink" title="/mnt/sdcard vs /sdcard  vs /storage/sdcard0"></a>/mnt/sdcard vs /sdcard  vs /storage/sdcard0</h3><p> 这个其实就是“软链接”的区别，可以通过 <code>ls -l</code>命令查看：</p><pre class=" language-bash"><code class="language-bash">storage/sdcard0 -<span class="token operator">></span> /sdcardmnt/sdcard -<span class="token operator">></span> /storage/self/primarysdcard -<span class="token operator">></span> /storage/self/primary</code></pre><p>可以看到这几个地址的真实地址实际上都是/storage/self/primary。</p><h3 id="storage-emulated-0"><a href="#storage-emulated-0" class="headerlink" title="/storage/emulated/0"></a>/storage/emulated/0</h3><p>共享的存储空间的根目录，其中0代表的是主存，如果有移动的存储空间，如外接SD卡，则会有其他数字。</p><p>可通过下列方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在Android Q之后，这个方法标记废弃，可以使用</p><pre class=" language-java"><code class="language-java">Context#<span class="token function">getExternalFilesDir</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span></code></pre><p>或者<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>等方法作为替代。</p><p>该目录下在没有被app污染时，通常有以下这些子目录：</p><pre><code>Alarms Android DCIM Download Movies Music Notifications Pictures Podcasts Ringtones</code></pre><p>对于具体的子目录，可以通过以下方法获取：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span>getExternalStoragePublicDirectory</code></pre><p>Android Q之后，可用上面说的<code>Context#getExternalFilesDir(String)</code>，<code>MediaStore</code>，<code>Intent#ACTION_OPEN_DOCUMENT</code>替代。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;存储数据的几种方式&quot;&gt;&lt;a href=&quot;#存储数据的几种方式&quot; class=&quot;headerlink&quot; title=&quot;存储数据的几种方式&quot;&gt;&lt;/a&gt;存储数据的几种方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用专属存储空间&lt;/p&gt;
&lt;p&gt;应用专属空间里的数据会在应用被卸载
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="存储" scheme="https://www.jiangkang.tech/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="Android" scheme="https://www.jiangkang.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>初识SDL</title>
    <link href="https://www.jiangkang.tech/2020/05/08/c/chu-shi-sdl/"/>
    <id>https://www.jiangkang.tech/2020/05/08/c/chu-shi-sdl/</id>
    <published>2020-05-08T10:34:02.000Z</published>
    <updated>2020-05-23T09:51:31.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SDL是什么"><a href="#SDL是什么" class="headerlink" title="SDL是什么"></a>SDL是什么</h2><p>Simple DirectMedia Layer 是一个跨平台的开发库,它提供了对音频,键盘,鼠标,游戏手柄的底层访问接口.以及通过OpenGL或者Direct3D控制图形硬件的接口.</p><p>目前支持以下平台:</p><ul><li><p>Windows </p></li><li><p>Linux</p></li><li><p>Android</p></li><li><p>IOS</p></li><li><p>MacOS</p></li></ul><h2 id="SDL可以做什么"><a href="#SDL可以做什么" class="headerlink" title="SDL可以做什么"></a>SDL可以做什么</h2><ul><li><p>视频播放器</p></li><li><p>音频处理</p></li><li><p>输入事件处理,比如键盘,鼠标等</p></li><li><p>文件I/O</p></li><li><p>线程,定时器等其余功能</p></li></ul><h2 id="SDL的核心架构"><a href="#SDL的核心架构" class="headerlink" title="SDL的核心架构"></a>SDL的核心架构</h2><h3 id="几个子系统"><a href="#几个子系统" class="headerlink" title="几个子系统"></a>几个子系统</h3><ul><li><p>Video:图像控制以及线程和事件管理</p></li><li><p>Audio:声音控制</p></li><li><p>Joystick: 游戏摇杆控制</p></li><li><p>Window: 视窗管理与集成</p></li><li><p>Event: 事件驱动处理</p></li><li><p>Haptic: 触摸事件处理</p></li><li><p>Timer : 时间,计时器管理</p></li></ul><p>SDL本身其实不复杂,甚至有些简陋,单靠SDL你是无法实现一个完善的产品的,往往都需要其他功能库的支持.比如SDL广泛用于音视频播放器开发,但是SDL很多时候只是作为一个跨平台,Window的集成功能,而视频编解码则是通过其他功能库,如FFMPEG等处理的.</p><p>所以,SDL核心之一就是<strong>跨平台</strong>.</p><p>想一个问题,如何将一幅图像显示到屏幕上,我们知道视频其实是有一帧帧的图像数据组成,解决了图像显示到屏幕上的问题就解决了大部分问题.首先我们得从固定格式的图像中,比如JPEG,PNG等格式中解析出原始的图像数据,然后利用OPenGL操作GPU进行处理,经过渲染管线处理,形成像素数据存储到内存中,显示器按照刷新率刷新时,将像素数据映射到屏幕上,形成了我们看到的图像.</p><p>而SDL主要做两件事,一个就是<strong>加载各种格式的图像数据</strong>,一个就是<strong>封装OpenGL或者Direct3D API,更简单的渲染</strong></p><p>还有一个就是<strong>视窗管理与集成</strong>,这个功能也有一些其他的代替库,比如GLFW之类的.</p><h3 id="拓展模块"><a href="#拓展模块" class="headerlink" title="拓展模块"></a>拓展模块</h3><ul><li>SDL_image : 各种图像格式解析与载入,如png,jpeg等</li><li>SDL_mixer : 声音输出方法和声音格式支持,比如mp3,ogg等</li><li>SDL_net : 网络支持</li><li>SDL_ttf : TrueType字体渲染支持</li><li>SDL_rtf: RTF渲染支持</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SDL是什么&quot;&gt;&lt;a href=&quot;#SDL是什么&quot; class=&quot;headerlink&quot; title=&quot;SDL是什么&quot;&gt;&lt;/a&gt;SDL是什么&lt;/h2&gt;&lt;p&gt;Simple DirectMedia Layer 是一个跨平台的开发库,它提供了对音频,键盘,鼠标,游戏手柄
      
    
    </summary>
    
    
      <category term="C++" scheme="https://www.jiangkang.tech/categories/C/"/>
    
    
      <category term="SDL" scheme="https://www.jiangkang.tech/tags/SDL/"/>
    
  </entry>
  
</feed>
