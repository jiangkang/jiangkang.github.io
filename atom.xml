<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姜康的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jiangkang.tech/"/>
  <updated>2020-11-12T13:41:58.901Z</updated>
  <id>https://www.jiangkang.tech/</id>
  
  <author>
    <name>姜康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter-从Widget导出图片</title>
    <link href="https://www.jiangkang.tech/2020/11/12/flutter/flutter-cong-widget-dao-chu-tu-pian/"/>
    <id>https://www.jiangkang.tech/2020/11/12/flutter/flutter-cong-widget-dao-chu-tu-pian/</id>
    <published>2020-11-12T13:39:34.000Z</published>
    <updated>2020-11-12T13:41:58.901Z</updated>
    
    <content type="html"><![CDATA[<p>在Android中从View中导出图片,使用的是Canvas + Bitmap.</p><p>在Flutter中,同样支持这种功能,使用的是<code>RepaintBoundary</code></p><h2 id="使用RepaintBoundary包装Widget"><a href="#使用RepaintBoundary包装Widget" class="headerlink" title="使用RepaintBoundary包装Widget"></a>使用<code>RepaintBoundary</code>包装Widget</h2><pre class=" language-dart"><code class="language-dart"><span class="token function">RepaintBoundary</span><span class="token punctuation">(</span>                  key<span class="token punctuation">:</span> _globalKey<span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>                    width<span class="token punctuation">:</span> _width<span class="token punctuation">,</span>                    height<span class="token punctuation">:</span> _height<span class="token punctuation">,</span>                    color<span class="token punctuation">:</span> _color<span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span></code></pre><h2 id="导出图片"><a href="#导出图片" class="headerlink" title="导出图片"></a>导出图片</h2><pre class=" language-dart"><code class="language-dart">RenderRepaintBoundary boundary <span class="token operator">=</span> _globalKey<span class="token punctuation">.</span>currentContext<span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> image <span class="token operator">=</span> <span class="token keyword">await</span> boundary<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ByteData byteData <span class="token operator">=</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">toByteData</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> ImageByteFormat<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">;</span>Uint8List pngBytes <span class="token operator">=</span> byteData<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">asUint8List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 显示图片</span><span class="token function">showDialog</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> context<span class="token punctuation">,</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Image<span class="token punctuation">.</span><span class="token function">memory</span><span class="token punctuation">(</span>pngBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Android中从View中导出图片,使用的是Canvas + Bitmap.&lt;/p&gt;
&lt;p&gt;在Flutter中,同样支持这种功能,使用的是&lt;code&gt;RepaintBoundary&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用RepaintBoundary包装Widget
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Widget" scheme="https://www.jiangkang.tech/tags/Widget/"/>
    
      <category term="RepaintBoundary" scheme="https://www.jiangkang.tech/tags/RepaintBoundary/"/>
    
  </entry>
  
  <entry>
    <title>Glide原理分析</title>
    <link href="https://www.jiangkang.tech/2020/11/03/android/glide-yuan-li-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/11/03/android/glide-yuan-li-fen-xi/</id>
    <published>2020-11-03T15:47:22.000Z</published>
    <updated>2020-11-03T15:48:29.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个图片加载库应该具备的功能"><a href="#一个图片加载库应该具备的功能" class="headerlink" title="一个图片加载库应该具备的功能"></a>一个图片加载库应该具备的功能</h2><ul><li>图片下载</li><li>各种格式图片编解码</li><li>图片显示</li><li>缓存</li><li>图像处理:圆角,色调,调整大小等等</li></ul><p>现在分析下Glide是如何实现这个图片加载库的,先来看一下Glide的主要模型</p><h2 id="Glide内部模型"><a href="#Glide内部模型" class="headerlink" title="Glide内部模型"></a>Glide内部模型</h2><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><p>Glide可以将一个<code>Resource</code>加载到<code>Target</code>中,并在加载过程中通知相关生命周期事件.</p><p>生命周期基本上是下面这个步骤:</p><ol><li>onLoadStarted</li><li>onResourceReady / onLoadFailed</li><li>onLoadCleared</li></ol><p>但是这些步骤也不是绝对的.</p><p>如果resource在内存中或者model对象为null时,onLoadStarted不会被调用.</p><p>如果target不会被cleared,onLoadCleared也不会被调用.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// R表示 target可以显示的resource类型,比如Target是ImageView ,Resource类型是Bitmap</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LifecycleListener</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> SIZE_ORIGINAL <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadStarted</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable placeholder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable errorDrawable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// R在这里使用</span>  <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> R resource<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Transition<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> transition<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">onLoadCleared</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable placeholder<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取target的size</span>  <span class="token keyword">void</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> SizeReadyCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">removeCallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> SizeReadyCallback cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Request request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  Request <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用得最多的就是ImageViewTarget了.ImageViewTarget是一个抽象类,它定义了一个抽象方法用于设置具体的资源:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Z resource<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它的子类就可以实现各自的资源设置方法,比如setBitmapResource(),setDrawable()之类的.</p><p>对于ViewTarget来说,会使用<code>View#setTag()</code>和<code>View#getTagId()</code>方法在<code>RecyclerView</code>或者其他<code>ViewGroup</code>下存储一些信息,解决复用问题.</p><p>ViewTarget中有一个方法<code>getSize()</code>,利用了<code>ViewTreeObserver.OnPreDrawListener</code>时机去获取尺寸.</p><p>目前源码中很多Target已经废弃,不推荐继承了,原因是因为<code>onLoadCleared()</code>,在使用资源的时候如果不clear()很容易导致问题.</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>表示 加载Resource到Target的过程.</p><p>RequestBuilder: 可以自定义各种属性,相当于Request的配置信息;</p><p>RequestManager: 创建和管理Request</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>在Glide中比较常见的是:</p><ul><li>Bitmap</li><li>Drawable</li><li>File</li></ul><p>一个资源接口,用于包装资源以便于“池化”和重用.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Z是被包装的资源类</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resource</span><span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@NonNull</span>  Class<span class="token operator">&lt;</span>Z<span class="token operator">></span> <span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@NonNull</span>  Z <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比如BitmapResource:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitmapResource</span> <span class="token keyword">implements</span> <span class="token class-name">Resource</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">,</span> Initializable <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Bitmap bitmap<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> BitmapPool bitmapPool<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> BitmapResource <span class="token function">obtain</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bitmap bitmap<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> BitmapPool bitmapPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitmap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BitmapResource</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> bitmapPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">BitmapResource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Bitmap bitmap<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> BitmapPool bitmapPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token string">"Bitmap must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bitmapPool <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>bitmapPool<span class="token punctuation">,</span> <span class="token string">"BitmapPool must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Class<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> <span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Bitmap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Bitmap <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Util<span class="token punctuation">.</span><span class="token function">getBitmapByteSize</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bitmapPool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bitmap<span class="token punctuation">.</span><span class="token function">prepareToDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用了BitmapPool进行“池化”和回收.</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>不知道怎么描述,可以是下面这些:</p><ul><li>定义的实体类,比如UserInfo,这其中包含了图片url</li><li>一个简单的url</li><li>File</li><li>Uri</li><li>资源ID</li></ul><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>一般都是<code>InputStream</code>,也可以是File,也可以是byte[].</p><h3 id="Model-Data-Resource"><a href="#Model-Data-Resource" class="headerlink" title="Model/Data/Resource"></a>Model/Data/Resource</h3><p><code>ModelLoader</code> : 从Model 获取 Data</p><p><code>DataFetcher</code>: 使用Data,以传递给其他模块进行下一步处理</p><p><code>ResourceDecoder</code>: 将 Data 解码成 Resource</p><h3 id="ResourceDecoder"><a href="#ResourceDecoder" class="headerlink" title="ResourceDecoder"></a>ResourceDecoder</h3><p>将 Data 解码 成 Resource , 比如将InputStream解码成Bitmap</p><h3 id="ResourceEncoder"><a href="#ResourceEncoder" class="headerlink" title="ResourceEncoder"></a>ResourceEncoder</h3><p>从Resource中取出Data,然后写入到一些持久化的数据存储中</p><p>比如 从Bitmap从取出字节流 ,写入到本地文件中.</p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><p>对Resource进行变换处理,即通常说的图片处理:</p><ul><li>CenterInside</li><li>CenterCrop</li><li>CircleCrop</li><li>FitCenter</li><li>Rotate</li><li>RoundedCorners</li><li>GranularRoundedCorners</li></ul><p>与 <code>ResourcTranscoder</code>在概念上的区别主要是:</p><ul><li>Transformation不改变Resource的类型</li><li>ResourceTranscoder改变资源的类型</li></ul><h3 id="ResourceTranscoder"><a href="#ResourceTranscoder" class="headerlink" title="ResourceTranscoder"></a>ResourceTranscoder</h3><p>将一种Resource转换成另一种Resource.</p><p>比如将Bitmap转换成Drawable,将Bitmap转换成byte[]等等.</p><h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Glide内部组件管理,像上面的ModelLoader,Encoder,Decoder在Registry中都有各自实现的Registry以进行注册和管理.</p><p>比如ResourceDecoderRegistry.</p><hr><p>看完了模型定义,再来看图片库的功能.</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Android端目前网络请求基本上都是使用的OkHttp,我们使用Glide的时候一般也会使用OkHttp作为网络库.</p><p>在<code>OkHttpStreamFetcher</code>中有:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@NonNull</span> Priority priority<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> DataCallback<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> InputStream<span class="token operator">></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Request<span class="token punctuation">.</span>Builder requestBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toStringUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// http header</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerEntry <span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String key <span class="token operator">=</span> headerEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> headerEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Request request <span class="token operator">=</span> requestBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>    call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异步请求</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>请求成功之后,会得到一个InputStream:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Call call<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成功回调</span>    responseBody <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 图片大小</span>      <span class="token keyword">long</span> contentLength <span class="token operator">=</span> Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取InputStream，并传递给其他模块处理</span>      stream <span class="token operator">=</span> ContentLengthInputStream<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">.</span><span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>      callback<span class="token punctuation">.</span><span class="token function">onDataReady</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      callback<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>这里将InputStream包装到ContentLengthInputStream中.</p><p>然后就是对InputStream中的字节流进行解码了.</p><h2 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h2><p>对字节流解码的操作在<code>DecodeJob</code>中,这里的调用链比较长,具体的代码就不贴出来了.</p><p>这里涉及的Decoder比较多,Glide会根据不同的图片格式使用不同的Decoder进行解码:</p><table><thead><tr><th>解码器</th><th>说明(—&gt; 表示解码成)</th></tr></thead><tbody><tr><td>StreamGifDecoder</td><td>InputStream —&gt; ByteArray —&gt;  GifDrawable</td></tr><tr><td>InputStreamBitmapImageDecoderResourceDecoder</td><td>InputStream —&gt; Bitmap</td></tr><tr><td>ByteBufferBitmapDecoder</td><td>ByteBuffer —&gt; Bitmap</td></tr><tr><td>ResourceBitmapDecoder</td><td>Uri —&gt; Bitmap</td></tr><tr><td>UnitDrawableDecoder</td><td>Drawable —&gt; Drawable</td></tr><tr><td>ByteBufferGifDecoder</td><td>ByteBuffer —&gt; GifDrawable</td></tr><tr><td>UnitBitmapDecoder</td><td>Bitmap —&gt; Bitmap</td></tr><tr><td>GifFrameResourceDecoder</td><td>Gif Frame  —&gt; Bitmap</td></tr><tr><td>ParcelFileDescriptorBitmapDecoder</td><td>ParcelFileDescriptor —&gt; Bitmap</td></tr><tr><td>FileDecoder</td><td>File —&gt; File</td></tr><tr><td>SvgDecoder</td><td>InputStream —&gt; Svg</td></tr><tr><td>StreamBitmapDecoder</td><td>InputStream —&gt; Bitmap</td></tr><tr><td>ByteBufferBitmapImageDecoderResourceDecoder</td><td>ByteBuffer —&gt; Bitmap</td></tr><tr><td>VideoDecoder</td><td>Video Frame —&gt; Bitmap</td></tr><tr><td>ResourceDrawableDecoder</td><td>Uri —&gt; Drawable</td></tr></tbody></table><p>解码完成之后,就是资源类型之间的转换了:</p><table><thead><tr><th>Transcoder</th><th>说明</th></tr></thead><tbody><tr><td>BitmapDrawableTranscoder</td><td>Bitmap —&gt; BitmapDrawable</td></tr><tr><td>SvgDrawableTranscoder</td><td>SVG. —&gt; Picture</td></tr><tr><td>GifDrawableBytesTranscoder</td><td>GifDrawable —&gt; byte[]</td></tr><tr><td>BitmapBytesTranscoder</td><td>Bitmap —&gt; byte[]</td></tr><tr><td>DrawableBytesTranscoder</td><td>Drawable —&gt; byte[]</td></tr></tbody></table><p>像一般的图片显示,用到的是<code>StreamBitmapDecoder</code>,而它的解码实际上通过<code>Downsampler</code>进行的,经过一系列的处理,比如获取图片宽高,缩放,旋转等,最后还是我们熟悉的API:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Bitmap <span class="token function">decodeBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span>Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">return</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>dataRewinder<span class="token punctuation">.</span><span class="token function">rewindAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bitmap <span class="token function">decodeBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span>Options options<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token keyword">return</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>          dataRewinder<span class="token punctuation">.</span><span class="token function">rewindAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><p>其实就是上面说到的Target,目前最常见的就是ViewTarget,ImageViewTarget.</p><p>在Target中调用系统的API,比如<code>setBitmapResource()</code>等进行设置显示图片:</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDrawable</span><span class="token punctuation">(</span>Drawable drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    view<span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>以及生命周期的管理.</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>在查看缓存策略之前,先看一下数据源的定义:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> DataSource <span class="token punctuation">{</span>  LOCAL<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数据可能是从本地设备获取的,即使是通过ContentProvider从其他远程源获取的 </span>  REMOTE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 从远程获取的</span>  DATA_DISK_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 从设备缓存获取的未修改数据</span>  RESOURCE_DISK_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设备缓存的修改数据</span>  MEMORY_CACHE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 内存缓存</span><span class="token punctuation">}</span></code></pre><p>缓存策略定义在<code>DiskCacheStrategy</code>中,分为以下几种:</p><ul><li><p>DiskCacheStrategy.ALL</p><p>缓存远程Data和Resource,以及本地的Resource</p></li><li><p>DiskCacheStrategy.NONE</p><p>不缓存</p></li><li><p>DiskCacheStrategy.DATA</p><p>在Data解码之前直接写到磁盘缓存</p></li><li><p>DiskCacheStrategy.RESOURCE</p><p>将解码后的Resourc写入到磁盘缓存</p></li><li><p>DiskCacheStrategy.AUTOMATIC</p><p>自动选择</p></li></ul><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p><code>Transformation</code>中定义:</p><ul><li>CenterInside</li><li>CenterCrop</li><li>CircleCrop</li><li>FitCenter</li><li>Rotate</li><li>RoundedCorners</li><li>GranularRoundedCorners</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Glide软件模型比较清晰,代码结构也是严格按照这个模型来实现的;</li><li>图片加载的基本过程大同小异,但是期间也存在多处优化,比如内存占用方面的优化</li><li>生命周期的处理上,Glide自己用了回调参数去处理,其实如果集成了AndroidX Lifecycle的话,结构会更加清晰</li><li>Glide结构虽然清晰,但是代码量其实很大的,很多细节之处并没有分析(分析起来估计得花不少时间)</li><li>后面会分析的有: Bitmap复用机制,图片缓存机制,编解码实际流程,不同类型图片的处理异同</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个图片加载库应该具备的功能&quot;&gt;&lt;a href=&quot;#一个图片加载库应该具备的功能&quot; class=&quot;headerlink&quot; title=&quot;一个图片加载库应该具备的功能&quot;&gt;&lt;/a&gt;一个图片加载库应该具备的功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;图片下载&lt;/li&gt;
&lt;li&gt;各种
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Glide" scheme="https://www.jiangkang.tech/tags/Glide/"/>
    
      <category term="图片加载库" scheme="https://www.jiangkang.tech/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>GC与Reference</title>
    <link href="https://www.jiangkang.tech/2020/11/02/android/gc-yu-reference/"/>
    <id>https://www.jiangkang.tech/2020/11/02/android/gc-yu-reference/</id>
    <published>2020-11-02T13:24:25.000Z</published>
    <updated>2020-11-02T13:25:44.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li><p>SoftReference</p><p>普通的GC不会回收软引用,只有在即将发生OOM的时候(即最后一次Full GC),如果被引用的对象只有SoftReference指向的引用,才会被回收.</p></li><li><p>WeakReference</p><p>当发生GC时,如果被引用的对象只有WeakReference指向的引用,就会被回收</p></li><li><p>PhantomReference</p><p>不能通过虚引用获取到其关联的对象,但是当GC发生时,如果其引用的对象被回收,这个事件是可以感知的,这样就可以做相应的处理.</p></li><li><p>强引用</p></li></ul><p>GC是如何决定一个对象是否被回收?</p><p>从GC Root开始向下搜索,如果对象与GC之间存在引用链,则对象是可达的(reachable),GC会根据是否可达,以及对象的可达性来决定对象是否可以被回收.</p><p>而对象的可达性与引用类型相关:</p><ul><li>强可达</li><li>软可达</li><li>虚可达</li><li>弱可达</li><li>不可达</li></ul><h2 id="Refercence的几种状态"><a href="#Refercence的几种状态" class="headerlink" title="Refercence的几种状态"></a>Refercence的几种状态</h2><p>一个Reference对象可能处于以下4种状态中的一种:</p><ul><li><p>Active</p><p>新创建的对象都是处于这个状态;</p><p>GC检测到引用的对象可达性改变时,会将状态转变成Pending或者Inactiive(如果refercence创建时带了referenceQueue,则会将refercence加入到pending 引用队列中)</p><pre><code>queue = 如果创建Refercence时注册了queue,则对应那个queue,如果没有,则为RefercenceQueue.NULLnext = null</code></pre></li><li><p>Pending</p><p>马上要被放进队列中的对象,即即将被回收的对象</p><p>pending引用队列中的一个元素,等着被ReferenceHandler线程(一个守护线程)去enqueue.</p><p>没有注册(即创建时没有带queue的)的对象不会处于这个状态;</p><pre><code>queue = 注册时的RefercenceQueuenext = this</code></pre></li><li><p>Enqueued</p><p>对象的内存已经被回收了,已经把这个对象放到了一个队列中</p><p>当一个对象从它的引用队列中移除时,它就是Inactive状态了,未注册的对象不会处于这个状态;</p><pre><code>queue = RefercenceQueue.ENQUEUEDnext = queue中下一个对象,或者this(这是最后一个元素)</code></pre></li><li><p>Inactive</p><p>最终状态,不会再改变了.</p><pre><code>queue = RefercenceQueue.NULLnext = this</code></pre></li></ul><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>JVM在进行GC的时候,如果当前对象只被Reference对象引用,JVM会根据Reference的具体类型和堆内存的使用情况来决定:</p><p>是否把对应的Reference对象加入到一个由Reference构成的pending链表上(即Refercence中的next属性).</p><p>如果能加入到pending链表上,则JVM会同时通知ReferenceHandler线程进行处理.</p><p>ReferenceHandler线程是在Reference初始化的时候创建的,它是一个守护线程,并拥有最高优先级:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ThreadGroup tg <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ThreadGroup tgn <span class="token operator">=</span> tg<span class="token punctuation">;</span>             tgn <span class="token operator">!=</span> null<span class="token punctuation">;</span>             tg <span class="token operator">=</span> tgn<span class="token punctuation">,</span> tgn <span class="token operator">=</span> tg<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceHandler</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> <span class="token string">"Reference Handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* If there were a special system-only priority greater than         * MAX_PRIORITY, it would be used here         */</span>        handler<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// provide access in SharedSecrets</span>        SharedSecrets<span class="token punctuation">.</span><span class="token function">setJavaLangRefAccess</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaLangRefAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryHandlePendingReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再来看看ReferenceHandler:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>InterruptedException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ensureClassInitialized</span><span class="token punctuation">(</span>Cleaner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ReferenceHandler</span><span class="token punctuation">(</span>ThreadGroup g<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">tryHandlePending</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> waitForNotify<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Reference<span class="token operator">&lt;</span>Object<span class="token operator">></span> r<span class="token punctuation">;</span>        Cleaner c<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> pending<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 'instanceof' might throw OutOfMemoryError sometimes</span>                    <span class="token comment" spellcheck="true">// so do this before un-linking 'r' from the 'pending' chain...</span>                    c <span class="token operator">=</span> r <span class="token keyword">instanceof</span> <span class="token class-name">Cleaner</span> <span class="token operator">?</span> <span class="token punctuation">(</span>Cleaner<span class="token punctuation">)</span> r <span class="token operator">:</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// unlink 'r' from 'pending' chain</span>                    pending <span class="token operator">=</span> r<span class="token punctuation">.</span>discovered<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>discovered <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// The waiting on the lock may cause an OutOfMemoryError</span>                    <span class="token comment" spellcheck="true">// because it may try to allocate exception objects.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>waitForNotify<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// retry if waited</span>                    <span class="token keyword">return</span> waitForNotify<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Give other threads CPU time so they hopefully drop some live references</span>            <span class="token comment" spellcheck="true">// and GC reclaims some space.</span>            <span class="token comment" spellcheck="true">// Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above</span>            <span class="token comment" spellcheck="true">// persistently throws OOME for some time...</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// retry</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// retry</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Fast path for cleaners</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ReferenceQueue<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Object<span class="token operator">></span> q <span class="token operator">=</span> r<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> ReferenceQueue<span class="token punctuation">.</span>NULL<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ReferenceHandler线程内部的run方法,会不断从pending链表中获取Refercence对象,</p><p>如果能获取到,则根据不同的引用类型进行处理;</p><p>如果获取不到,则调用wait方法等待GC回收对象,处理pending链表的通知.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://ifeve.com/java-reference%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">http://ifeve.com/java-reference%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SoftReference&lt;/p&gt;
&lt;p&gt;普通的GC不会回收软引用,只有在即将发生OOM的时候(即最后一次
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="GC" scheme="https://www.jiangkang.tech/tags/GC/"/>
    
      <category term="Reference" scheme="https://www.jiangkang.tech/tags/Reference/"/>
    
      <category term="Java" scheme="https://www.jiangkang.tech/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>leakcanary是如何捕获内存泄漏的</title>
    <link href="https://www.jiangkang.tech/2020/10/31/android/leakcanary-shi-ru-he-bu-huo-nei-cun-xie-lou-de/"/>
    <id>https://www.jiangkang.tech/2020/10/31/android/leakcanary-shi-ru-he-bu-huo-nei-cun-xie-lou-de/</id>
    <published>2020-10-31T13:11:41.000Z</published>
    <updated>2020-10-31T13:13:47.540Z</updated>
    
    <content type="html"><![CDATA[<p>Java中第三方应用如果想判断是否存在内存泄漏,一般都会利用WeakReference + RefercenceQueue的机制去判定.</p><p>因为GC之后,理论上会回收掉WeakRefercence对象的内存(如果不存在其他到GCRoot的路径的话),因此如果GC之后,对象真的被回收了,则不存在内存泄漏,对象没有被回收,则可能存在内存泄漏.</p><p>来看一下leakcanary中的判定逻辑吧:</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token annotation builtin">@Synchronized</span> <span class="token keyword">fun</span> <span class="token function">watch</span><span class="token punctuation">(</span>    watchedObject<span class="token operator">:</span> Any<span class="token punctuation">,</span>    description<span class="token operator">:</span> String  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除之前可以访问到的对象</span>    <span class="token function">removeWeaklyReachableObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> key <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> watchUptimeMillis <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用WeakReference + ReferenceQueue</span>    <span class="token keyword">val</span> reference <span class="token operator">=</span>      <span class="token function">KeyedWeakReference</span><span class="token punctuation">(</span>watchedObject<span class="token punctuation">,</span> key<span class="token punctuation">,</span> description<span class="token punctuation">,</span> watchUptimeMillis<span class="token punctuation">,</span> queue<span class="token punctuation">)</span>    watchedObjects<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> reference    <span class="token comment" spellcheck="true">// 5s之后进行GC</span>    checkRetainedExecutor<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">{</span>      <span class="token function">moveToRetained</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">removeWeaklyReachableObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ref<span class="token operator">:</span> KeyedWeakReference<span class="token operator">?</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      ref <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> KeyedWeakReference<span class="token operator">?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        watchedObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>判断的是否存在内存泄漏的基本流程如下:</p><ol><li><p>在对应生命周期回调之后,拿到要监控的对象,比如Activity/Fragment/View/ViewModel等</p></li><li><p>使用WeakReference + ReferenceQueue封装对象</p><p>GC之后会回收WeakReference中没有被强引用的对象内存,因此可以用WeakReference来判断是否存在内存泄漏</p></li><li><p>5s后强制进行GC,GC前后都会判断当前保存的对象数,进行对比,如果GC后对象依然没有被回收,则判断该对象可能存在内存泄漏</p><pre class=" language-kotlin"><code class="language-kotlin">      Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">enqueueReferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      System<span class="token punctuation">.</span><span class="token function">runFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里的<code>enqueueRefercences()</code>其实就是让后台线程sleep 100ms,等待GC处理引用队列完毕.</p><blockquote><p>System.gc() : 并不一定每次都会执行GC</p><p>Runtime.gc() : 比System.gc()更可能去执行GC</p></blockquote></li><li><p>判断时间间隔是否小于1min,如果大于1min则dump HPROF文件:</p><pre class=" language-kotlin"><code class="language-kotlin"> Debug<span class="token punctuation">.</span><span class="token function">dumpHprofData</span><span class="token punctuation">(</span>heapDumpFile<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span></code></pre></li><li><p>使用leakcanary 中的 shark 库去分析HPROF文件</p><p><strong>不再是使用的haha库了</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java中第三方应用如果想判断是否存在内存泄漏,一般都会利用WeakReference + RefercenceQueue的机制去判定.&lt;/p&gt;
&lt;p&gt;因为GC之后,理论上会回收掉WeakRefercence对象的内存(如果不存在其他到GCRoot的路径的话),因此如果GC
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="leakcanary" scheme="https://www.jiangkang.tech/tags/leakcanary/"/>
    
      <category term="内存泄漏" scheme="https://www.jiangkang.tech/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leakcanary捕获内存泄漏的时机</title>
    <link href="https://www.jiangkang.tech/2020/10/29/android/leakcanary-bu-huo-nei-cun-xie-lou-de-shi-ji/"/>
    <id>https://www.jiangkang.tech/2020/10/29/android/leakcanary-bu-huo-nei-cun-xie-lou-de-shi-ji/</id>
    <published>2020-10-29T10:45:15.000Z</published>
    <updated>2020-10-29T10:50:18.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="leakcannary可以自动监控的内存泄漏有哪些"><a href="#leakcannary可以自动监控的内存泄漏有哪些" class="headerlink" title="leakcannary可以自动监控的内存泄漏有哪些?"></a>leakcannary可以自动监控的内存泄漏有哪些?</h2><ul><li>destroyed Activity对象</li><li>destroyed Fragment对象</li><li>destroyed fragment中的View对象</li><li>cleared ViewModel对象 (Activity和Fragment中都可能有)</li></ul><h2 id="监控Activity内存泄漏"><a href="#监控Activity内存泄漏" class="headerlink" title="监控Activity内存泄漏"></a>监控Activity内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> ActivityDestroyWatcher <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleCallbacks <span class="token operator">=</span>    <span class="token keyword">object</span> <span class="token operator">:</span> Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks <span class="token keyword">by</span> <span class="token function">noOpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onActivityDestroyed</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchActivities<span class="token punctuation">)</span> <span class="token punctuation">{</span>          objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>              activity<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>activity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Activity#onDestroy() callback"</span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>      application<span class="token operator">:</span> Application<span class="token punctuation">,</span>      objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>      configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> activityDestroyWatcher <span class="token operator">=</span>        <span class="token function">ActivityDestroyWatcher</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>      application<span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span>activityDestroyWatcher<span class="token punctuation">.</span>lifecycleCallbacks<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>不出所料,会注册一个<code>Application.ActivityLifecycleCallbacks</code>,用于监控Activity的生命周期.然后在Activity onDestory()的时候,使用<code>ObjectWatcher</code>来监控Activity对象.</strong></p><p><code>ObjectWatcher</code>后面再详细看,这里不多说.</p><h2 id="监控Fragment-Fragment中View的内存泄漏"><a href="#监控Fragment-Fragment中View的内存泄漏" class="headerlink" title="监控Fragment/Fragment中View的内存泄漏"></a>监控Fragment/Fragment中View的内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">object</span> FragmentDestroyWatcher <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROIDX_FRAGMENT_CLASS_NAME <span class="token operator">=</span> <span class="token string">"androidx.fragment.app.Fragment"</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROIDX_FRAGMENT_DESTROY_WATCHER_CLASS_NAME <span class="token operator">=</span>    <span class="token string">"leakcanary.internal.AndroidXFragmentDestroyWatcher"</span>  <span class="token comment" spellcheck="true">// 防止Jetfier自动将support库转成Androidx</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> ANDROID_SUPPORT_FRAGMENT_CLASS_NAME <span class="token operator">=</span>    <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"android."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"support.v4.app.Fragment"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> ANDROID_SUPPORT_FRAGMENT_DESTROY_WATCHER_CLASS_NAME <span class="token operator">=</span>    <span class="token string">"leakcanary.internal.AndroidSupportFragmentDestroyWatcher"</span>  <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>    application<span class="token operator">:</span> Application<span class="token punctuation">,</span>objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> AppWatcher<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> fragmentDestroyWatchers <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// app包下的Fragment监控,只有Android O 及以上版本才生效</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>SDK_INT <span class="token operator">>=</span> O<span class="token punctuation">)</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>          <span class="token function">AndroidOFragmentDestroyWatcher</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// androidx包下的Fragment监控</span>    <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>        ANDROIDX_FRAGMENT_CLASS_NAME<span class="token punctuation">,</span>        ANDROIDX_FRAGMENT_DESTROY_WATCHER_CLASS_NAME<span class="token punctuation">,</span>        objectWatcher<span class="token punctuation">,</span>        configProvider    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// android support包下面的Fragment监控</span>    <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>        ANDROID_SUPPORT_FRAGMENT_CLASS_NAME<span class="token punctuation">,</span>        ANDROID_SUPPORT_FRAGMENT_DESTROY_WATCHER_CLASS_NAME<span class="token punctuation">,</span>        objectWatcher<span class="token punctuation">,</span>        configProvider    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>      fragmentDestroyWatchers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentDestroyWatchers<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在Activity onCreate()的时候注册FragmntLifecycleCallback</span>    application<span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks <span class="token keyword">by</span> <span class="token function">noOpDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span>        activity<span class="token operator">:</span> Activity<span class="token punctuation">,</span>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>watcher <span class="token keyword">in</span> fragmentDestroyWatchers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">watcher</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断类是否存在,利用反射进行实例化</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getWatcherIfAvailable</span><span class="token punctuation">(</span>    fragmentClassName<span class="token operator">:</span> String<span class="token punctuation">,</span>    watcherClassName<span class="token operator">:</span> String<span class="token punctuation">,</span>    objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>    configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> AppWatcher<span class="token punctuation">.</span>Config  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">classAvailable</span><span class="token punctuation">(</span>fragmentClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">classAvailable</span><span class="token punctuation">(</span>watcherClassName<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> watcherConstructor <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>watcherClassName<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>ObjectWatcher<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span> Function0<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>      <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>      watcherConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">classAvailable</span><span class="token punctuation">(</span>className<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>      Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span>      <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Android中的Fragment/FragmentManager目前有3种:</p><ul><li><p><code>android.app.Fragment</code></p><p>Android O及以上可以使用<code>FragmentManager.FragmentLifecycleCallbacks</code>监听Fragment的生命周期</p></li><li><p><code>androidx.fragment.app.Fragment</code></p></li><li><p><code>android.support.v4.app.Fragment</code> (已废弃,在Android Studio中都没法编译成功)</p></li></ul><p><strong>这里就是先注册一个<code>Application.ActivityLifecycleCallbacks</code>,在每个Activity onCreate()的时候注册<code>FragmentManager.FragmentLifecycleCallbacks</code>来监听Fragment的生命周期.</strong></p><p>现在我们一般使用的都是Androidx中的Fragment,因此这里拿AndroidX中的Fragment来分析内存泄漏监控逻辑:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">AndroidXFragmentDestroyWatcher</span><span class="token punctuation">(</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> fragmentLifecycleCallbacks <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> FragmentManager<span class="token punctuation">.</span><span class="token function">FragmentLifecycleCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentCreated</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment<span class="token punctuation">,</span>      savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ViewModel监控</span>      ViewModelClearedWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentViewDestroyed</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// View监控</span>      <span class="token keyword">val</span> view <span class="token operator">=</span> fragment<span class="token punctuation">.</span>view      <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchFragmentViews<span class="token punctuation">)</span> <span class="token punctuation">{</span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            view<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>fragment<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Fragment#onDestroyView() callback "</span> <span class="token operator">+</span>            <span class="token string">"(references to its views should be cleared to prevent leaks)"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFragmentDestroyed</span><span class="token punctuation">(</span>      fm<span class="token operator">:</span> FragmentManager<span class="token punctuation">,</span>      fragment<span class="token operator">:</span> Fragment    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Fragment监控</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchFragments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            fragment<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>fragment<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received Fragment#onDestroy() callback"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// lambda表达式执行的时候调用这里,注册FragmentLifecycleCallbacks和ViewMdoel监控逻辑</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>activity<span class="token operator">:</span> Activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token keyword">is</span> FragmentActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> supportFragmentManager <span class="token operator">=</span> activity<span class="token punctuation">.</span>supportFragmentManager      supportFragmentManager<span class="token punctuation">.</span><span class="token function">registerFragmentLifecycleCallbacks</span><span class="token punctuation">(</span>fragmentLifecycleCallbacks<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      ViewModelClearedWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里可以看到:</p><ul><li><p><strong><code>onFragmentDestroyed()</code>回调中,使用<code>ObjectWatcher</code>去监控Fragment对象</strong></p></li><li><p><strong><code>onFragmentViewDestroyed()</code>回调中,使用<code>ObjectWatcher</code>去监控View对象</strong></p></li><li><p><strong><code>onFragmentCreated</code>和<code>onActivityCreate()</code>的时候,初始化<code>ViewModelClearedWatcher</code>去监控ViewModel对象</strong></p><p><strong>需要注意的是这两处调用传入的参数是不一样的,一个传入的是<code>Fragment</code>对象,一个传入的是<code>Activity</code>对象.</strong></p></li></ul><p>Fragment和Fragment View的都是利用的<code>ObjectWatcher</code>去监控的,再来看一下ViewModel的监控.</p><h2 id="监控ViewModel内存泄漏"><a href="#监控ViewModel内存泄漏" class="headerlink" title="监控ViewModel内存泄漏"></a>监控ViewModel内存泄漏</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">ViewModelClearedWatcher</span><span class="token punctuation">(</span>  storeOwner<span class="token operator">:</span> ViewModelStoreOwner<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> viewModelMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span><span class="token operator">?</span>  <span class="token keyword">init</span> <span class="token punctuation">{</span>    viewModelMap <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> mMapField <span class="token operator">=</span> ViewModelStore<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mMap"</span><span class="token punctuation">)</span>      mMapField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>      mMapField<span class="token punctuation">[</span>storeOwner<span class="token punctuation">.</span>viewModelStore<span class="token punctuation">]</span> <span class="token keyword">as</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ignored<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewModelMap <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">configProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>watchViewModels<span class="token punctuation">)</span> <span class="token punctuation">{</span>      viewModelMap<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> viewModel <span class="token operator">-></span>        objectWatcher<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>            viewModel<span class="token punctuation">,</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>viewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>name<span class="token delimiter variable">}</span></span> received ViewModel#onCleared() callback"</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>      storeOwner<span class="token operator">:</span> ViewModelStoreOwner<span class="token punctuation">,</span>      objectWatcher<span class="token operator">:</span> ObjectWatcher<span class="token punctuation">,</span>      configProvider<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Config    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> provider <span class="token operator">=</span> <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span>storeOwner<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token operator">:</span> Factory <span class="token punctuation">{</span>        <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">?</span><span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>          <span class="token function">ViewModelClearedWatcher</span><span class="token punctuation">(</span>storeOwner<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span> <span class="token keyword">as</span> T      <span class="token punctuation">}</span><span class="token punctuation">)</span>      provider<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ViewModelClearedWatcher<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里其实涉及到几个知识点:</p><ul><li><p>ViewModelStore</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModelStore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ViewModel<span class="token operator">></span> mMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> ViewModel viewModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ViewModel oldViewModel <span class="token operator">=</span> mMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> viewModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldViewModel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldViewModel<span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> ViewModel <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  执行viewModel的onCleared()方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ViewModel vm <span class="token operator">:</span> mMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>ViewModelStoreOwner</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> ViewModelStoreOwner <span class="token punctuation">{</span>    <span class="token annotation builtin">@NonNull</span>    ViewModelStore <span class="token function">getViewModelStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>FragmentActivity和Activity均实现了这个接口</p></li><li><p>Activity或者Fragment中执行onDestroy()的时候,会执行<code>ViewModelStore</code>的<code>clear()</code>方法,通知其绑定的ViewModel去clear.</p></li></ul><p><strong>leakcanary中的<code>ViewModelClearedWatcher</code>本身就是一个ViewModel,并与要监控的Activity和Fragment进行绑定,因此当Activity或者Fragment执行 onDestroyed()回调时,也会执行<code>ViewModelClearedWatcher</code>的<code>clear()</code>方法,此时遍历ViewModelStore中map存储的ViewModel,并使用<code>ObjectWatcher</code>进行监控.</strong></p><p>分析到这里,可以知道leakcanary其实就是注入Activity和Fragment的生命周期回调,然后再onDestoryed()的时候使用<code>ObjectWatcher</code>进行监听.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;leakcannary可以自动监控的内存泄漏有哪些&quot;&gt;&lt;a href=&quot;#leakcannary可以自动监控的内存泄漏有哪些&quot; class=&quot;headerlink&quot; title=&quot;leakcannary可以自动监控的内存泄漏有哪些?&quot;&gt;&lt;/a&gt;leakcannar
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="leakcanary" scheme="https://www.jiangkang.tech/tags/leakcanary/"/>
    
      <category term="内存泄漏" scheme="https://www.jiangkang.tech/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>leakcanary的自动初始化</title>
    <link href="https://www.jiangkang.tech/2020/10/29/android/leakcanary-de-zi-dong-chu-shi-hua/"/>
    <id>https://www.jiangkang.tech/2020/10/29/android/leakcanary-de-zi-dong-chu-shi-hua/</id>
    <published>2020-10-29T10:44:58.000Z</published>
    <updated>2020-10-29T10:46:50.135Z</updated>
    
    <content type="html"><![CDATA[<p>目前v2.5版本,已经无需显式的进行初始化了.</p><p>由于Android中ContentProvider的onCreate()会在Application的onCreate()之前执行,因此可以在ContentProvider中进行初始化.</p><p>恰好有这么一个ContentProvider: <code>AppWatcherInstaller</code>:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> AppWatcherInstaller <span class="token operator">:</span> <span class="token function">ContentProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">internal</span> <span class="token keyword">class</span> MainProcess <span class="token operator">:</span> <span class="token function">AppWatcherInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当使用leakcananry-android-process包的时候使用,作用是在单独的进程中运行leakcanary</span>  <span class="token keyword">internal</span> <span class="token keyword">class</span> LeakCanaryProcess <span class="token operator">:</span> <span class="token function">AppWatcherInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>    <span class="token keyword">val</span> application <span class="token operator">=</span> context<span class="token operator">!!</span><span class="token punctuation">.</span>applicationContext <span class="token keyword">as</span> Application    AppWatcher<span class="token punctuation">.</span><span class="token function">manualInstall</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//... 一些不需要的query,insert逻辑</span><span class="token punctuation">}</span></code></pre><p>目前有两种选择:</p><ul><li><p>使用leakcanary-android : leakcanary运行在应用进程中</p></li><li><p>使用leakcanary-android-process : leakcanary运行在单独的进程中:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.squareup.leakcanary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.HeapAnalyzerService<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:leakcanary<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.AppWatcherInstaller$LeakCanaryProcess<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.leakcanary-process.installer<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>:leakcanary<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></li></ul><blockquote><p>Kotlin中 internal修饰符表示包内可见,内部类用internal则表示对能看到外部类的任何<strong>本模块</strong>的代码都可见</p><p>sealed是密封类,类比Java中的枚举类,可以有子类,但是必须在同一个文件中声明(只是拓展的子类不受这个限制);</p><p>selaed类是自身抽象的,不能直接实例化,并且可以拥有abstract成员,它不允许有非private构造函数(它的默认构造函数是private的);</p></blockquote><p>那初始化里做了什么呢?</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> objectWatcher <span class="token operator">=</span> <span class="token function">ObjectWatcher</span><span class="token punctuation">(</span>      clock <span class="token operator">=</span> clock<span class="token punctuation">,</span>      checkRetainedExecutor <span class="token operator">=</span> checkRetainedExecutor<span class="token punctuation">,</span>      isEnabled <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">)</span>  <span class="token keyword">fun</span> <span class="token function">install</span><span class="token punctuation">(</span>application<span class="token operator">:</span> Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> configProvider <span class="token operator">=</span> <span class="token punctuation">{</span> AppWatcher<span class="token punctuation">.</span>config <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 监控Activity内存泄漏</span>    ActivityDestroyWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 监控Fragment内存泄漏</span>    FragmentDestroyWatcher<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> objectWatcher<span class="token punctuation">,</span> configProvider<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 库的内部逻辑</span>    <span class="token function">onAppWatcherInstalled</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>三件事:</p><ul><li>Activity内存泄漏监控</li><li>Fragment内存泄漏监控</li><li>内部逻辑(暂时不好分类,后续再讲)</li></ul><h3 id="如果不想进行自动初始化怎么办"><a href="#如果不想进行自动初始化怎么办" class="headerlink" title="如果不想进行自动初始化怎么办?"></a>如果不想进行自动初始化怎么办?</h3><p>可以覆盖一个属性:</p><pre class=" language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bool</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leak_canary_watcher_auto_install<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bool</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>为什么?</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.squareup.leakcanary.objectwatcher<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leakcanary.internal.AppWatcherInstaller$MainProcess<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.leakcanary-installer<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>enabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@bool/leak_canary_watcher_auto_install<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p>可以看到enable属性是与<code>leak_canary_watcher_auto_install</code>绑定的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前v2.5版本,已经无需显式的进行初始化了.&lt;/p&gt;
&lt;p&gt;由于Android中ContentProvider的onCreate()会在Application的onCreate()之前执行,因此可以在ContentProvider中进行初始化.&lt;/p&gt;
&lt;p&gt;恰好有这么一
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="leakcanary" scheme="https://www.jiangkang.tech/tags/leakcanary/"/>
    
      <category term="内存泄漏" scheme="https://www.jiangkang.tech/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中的object</title>
    <link href="https://www.jiangkang.tech/2020/10/29/android/kotlin-zhong-de-object/"/>
    <id>https://www.jiangkang.tech/2020/10/29/android/kotlin-zhong-de-object/</id>
    <published>2020-10-29T07:40:34.000Z</published>
    <updated>2020-10-29T07:41:14.292Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin中<code>object</code>有3种使用场景.</p><h2 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h2><pre class=" language-kotlin"><code class="language-kotlin">window<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*……*/</span> <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*……*/</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="单例对象声明"><a href="#单例对象声明" class="headerlink" title="单例对象声明"></a>单例对象声明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> DataProviderManager <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">registerDataProvider</span><span class="token punctuation">(</span>provider<span class="token operator">:</span> DataProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ……</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> allDataProviders<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>DataProvider<span class="token operator">></span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">// ……</span><span class="token punctuation">}</span></code></pre><h2 id="伴生对象声明"><a href="#伴生对象声明" class="headerlink" title="伴生对象声明"></a>伴生对象声明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyClass <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> Factory <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MyClass <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>对象表达式是在使用他们的地方立即执行的(及初始化);</li><li>对象声明是在第一次被访问到时延迟初始化的;</li><li>伴生对象的初始化是在相应的类被加载(解析)时进行的;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kotlin中&lt;code&gt;object&lt;/code&gt;有3种使用场景.&lt;/p&gt;
&lt;h2 id=&quot;对象表达式&quot;&gt;&lt;a href=&quot;#对象表达式&quot; class=&quot;headerlink&quot; title=&quot;对象表达式&quot;&gt;&lt;/a&gt;对象表达式&lt;/h2&gt;&lt;pre class=&quot; langua
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="object" scheme="https://www.jiangkang.tech/tags/object/"/>
    
  </entry>
  
  <entry>
    <title>粗糙的谈一下Kotlin中的协程</title>
    <link href="https://www.jiangkang.tech/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-xie-cheng/"/>
    <id>https://www.jiangkang.tech/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-xie-cheng/</id>
    <published>2020-10-29T06:49:59.000Z</published>
    <updated>2020-10-29T06:50:43.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>协程运行在协程上下文中（CoroutineContext）。</p><p>协程上下文包含一个协程调度器(CoroutineDispatcher)，它可以将协程限制在一个特定的线程中执行，或者将协程分配到一个线程池中，或者让它不受限制的运行。</p><p>CoroutineContext使用以下元素(Element)定义协程的行为:</p><ul><li>Job: 控制协程的生命周期</li><li>CoroutineDispatcher: 将工作(协程)分派到适当的线程</li><li>CoroutineName: 协程的名字,可用于调试</li><li>CoroutineExceptionHandler: 处理未捕获的异常</li></ul><p><code>CoroutineScope</code>会跟踪它使用launch或者async创建的所有协程,可以随时调用scope.cancel()取消正在运行的协程.但是,已取消的scope是不能再创建协程的,这一点需要注意.</p><p>与调度程序不同,CoroutineScope并不运行协程.</p><p><code>Job</code>是协程的句柄,使用launch或者async创建的每个协程都会返回一个job对象,这个对象唯一标识协程并管理协程的生命周期,当然也可以将Job传递给CoroutineScope进一步管理其生命周期.执行job.cancel()不影响CoroutineScope.</p><p><strong>协程可以在一个线程上挂起,并在其他线程上恢复.</strong></p><h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>主要使用3种Dispatcher:</p><ul><li><p>Dispatchers.Main</p><p>运行在主线程</p></li><li><p>Dispatchers.IO</p><p>适合主线程之外的磁盘/网络IO</p></li><li><p>Dispatchers.Default</p><p>适合主线程之外占有大量CPU资源的工作</p></li></ul><p>可以使用<code>withContext(Dispatcher)</code>来指定:</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"developer.android.com"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">// Dispatchers.Main</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span>                 <span class="token comment" spellcheck="true">// Dispatchers.Main</span>    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// Dispatchers.IO (main-safety block)</span>        <span class="token comment" spellcheck="true">/* perform network IO here */</span>          <span class="token comment" spellcheck="true">// Dispatchers.IO (main-safety block)</span>    <span class="token punctuation">}</span>                                          <span class="token comment" spellcheck="true">// Dispatchers.Main</span><span class="token punctuation">}</span></code></pre><p><code>withContext</code>在性能上有优势,可以避免频繁的线程切换.</p><h2 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h2><p>两种方式:</p><ul><li><p>launch</p><p>不返回结果,从常规函数启动协程一般用launch,因为常规函数无法调用await</p></li><li><p>async</p><p>返回结果 (使用await),在另一个协程中或者在挂起函数中且在执行并行分解时才使用async</p></li></ul><p>两者处理异常的方式不同,async持有异常,并作为结果在await中返回.因此,如果使用await从常规函数启动,则会丢弃异常信息.</p><p>在普通方法中启动协程一般使用下面两种方法:</p><ul><li>launch() (不会阻塞当前线程)</li><li>runBlocking {} (一般用于测试,将后台认为进行同步处理,防止过早退出)</li></ul><h2 id="并行分解"><a href="#并行分解" class="headerlink" title="并行分解"></a>并行分解</h2><p>由suspend函数启动的所有协程都必须在函数返回结果之前停止,因此需要保证这些协程在返回结果之前完成.</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>    coroutineScope <span class="token punctuation">{</span>        <span class="token keyword">val</span> deferredOne <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">val</span> deferredTwo <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        deferredOne<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        deferredTwo<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span>        <span class="token comment" spellcheck="true">// called on any Dispatcher (any thread, possibly Main)</span>    coroutineScope <span class="token punctuation">{</span>        <span class="token keyword">val</span> deferreds <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>     <span class="token comment" spellcheck="true">// fetch two docs at the same time</span>            async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// async returns a result for the first doc</span>            async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// async returns a result for the second doc</span>        <span class="token punctuation">)</span>        deferreds<span class="token punctuation">.</span><span class="token function">awaitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// use awaitAll to wait for both network requests</span><span class="token punctuation">}</span></code></pre><h2 id="自定义CoroutineScope"><a href="#自定义CoroutineScope" class="headerlink" title="自定义CoroutineScope"></a>自定义CoroutineScope</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ExampleClass <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Job and Dispatcher are combined into a CoroutineContext which</span>    <span class="token comment" spellcheck="true">// will be discussed shortly</span>    <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span><span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Starts a new coroutine within the scope</span>        scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// New coroutine that can call suspend functions</span>            <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Cancel the scope to cancel ongoing coroutines work</span>        scope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="GlobalScope"><a href="#GlobalScope" class="headerlink" title="GlobalScope"></a>GlobalScope</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">object</span> GlobalScope <span class="token operator">:</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns [EmptyCoroutineContext].     */</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">}</span></code></pre><p>使用GlobalScope.launch 的时候,会创建一个顶层协程,如果忘记保持对新启动的协程的引用,它还会继续运行,如果挂起了(比如delay了太久),必须手动保持对所有已经启动协程的引用.并调用join()方法.</p><p>在GlobalScope中启动的活动协程并不会使进程保活,它们就像守护线程.</p><h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>先看一段代码:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 开始执行主协程</span>    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在后台启动一个新的协程并继续</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主协程在这里会立即执行</span><span class="token punctuation">}</span></code></pre><p>你觉得会输出什么结果?</p><p>结果是:</p><pre class=" language-kotlin"><code class="language-kotlin">Hello<span class="token punctuation">,</span></code></pre><p>对,GlobalScope.launch中的代码快并没有执行到打印“World”.</p><p>这个时候可以再主协程中添加一个delay,但是方法未免太过死板,可以使用JOb控制:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 启动一个新协程并保持对这个作业的引用</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span>job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待直到子协程执行结束</span></code></pre><p>但是,如果有很多协程,每个都去获取job并join的话也太容易出错了,因此:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// this: CoroutineScope</span>    launch <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在 runBlocking 作用域中启动一个新协程</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>直接在对应的coroutineScope中启动协程,而不是使用GlobalScope.</p><h2 id="调用顺序问题"><a href="#调用顺序问题" class="headerlink" title="调用顺序问题"></a>调用顺序问题</h2><ul><li><p>顺序调用</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one <span class="token operator">+</span> two<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre></li><li><p>async并发</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>Lazy 的 async并发</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行一些计算</span>    one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启动第一个</span>    two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启动第二个</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Completed in <span class="token interpolation variable">$time</span> ms"</span><span class="token punctuation">)</span></code></pre><p>只有结果通过await获取的时候协程才会启动,或者在Job的start函数调用的时候.</p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://developer.android.com/kotlin/coroutines-adv?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/kotlin/coroutines-adv?hl=zh-cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;协程运行在协程上下文中（CoroutineContext）。&lt;/p&gt;
&lt;p&gt;协程上下文包含一个协程调度器(CoroutineDispatch
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="协程" scheme="https://www.jiangkang.tech/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>粗糙的谈一下Kotlin中的CoroutineScope</title>
    <link href="https://www.jiangkang.tech/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-coroutinescope/"/>
    <id>https://www.jiangkang.tech/2020/10/29/android/cu-cao-de-tan-yi-xia-kotlin-zhong-de-coroutinescope/</id>
    <published>2020-10-29T06:48:25.000Z</published>
    <updated>2020-10-29T06:49:27.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>CoroutineScope其实定义了协程的生命周期,比如在Activity中启动的协程,在Activity销毁的时候应该要取消.</p><p>而GlobalScope则是对应整个APP的生命周期,即使Activity已经销毁,CoroutineScope依然继续运行,可能导致协程泄漏,内存泄漏.</p><h2 id="CoroutineScope"><a href="#CoroutineScope" class="headerlink" title="CoroutineScope"></a>CoroutineScope</h2><p>先来看一下它的定义:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不建议使用普通的代码访问这个属性,除非使用Job()用于一些高级使用场景</span>    <span class="token comment" spellcheck="true">// 按照约定,这个属性应该包含一个Job对象用于强制执行结构化并发,比如可以这么用coroutineContext[Job]</span>    <span class="token keyword">public</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext<span class="token punctuation">}</span></code></pre><p>可以看到,就是一个只带一个Field的简单接口.</p><p>CortoutineScope中封装了CoroutineContext,用于各种CortoutineScope的extention方法,比如<code>GlobalScope.launch</code>.</p><p>可以使用诸如下面这样的代码去创建CoroutineScope:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> coroutineScope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main <span class="token operator">+</span> job<span class="token punctuation">)</span></code></pre><p>再比如ViewModel提供的协程实现:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ViewModel<span class="token punctuation">.</span>viewModelScope<span class="token operator">:</span> CoroutineScope        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> scope            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">setTagIfAbsent</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">,</span>                <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span> <span class="token operator">:</span> Closeable<span class="token punctuation">,</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> context    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        coroutineContext<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里都会对CoroutineContext进行 <code>+</code>操作,这里其实就是一个操作符重载.</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext <span class="token operator">=</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> <span class="token keyword">this</span> <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// fast path -- avoid lambda creation</span>            context<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> element <span class="token operator">-></span>                <span class="token keyword">val</span> removed <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">minusKey</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>key<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>removed <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> element <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// make sure interceptor is always last in the context (and thus is fast to get when present)</span>                    <span class="token keyword">val</span> interceptor <span class="token operator">=</span> removed<span class="token punctuation">[</span>ContinuationInterceptor<span class="token punctuation">]</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">CombinedContext</span><span class="token punctuation">(</span>removed<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">val</span> left <span class="token operator">=</span> removed<span class="token punctuation">.</span><span class="token function">minusKey</span><span class="token punctuation">(</span>ContinuationInterceptor<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> EmptyCoroutineContext<span class="token punctuation">)</span> <span class="token function">CombinedContext</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> interceptor<span class="token punctuation">)</span> <span class="token keyword">else</span>                            <span class="token function">CombinedContext</span><span class="token punctuation">(</span><span class="token function">CombinedContext</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">,</span> interceptor<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><h2 id="创建自定义的CoroutineScope"><a href="#创建自定义的CoroutineScope" class="headerlink" title="创建自定义的CoroutineScope"></a>创建自定义的CoroutineScope</h2><ul><li><p>使用<code>CoroutineScope()</code><strong>方法</strong></p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">createScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// doSomething()</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>CoroutineScope</code>是一个方法:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineScope <span class="token operator">=</span>    <span class="token function">ContextScope</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">[</span>Job<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> context <span class="token keyword">else</span> context <span class="token operator">+</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>需要注意的是,在组件生命周期结束时记得cancel操作</strong></p></li></ul><h2 id="如果不使用GlobalScope-使用什么Scope"><a href="#如果不使用GlobalScope-使用什么Scope" class="headerlink" title="如果不使用GlobalScope,使用什么Scope?"></a>如果不使用GlobalScope,使用什么Scope?</h2><p>如果不想自己自定义CoroutineScope,可以有下面这些选择:</p><ul><li><p>使用MainScope</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">class</span> MyAndroidActivity <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          scope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>这里的MainScope其实也是一个简单的拓展实现:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CoroutineScope <span class="token operator">=</span> <span class="token function">ContextScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span></code></pre><p>注意到这里使用的是<code>Dispatchers.Main</code>,因此不要在里面做耗时操作.可以与<code>withContext()</code>方法组合使用.</p></li><li><p>使用AndroidX提供的ViewModelScope等.</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ViewModel<span class="token punctuation">.</span>viewModelScope<span class="token operator">:</span> CoroutineScope        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> scope            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">setTagIfAbsent</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">,</span>                <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span> <span class="token operator">:</span> Closeable<span class="token punctuation">,</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> context    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        coroutineContext<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单说明&quot;&gt;&lt;a href=&quot;#简单说明&quot; class=&quot;headerlink&quot; title=&quot;简单说明&quot;&gt;&lt;/a&gt;简单说明&lt;/h2&gt;&lt;p&gt;CoroutineScope其实定义了协程的生命周期,比如在Activity中启动的协程,在Activity销毁的时候应该要
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="协程" scheme="https://www.jiangkang.tech/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>image_picker的使用</title>
    <link href="https://www.jiangkang.tech/2020/10/27/flutter/image-picker-de-shi-yong/"/>
    <id>https://www.jiangkang.tech/2020/10/27/flutter/image-picker-de-shi-yong/</id>
    <published>2020-10-27T14:23:37.000Z</published>
    <updated>2020-10-27T14:24:57.484Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下<code>image_picker</code>的使用</p><h2 id="从相册选择图片"><a href="#从相册选择图片" class="headerlink" title="从相册选择图片"></a>从相册选择图片</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickImageFromGallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span>        <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>gallery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相机拍摄照片并选择"><a href="#从相机拍摄照片并选择" class="headerlink" title="从相机拍摄照片并选择"></a>从相机拍摄照片并选择</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickImageFromCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相册选择视频"><a href="#从相册选择视频" class="headerlink" title="从相册选择视频"></a>从相册选择视频</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickVideoFromGallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span>        <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVideo</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>gallery<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="从相机拍摄视频并选择"><a href="#从相机拍摄视频并选择" class="headerlink" title="从相机拍摄视频并选择"></a>从相机拍摄视频并选择</h2><pre class=" language-dart"><code class="language-dart">  <span class="token keyword">static</span> Future<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">pickVideoFromCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> pickedFile <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ImagePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVideo</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> ImageSource<span class="token punctuation">.</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">File</span><span class="token punctuation">(</span>pickedFile<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单记录一下&lt;code&gt;image_picker&lt;/code&gt;的使用&lt;/p&gt;
&lt;h2 id=&quot;从相册选择图片&quot;&gt;&lt;a href=&quot;#从相册选择图片&quot; class=&quot;headerlink&quot; title=&quot;从相册选择图片&quot;&gt;&lt;/a&gt;从相册选择图片&lt;/h2&gt;&lt;pre class=
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="Image" scheme="https://www.jiangkang.tech/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>Jetpack App Startup库的使用</title>
    <link href="https://www.jiangkang.tech/2020/10/25/android/appstart-ku-de-shi-yong/"/>
    <id>https://www.jiangkang.tech/2020/10/25/android/appstart-ku-de-shi-yong/</id>
    <published>2020-10-25T13:30:14.000Z</published>
    <updated>2020-10-25T13:31:27.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>应用启动时进行高性能的初始化</li><li>明确定义各种初始化的依赖关系</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先添加依赖:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"androidx.startup:startup-runtime:1.0.0-beta01"</span><span class="token punctuation">)</span></code></pre><p>你得为每一个需要初始化的组件实现一个Initializer.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Initializer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    T <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Context context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Initializer</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到,就只有两个方法:</p><ul><li>create() : 用于执行初始化操作</li><li>dependencies() : 用于配置依赖</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// Initializes ExampleLogger.</span><span class="token keyword">class</span> ExampleLoggerInitializer <span class="token operator">:</span> Initializer<span class="token operator">&lt;</span>ExampleLogger<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">create</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> ExampleLogger <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// WorkManager.getInstance() is non-null only after</span>        <span class="token comment" spellcheck="true">// WorkManager is initialized.</span>        <span class="token keyword">return</span> <span class="token function">ExampleLogger</span><span class="token punctuation">(</span>WorkManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token keyword">out</span> Initializer<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Defines a dependency on WorkManagerInitializer so it can be</span>        <span class="token comment" spellcheck="true">// initialized after WorkManager is initialized.</span>        <span class="token keyword">return</span> <span class="token function">listOf</span><span class="token punctuation">(</span>WorkManagerInitializer<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面可以看出,一般都需要返回组件的对象.</p><p>从这一点上来看,这个AppStart库比较鸡肋,因为很多库都不是返回一个单例类的实例的.</p><h2 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>merge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- This entry makes ExampleLoggerInitializer discoverable. --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>  <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.ExampleLoggerInitializer<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span></code></pre><p>需要在manifest文件中进行配置.</p><h2 id="手动初始化"><a href="#手动初始化" class="headerlink" title="手动初始化"></a>手动初始化</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>merge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.ExampleLoggerInitializer<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span></code></pre><p>或者</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>androidx.startup.InitializationProvider<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationId}.androidx-startup<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>node</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>其实就是node属性控制的.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>源码比较简单,就只有几个类而已,没什么好说的.</p><p>总的来说,app start库并不值得推荐:</p><ul><li><p>性能</p><p>这个库使用的依然是ContentProvider,而且是基于反射的,性能并不比直接使用ContentProvider高</p></li><li><p>易用性</p><p>需要再Manifest中配置,并不是很方便</p></li></ul><p>唯一值得借鉴的,也就是依赖关系与初始化的顺序封装了.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/topic/libraries/app-startup?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/topic/libraries/app-startup?hl=zh-cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用启动时进行高性能的初始化&lt;/li&gt;
&lt;li&gt;明确定义各种初始化的依赖关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Jetpack" scheme="https://www.jiangkang.tech/tags/Jetpack/"/>
    
      <category term="App Startup" scheme="https://www.jiangkang.tech/tags/App-Startup/"/>
    
  </entry>
  
  <entry>
    <title>Android微件的简单用法</title>
    <link href="https://www.jiangkang.tech/2020/10/25/android/android-wei-jian-de-jian-dan-yong-fa/"/>
    <id>https://www.jiangkang.tech/2020/10/25/android/android-wei-jian-de-jian-dan-yong-fa/</id>
    <published>2020-10-25T11:36:20.000Z</published>
    <updated>2020-10-25T11:39:13.134Z</updated>
    
    <content type="html"><![CDATA[<p>即Widget</p><h2 id="微件类型"><a href="#微件类型" class="headerlink" title="微件类型"></a>微件类型</h2><ul><li><p>信息微件</p><p><img src="https://developer.android.com/design/media/widgets_info.png?hl=zh-cn" alt="img"></p></li><li><p>集合微件</p><p><img src="https://developer.android.com/design/media/widgets_collection_gmail.png?hl=zh-cn" alt="img"></p></li><li><p>控制微件</p><p><img src="https://oss.jiangkang.tech/jk/widgets_control.png" alt="img"></p></li><li><p>混合微件</p><p><img src="https://developer.android.com/design/media/widgets_hybrid.png?hl=zh-cn" alt="img"></p></li></ul><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li><p>手势</p><p>微件只能支持以下两种手势:</p><ul><li>轻触</li><li>纵向滑动</li></ul></li></ul><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>创建AppWidgetProvider的子类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> KToolsAppWidgetProvider <span class="token operator">:</span> <span class="token function">AppWidgetProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onUpdate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> appWidgetManager<span class="token operator">:</span> AppWidgetManager<span class="token punctuation">,</span> appWidgetIds<span class="token operator">:</span> IntArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onUpdate</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> appWidgetManager<span class="token punctuation">,</span> appWidgetIds<span class="token punctuation">)</span>        appWidgetIds<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> appWidgetId <span class="token operator">-></span>            <span class="token keyword">val</span> pendingIntent<span class="token operator">:</span> PendingIntent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> MainActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> intent <span class="token operator">-></span>                        PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> intent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>            <span class="token keyword">val</span> views<span class="token operator">:</span> RemoteViews <span class="token operator">=</span> <span class="token function">RemoteViews</span><span class="token punctuation">(</span>                    context<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>layout_ktools_widget            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>                <span class="token function">setOnClickPendingIntent</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_action<span class="token punctuation">,</span> pendingIntent<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            appWidgetManager<span class="token punctuation">.</span><span class="token function">updateAppWidget</span><span class="token punctuation">(</span>appWidgetId<span class="token punctuation">,</span> views<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这实际上是一个BroadcastReceiver.因此需要再Manifest文件中注册:</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token operator">&lt;</span>receiver            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".receiver.KToolsAppWidgetProvider"</span>            android<span class="token operator">:</span>enabled<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.appwidget.action.APPWIDGET_UPDATE"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>            <span class="token operator">&lt;</span>meta<span class="token operator">-</span><span class="token keyword">data</span>                android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.appwidget.provider"</span>                android<span class="token operator">:</span>resource<span class="token operator">=</span><span class="token string">"@xml/ktools_appwidget_info"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span></code></pre></li><li><p>配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appwidget-provider</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minWidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>updatePeriodMillis</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>86400000<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>previewImage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/landscape<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>initialLayout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/layout_ktools_widget<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>resizeMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal|vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>widgetCategory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home_screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appwidget-provider</span><span class="token punctuation">></span></span></code></pre></li></ol><p>到这里基本上就差不多了,实际开发比较少见,如果真的遇到了,再看文档进行实际开发不迟.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/topics/appwidgets/overview?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/appwidgets/overview?hl=zh-cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;即Widget&lt;/p&gt;
&lt;h2 id=&quot;微件类型&quot;&gt;&lt;a href=&quot;#微件类型&quot; class=&quot;headerlink&quot; title=&quot;微件类型&quot;&gt;&lt;/a&gt;微件类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;信息微件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://develope
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="微件" scheme="https://www.jiangkang.tech/tags/%E5%BE%AE%E4%BB%B6/"/>
    
      <category term="App Widget" scheme="https://www.jiangkang.tech/tags/App-Widget/"/>
    
      <category term="简单用法" scheme="https://www.jiangkang.tech/tags/%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android快捷方式的简单用法</title>
    <link href="https://www.jiangkang.tech/2020/10/25/android/android-kuai-jie-fang-shi-de-jian-dan-yong-fa/"/>
    <id>https://www.jiangkang.tech/2020/10/25/android/android-kuai-jie-fang-shi-de-jian-dan-yong-fa/</id>
    <published>2020-10-25T11:36:05.000Z</published>
    <updated>2020-10-25T11:39:31.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>从Android 7.1 开始支持</p><h2 id="快捷方式类型"><a href="#快捷方式类型" class="headerlink" title="快捷方式类型"></a>快捷方式类型</h2><ul><li><p>静态</p><p>以xml形式配置,并在主Activity中的<code>&lt;meta-data&gt;</code>标签下置顶</p><p>Android Studio并不能很好的支持,暂时没找到问题所在</p></li><li><p>动态</p><p>可以随时改变,即使是程序运行过程中</p></li><li><p>固定</p><p>固定到屏幕底部的快捷启动栏中(对于国内很多手机来说,并不是底部,而是多了一个icon入口而已,一般会弹出一个框,请求添加快捷方式)</p></li></ul><p><img src="https://oss.jiangkang.tech/jk/pinned-shortcuts.png" alt="Screenshot showing contrast between app shortcuts   and pinned shortcuts"></p><h2 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h2><p><code>ShortcutManager</code>支持以下几种操作:</p><ul><li><p>Publish</p><ul><li>重新定义快捷方式入口 : <code>setDynamicShortcuts()</code></li><li>添加新的入口 : <code>addDynamicShortcuts()</code></li></ul></li><li><p>Update</p><p><code>updateShortcuts()</code></p></li><li><p>Remove</p><ul><li>移除部分: <code>removeDynamicShortcuts()</code></li><li>移除全部: <code>removeAllDynamicShortcuts()</code></li></ul></li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> shortcutManager <span class="token operator">=</span> getSystemService<span class="token operator">&lt;</span>ShortcutManager<span class="token operator">></span><span class="token punctuation">(</span>ShortcutManager<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token keyword">val</span> shortcut <span class="token operator">=</span> ShortcutInfo<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"id1"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setShortLabel</span><span class="token punctuation">(</span><span class="token string">"Website"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setLongLabel</span><span class="token punctuation">(</span><span class="token string">"Open the website"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span>Icon<span class="token punctuation">.</span><span class="token function">createWithResource</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>icon_website<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setIntent</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span>                Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"https://www.mysite.example.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shortcutManager<span class="token operator">!!</span><span class="token punctuation">.</span>dynamicShortcuts <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>shortcut<span class="token punctuation">)</span></code></pre><p>不过一般还是使用<code>ShortcutManagerCompat</code>等兼容类.</p><h2 id="固定"><a href="#固定" class="headerlink" title="固定"></a>固定</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> shortcutManager <span class="token operator">=</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>ShortcutManager<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>shortcutManager<span class="token operator">!!</span><span class="token punctuation">.</span>isRequestPinShortcutSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assumes there's already a shortcut with the ID "my-shortcut".</span>    <span class="token comment" spellcheck="true">// The shortcut must be enabled.</span>    <span class="token keyword">val</span> pinShortcutInfo <span class="token operator">=</span> ShortcutInfo<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"my-shortcut"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Create the PendingIntent object only if your app needs to be notified</span>    <span class="token comment" spellcheck="true">// that the user allowed the shortcut to be pinned. Note that, if the</span>    <span class="token comment" spellcheck="true">// pinning operation fails, your app isn't notified. We assume here that the</span>    <span class="token comment" spellcheck="true">// app has implemented a method called createShortcutResultIntent() that</span>    <span class="token comment" spellcheck="true">// returns a broadcast intent.</span>    <span class="token keyword">val</span> pinnedShortcutCallbackIntent <span class="token operator">=</span> shortcutManager<span class="token punctuation">.</span><span class="token function">createShortcutResultIntent</span><span class="token punctuation">(</span>pinShortcutInfo<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Configure the intent so that your app's broadcast receiver gets</span>    <span class="token comment" spellcheck="true">// the callback successfully.For details, see PendingIntent.getBroadcast().</span>    <span class="token keyword">val</span> successCallback <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* request code */</span> <span class="token number">0</span><span class="token punctuation">,</span>            pinnedShortcutCallbackIntent<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* flags */</span> <span class="token number">0</span><span class="token punctuation">)</span>    shortcutManager<span class="token punctuation">.</span><span class="token function">requestPinShortcut</span><span class="token punctuation">(</span>pinShortcutInfo<span class="token punctuation">,</span>            successCallback<span class="token punctuation">.</span>intentSender<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用固定快捷方式的时候,一定要注意返回的Intent,这样返回的时候可以直接返回首页了.</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/topics/ui/shortcuts/creating-shortcuts?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/shortcuts/creating-shortcuts?hl=zh-cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;限制&quot;&gt;&lt;a href=&quot;#限制&quot; class=&quot;headerlink&quot; title=&quot;限制&quot;&gt;&lt;/a&gt;限制&lt;/h2&gt;&lt;p&gt;从Android 7.1 开始支持&lt;/p&gt;
&lt;h2 id=&quot;快捷方式类型&quot;&gt;&lt;a href=&quot;#快捷方式类型&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="简单用法" scheme="https://www.jiangkang.tech/tags/%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    
      <category term="快捷方式" scheme="https://www.jiangkang.tech/tags/%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    
      <category term="Shortcut" scheme="https://www.jiangkang.tech/tags/Shortcut/"/>
    
  </entry>
  
  <entry>
    <title>Android通知的简单用法</title>
    <link href="https://www.jiangkang.tech/2020/10/25/android/android-tong-zhi-de-jian-dan-yong-fa/"/>
    <id>https://www.jiangkang.tech/2020/10/25/android/android-tong-zhi-de-jian-dan-yong-fa/</id>
    <published>2020-10-25T11:35:48.000Z</published>
    <updated>2020-10-25T11:38:58.283Z</updated>
    
    <content type="html"><![CDATA[<p>由于不同版本API兼容性问题,我们通常使用<code>NotificationCompact</code>去创建通知.</p><h2 id="注册NotificationChannel"><a href="#注册NotificationChannel" class="headerlink" title="注册NotificationChannel"></a>注册NotificationChannel</h2><p>一般在应用启动的时候注册通知channel:</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> channelIdNormal <span class="token operator">=</span> <span class="token string">"ktools_channel_normal"</span>    <span class="token comment" spellcheck="true">/**     * 应用启动时调用     */</span>    <span class="token keyword">fun</span> <span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">val</span> channel <span class="token operator">=</span> <span class="token function">NotificationChannel</span><span class="token punctuation">(</span>channelIdNormal<span class="token punctuation">,</span>  channelIdNormal<span class="token punctuation">,</span>NotificationManager<span class="token punctuation">.</span>IMPORTANCE_HIGH<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>            description <span class="token operator">=</span> <span class="token string">"应用中的普通通知"</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="点击动作"><a href="#点击动作" class="headerlink" title="点击动作"></a>点击动作</h2><p>使用PenddingIntent:</p><pre class=" language-kotlin"><code class="language-kotlin">PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getActivities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>PendingIntent<span class="token punctuation">.</span><span class="token function">getForegroundService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="显示-更新通知"><a href="#显示-更新通知" class="headerlink" title="显示/更新通知"></a>显示/更新通知</h2><pre class=" language-kotlin"><code class="language-kotlin">context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> notification<span class="token punctuation">)</span></code></pre><h2 id="移除通知"><a href="#移除通知" class="headerlink" title="移除通知"></a>移除通知</h2><p>除非发生以下情况之一，否则通知仍然可见：</p><ul><li>用户关闭通知。</li><li>用户点击通知，且您在创建通知时调用了 <code>setAutoCancel()</code>。</li><li>您针对特定的通知 ID 调用了 <code>cancel()</code>。此方法还会删除当前通知。</li><li>您调用了 <code>cancelAll()</code> 方法，该方法将移除之前发出的所有通知。</li><li>如果您在创建通知时使用 <code>setTimeoutAfter()</code> 设置了超时，系统会在指定持续时间过后取消通知。如果需要，您可以在指定的超时持续时间过去之前取消通知。</li></ul><h2 id="勿扰模式与通知类别"><a href="#勿扰模式与通知类别" class="headerlink" title="勿扰模式与通知类别"></a>勿扰模式与通知类别</h2><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>CATEGORY_MESSAGE<span class="token punctuation">)</span></code></pre><p>用来确定用户在勿扰模式下通知是否打扰用户.(并不是必须的)</p><h2 id="通知的样式"><a href="#通知的样式" class="headerlink" title="通知的样式"></a>通知的样式</h2><ul><li><p>普通的通知</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">createNotification</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> smallIconID<span class="token operator">:</span> Int<span class="token punctuation">,</span> title<span class="token operator">:</span> String<span class="token punctuation">,</span> content<span class="token operator">:</span> String<span class="token punctuation">,</span> intent<span class="token operator">:</span> Intent<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">val</span> pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getActivity</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span>        <span class="token keyword">val</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> channelIdNormal<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>smallIconID<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentIntent</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>PRIORITY_DEFAULT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_btn_speak_now<span class="token punctuation">,</span><span class="token string">"Voice"</span><span class="token punctuation">,</span>pendingIntent<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> id <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span>notificationManager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> notification<span class="token punctuation">)</span>        <span class="token keyword">return</span> id    <span class="token punctuation">}</span></code></pre></li><li><p>带进度条</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><p>最后一个参数表示是否未具体的进度和无限循环的样式.</p></li><li><p>应用图标上的红点通知</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setShowBadge</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre></li><li><p>可展开的通知</p><ul><li><p>大图</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">BigPictureStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token punctuation">.</span><span class="token function">bigPicture</span><span class="token punctuation">(</span>myBitmap<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>大段文本</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">BigTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bigText</span><span class="token punctuation">(</span>emailObject<span class="token punctuation">.</span><span class="token function">getSubjectAndSnippet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>收件箱样式</p><pre class=" language-kotlin"><code class="language-kotlin">notification<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">InboxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>messageSnippet1<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>messageSnippet2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>对话框样式</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">var</span> message1 <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span>MessagingStyle<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> message2 <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span>MessagingStyle<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            messages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> CHANNEL_ID<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>new_message<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span><span class="token function">MessagingStyle</span><span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>reply_name<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addMessage</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>媒体类型样式</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>app<span class="token punctuation">.</span>NotificationCompat    <span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>media<span class="token punctuation">.</span>app<span class="token punctuation">.</span>NotificationCompat <span class="token keyword">as</span> MediaNotificationCompat    <span class="token keyword">var</span> notification <span class="token operator">=</span> NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> CHANNEL_ID<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Show controls on lock screen even when user hides sensitive content.</span>            <span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>NotificationCompat<span class="token punctuation">.</span>VISIBILITY_PUBLIC<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_stat_player<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Add media control buttons that invoke intents in your media service</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_prev<span class="token punctuation">,</span> <span class="token string">"Previous"</span><span class="token punctuation">,</span> prevPendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #0</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_pause<span class="token punctuation">,</span> <span class="token string">"Pause"</span><span class="token punctuation">,</span> pausePendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #1</span>            <span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_next<span class="token punctuation">,</span> <span class="token string">"Next"</span><span class="token punctuation">,</span> nextPendingIntent<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// #2</span>            <span class="token comment" spellcheck="true">// Apply the media style template</span>            <span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>MediaNotificationCompat<span class="token punctuation">.</span><span class="token function">MediaStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setShowActionsInCompactView</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token comment" spellcheck="true">/* #1: pause button \*/</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMediaSession</span><span class="token punctuation">(</span>mediaSession<span class="token punctuation">.</span><span class="token function">getSessionToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"Wonderful music"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"My Awesome Band"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>albumArtBitmap<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>自定义布局</p><ul><li><p>直接使用<code>setCustomBigContentView</code>,但是不使用<code>setStyle</code></p></li><li><p>使用<code>setStyle</code> + RemoteView:</p><pre><code>    // Get the layouts to use in the custom notification    val notificationLayout = RemoteViews(packageName, R.layout.notification_small)    val notificationLayoutExpanded = RemoteViews(packageName, R.layout.notification_large)    // Apply the layouts to the notification    val customNotification = NotificationCompat.Builder(context, CHANNEL_ID)            .setSmallIcon(R.drawable.notification_icon)            .setStyle(NotificationCompat.DecoratedCustomViewStyle())            .setCustomContentView(notificationLayout)            .setCustomBigContentView(notificationLayoutExpanded)            .build()</code></pre></li></ul></li></ul><h2 id="打开通知设置页"><a href="#打开通知设置页" class="headerlink" title="打开通知设置页"></a>打开通知设置页</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>ACTION_CHANNEL_NOTIFICATION_SETTINGS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">putExtra</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>EXTRA_APP_PACKAGE<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span>        <span class="token function">putExtra</span><span class="token punctuation">(</span>Settings<span class="token punctuation">.</span>EXTRA_CHANNEL_ID<span class="token punctuation">,</span> myNotificationChannel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn</a></li><li><a href="https://developer.android.com/training/notify-user/expanded?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/notify-user/expanded?hl=zh-cn</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于不同版本API兼容性问题,我们通常使用&lt;code&gt;NotificationCompact&lt;/code&gt;去创建通知.&lt;/p&gt;
&lt;h2 id=&quot;注册NotificationChannel&quot;&gt;&lt;a href=&quot;#注册NotificationChannel&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="简单用法" scheme="https://www.jiangkang.tech/tags/%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    
      <category term="Notification" scheme="https://www.jiangkang.tech/tags/Notification/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中的泛型</title>
    <link href="https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-fan-xing/"/>
    <id>https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-fan-xing/</id>
    <published>2020-10-14T15:46:17.000Z</published>
    <updated>2020-10-14T15:48:57.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如果A,B表示类型,f(*)表示类型转换, &lt;= 表示继承关系(如果 A &lt;= B,则表示A是B的子类)</p><ul><li><p>里氏替换原则(LSP)</p><p>子类对象可以在程序中替换基类对象,”SOLID”原则中的L就是这个.</p></li><li><p>协变</p><p>如果f(*)是协变的,当 A &lt;= B时,f(A) &lt;= f(B)成立</p></li><li><p>逆变</p><p>如果f(*)是协变的,当 A &lt;= B时,f(B) &lt;= f(A)成立</p></li><li><p>不变</p><p>如果f(*)是不变的,当A &lt;= B时,f(A)和f(B)没有继承关系</p></li></ul><p>比如<code>f(A) = ArrayList&lt;A&gt;</code>, <code>f(B) = ArrayList&lt;B&gt;</code>:</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>先看一下下面这行代码:</p><pre class=" language-java"><code class="language-java"> ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>很明显,在Java中这样写是错误的.因为ArrayList&lt;&gt;是不变的,因此两个类并没有继承关系,不能这么写</strong></p><p><strong>在Java中泛型是不变的,因此f(A)和f(B)没有继承关系.</strong></p><p><strong>在Java中数组是协变的,f(A) &lt;= f(B)</strong></p><p>对于泛型来说,有时候需要协变和逆变怎么办?</p><ul><li><p>泛型协变 : &lt;? extends ClassA&gt;</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>泛型逆变: &lt;? super ClassA&gt;</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p><code>&lt;? extends ClassA&gt;</code>决定了泛型的上界,即基类是ClassA,匹配的类只能是ClassA或者ClassA的子类</p><p><code>&lt;? super ClassA&gt;</code>决定了泛型的下界,即子类是ClassA,匹配的类只能是ClassA或者ClassA的父类.</p><p>并且有一个辅助记忆的词: <strong>PECS</strong> = <strong>Producer-extends  Consumer-super</strong></p><p><strong>只能从中进行读取操作的对象是生产者,只能向其中写入数据的对象是消费者</strong></p><p>也就是说<strong>extends只允许读操作,super只允许写操作,读写都要则不要使用通配符</strong></p><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>Kotlin中的泛型与Java类似,一般是不型变的,不过也有修饰符分别对应协变和逆变:</p><ul><li><p><code>out</code></p><p>相当于Java 中的extends,协变,只允许从中读取数据,不允许写</p></li><li><p><code>in</code></p><p>相当于Java中的super,逆变,只允许向其中写数据,不允许读</p></li></ul><p><strong>Kotlin是在泛型声明的时候就使用型变的,因此叫做声明处型变</strong></p><p>Kotlin还有一种叫做星投影的东西,即<code>Foo&lt;*&gt;</code>,每个具体的实例化都是该投影的自类型.而且泛型擦除都会擦为<code>Foo&lt;*&gt;</code></p><p>至于Kotlin泛型的上下界约束问题:</p><ul><li><p>上界</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Animal<span class="token operator">&lt;</span>T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>用一个冒号即可表示,如果没有指定,则默认是<code>Any?</code></p><p>如果需要使用多个上界(<strong>在尖括号中只能指定一个上界</strong>),则需要使用<code>where</code>修饰符:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">demo</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> threshold<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span>        <span class="token keyword">where</span> T <span class="token operator">:</span> CharSequence<span class="token punctuation">,</span>              T <span class="token operator">:</span> Comparable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> threshold <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所传递的类型必须同时满足where语句的所有条件,比如上面的例子,类型 <code>T</code> 必须<em>既</em>实现了 <code>CharSequence</code> <em>也</em>实现了 <code>Comparable</code>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://www.cnblogs.com/en-heng/p/5041124.html" target="_blank" rel="noopener">https://www.cnblogs.com/en-heng/p/5041124.html</a></li><li><a href="https://www.kotlincn.net/docs/reference/generics.html" target="_blank" rel="noopener">https://www.kotlincn.net/docs/reference/generics.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;如果A,B表示类型,f(*)表示类型转换, &amp;lt;= 表示继承关系(如果 A &amp;lt;= B,则表示A是B的子类)&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="泛型" scheme="https://www.jiangkang.tech/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中的inline</title>
    <link href="https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-inline/"/>
    <id>https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-inline/</id>
    <published>2020-10-14T10:53:06.000Z</published>
    <updated>2020-10-14T10:54:45.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="inline-noinline-crossinline-reified"><a href="#inline-noinline-crossinline-reified" class="headerlink" title="inline/noinline/crossinline/reified"></a>inline/noinline/crossinline/reified</h2><p>内联,这个概念无需多说.</p><p>kotlin中使用高阶函数在运行时会有一些性能损失:每一个函数都是一个对象,并且都会捕获一个闭包(哪些在函数体内可以访问到的变量),对函数对象和类进行内存分配,和虚拟调用都会引入一些运行时间开销.</p><p>因此kotlin中经常<strong>用inline来优化lambda表达式</strong>,比如我们常用的<code>let</code>,<code>apply</code>方法:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token punctuation">{</span>    contract <span class="token punctuation">{</span>        <span class="token function">callsInPlace</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> InvocationKind<span class="token punctuation">.</span>EXACTLY_ONCE<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不过内联可能会导致生成的字节码增加,尽量不要将过大的函数进行内联.</p><h3 id="禁用内联-noinline"><a href="#禁用内联-noinline" class="headerlink" title="禁用内联/noinline"></a>禁用内联/noinline</h3><p>有时候内联方法中传入了lambda表达式作为参数,但是又不想这个参数lambda内联,可以使用<code>noinline</code>禁用内联:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T <span class="token operator">:</span> Task<span class="token operator">></span> Project<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token keyword">noinline</span> configuration<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">registering</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span></code></pre><blockquote><p> 对于那些并没有什么益处的内联,编译器会产生一个警告</p></blockquote><h3 id="非局部返回"><a href="#非局部返回" class="headerlink" title="非局部返回"></a>非局部返回</h3><p>kotlin中我们只能对具名或者匿名函数使用正常的return来退出,在lambda表达式中则必须使用一个标签来return.</p><p>有一种情况例外,就是lambda是内联的,这个时候可以正常return(因为lambda的return也内联了).</p><p>这么说可能不清楚,来个例子吧:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">funWithoutInline</span><span class="token punctuation">(</span>block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">funInline</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Boolean<span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 只能使用这种方式,不能直接return</span>   funWithoutInline <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token label symbol">@funWithoutInline</span>   <span class="token punctuation">}</span>   funInline <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span>   funInline <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token label symbol">@funInline</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><blockquote><p>Break 和continue 在内联的lambda表达式暂时不可用.</p></blockquote><h3 id="内联lambda嵌套问题"><a href="#内联lambda嵌套问题" class="headerlink" title="内联lambda嵌套问题"></a>内联lambda嵌套问题</h3><p>对于一般嵌套的lambda没什么影响,内联的lambda则需要使用<code>crossinline</code>进行修饰:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">embedInlineFun</span><span class="token punctuation">(</span><span class="token keyword">crossinline</span> block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>     Runnable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不加crossinline会报错</span>        <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">embedFun</span><span class="token punctuation">(</span>block<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token punctuation">{</span>   Runnable <span class="token punctuation">{</span>      <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="具体化的类型参数"><a href="#具体化的类型参数" class="headerlink" title="具体化的类型参数"></a>具体化的类型参数</h2><p>其实就是<code>inline</code> + <code>reified</code> + 泛型,最典型的例子就是下面这个:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">:</span> Activity<span class="token operator">></span> Context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这个修饰符的作用就是在方法内部可以使用具体化的类型参数.</p><blockquote><p>reified 修饰符必须与 inline搭配使用</p></blockquote><h3 id="内联属性"><a href="#内联属性" class="headerlink" title="内联属性"></a>内联属性</h3><p>不多说,看代码:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> foo<span class="token operator">:</span> Foo    <span class="token keyword">inline</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> bar<span class="token operator">:</span> Bar    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ……    <span class="token keyword">inline</span> <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">var</span> bar<span class="token operator">:</span> Bar    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> ……    <span class="token keyword">set</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span> …… <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;inline-noinline-crossinline-reified&quot;&gt;&lt;a href=&quot;#inline-noinline-crossinline-reified&quot; class=&quot;headerlink&quot; title=&quot;inline/noinline/crossi
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="inline" scheme="https://www.jiangkang.tech/tags/inline/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中的infix</title>
    <link href="https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-infix/"/>
    <id>https://www.jiangkang.tech/2020/10/14/android/kotlin-zhong-de-infix/</id>
    <published>2020-10-14T10:53:03.000Z</published>
    <updated>2020-10-14T10:54:24.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="infix"><a href="#infix" class="headerlink" title="infix"></a>infix</h2><p>即<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener"> “中缀表示法”</a>,比如 <code>1 + 2</code>表示操作符以中缀的形式处于操作数的中间.(对应的也有前缀表达式,后缀表达式)</p><p>在kotlin中有这样的几种调用:</p><pre class=" language-kotlin"><code class="language-kotlin">   <span class="token keyword">val</span> map <span class="token operator">=</span> mapOf<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Int<span class="token operator">></span><span class="token punctuation">(</span>           <span class="token string">"a"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span>           <span class="token string">"b"</span> <span class="token keyword">to</span> <span class="token number">2</span>   <span class="token punctuation">)</span>   <span class="token keyword">val</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">or</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">shl</span> <span class="token number">2</span></code></pre><p>上面的<code>to</code>,<code>or</code>,<code>shl</code>都是用<code>infix</code>修饰的函数,比如<code>to</code>:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> infix <span class="token keyword">fun</span> <span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> A<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>that<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token operator">:</span> Pair<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> B<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> that<span class="token punctuation">)</span></code></pre><p>infix函数必须满足下面条件:</p><ul><li>必须是成员函数或者拓展函数</li><li>必须只有一个参数</li><li>其参数不得接受可变数量的参数,并且不能有默认值</li></ul><p>还有一点需要注意的就是: <strong>infix调用 优先级 低于算数操作符/类型转换/rangeTo操作符等,但是其优先级高于&amp;&amp; ,||,is , in等操作符,因此使用infix的时候最好按照意图在适当的地方加上括号,避免混乱</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;infix&quot;&gt;&lt;a href=&quot;#infix&quot; class=&quot;headerlink&quot; title=&quot;infix&quot;&gt;&lt;/a&gt;infix&lt;/h2&gt;&lt;p&gt;即&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="https://www.jiangkang.tech/tags/Kotlin/"/>
    
      <category term="infix" scheme="https://www.jiangkang.tech/tags/infix/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Android中的事件分发机制</title>
    <link href="https://www.jiangkang.tech/2020/10/13/android/shen-ru-qian-chu-android-zhong-de-shi-jian-fen-fa-ji-zhi/"/>
    <id>https://www.jiangkang.tech/2020/10/13/android/shen-ru-qian-chu-android-zhong-de-shi-jian-fen-fa-ji-zhi/</id>
    <published>2020-10-13T12:33:46.000Z</published>
    <updated>2020-10-13T12:34:42.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从输入硬件到Android窗口"><a href="#从输入硬件到Android窗口" class="headerlink" title="从输入硬件到Android窗口"></a>从输入硬件到Android窗口</h2><p>这里直接从底层硬件分析到事件传递到View的流程,具体的调用链查看源码,这里是基于Android 10 的源码分析的.</p><p><img src="https://oss.jiangkang.tech/jk/%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6.png" alt="输入事件"></p><p>主要流程如下:</p><ol><li>输入设备产生信号,比如手触摸屏幕,触摸屏产生电流或者电压信号,传递给设备固件</li><li>设备固件对信号进行编码和处理,比如产生中断,比如发送USB HID报告</li><li>Linux内核驱动程序接收到信号,并按照input.h中定义的协议,将信号转换成事件</li><li>EventHub通过libevdev读取各个设备(如/dev/input/event4)的事件,并传递给InputReader</li><li>InputReader将事件封装成Android事件流,传递给InputDispatcher进行分发</li><li>InputDispatcher通过InputChannel与Java层的InputEventReceiver联系上,并调用它的方法进行事件分发</li><li>最终会进入到ViewRootImpl中,根据输入阶段不同,进行不同的处理,最终会调用到DecorView的dispatchTouchEvent()方法</li><li>再之后就是我们熟悉的View/ViewGroup事件分发流程了</li></ol><h2 id="View-ViewGroup事件分发"><a href="#View-ViewGroup事件分发" class="headerlink" title="View/ViewGroup事件分发"></a>View/ViewGroup事件分发</h2><ol><li><p>进入到DecorView中的dispatchTouchEvent(event)方法:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的callback实现类有Activity,Dialog等,这里只分析Activity的</span>        <span class="token keyword">final</span> Window<span class="token punctuation">.</span>Callback cb <span class="token operator">=</span> mWindow<span class="token punctuation">.</span><span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cb <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mWindow<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mFeatureId <span class="token operator">&lt;</span> <span class="token number">0</span>                <span class="token operator">?</span> cb<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Activity中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onUserInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 调用window的事件分发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>Window的实现类是PhoneWindow中,因此:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// mDecor是DecorView</span>        <span class="token keyword">return</span> mDecor<span class="token punctuation">.</span><span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>DecorView中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">superDispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ViewGroup</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>ViewGroup中:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> handled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果window做了模糊处理,则不处理事件分发</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> actionMasked <span class="token operator">=</span> action <span class="token operator">&amp;</span> MotionEvent<span class="token punctuation">.</span>ACTION_MASK<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重制状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 拦截处理</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// View有方法可以设置</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 关键点: 拦截</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// mFirstTouchTarget == null &amp;&amp; action != ACTION_DOWN</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check for cancelation.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Update list of touch targets for pointer down, if needed.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> split <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_SPLIT_MOTION_EVENTS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>            TouchTarget newTouchTarget <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不是取消事件,也没有拦截</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canceled <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>intercepted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                        <span class="token operator">||</span> <span class="token punctuation">(</span>split <span class="token operator">&amp;&amp;</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_POINTER_DOWN<span class="token punctuation">)</span>                        <span class="token operator">||</span> actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_HOVER_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">int</span> childrenCount <span class="token operator">=</span> mChildrenCount<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTouchTarget <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> childrenCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span>actionIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 根据z重新排序子View</span>                        <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>View<span class="token operator">></span> preorderedList <span class="token operator">=</span> <span class="token function">buildTouchDispatchChildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> <span class="token keyword">boolean</span> customOrder <span class="token operator">=</span> preorderedList <span class="token operator">==</span> null                                <span class="token operator">&amp;&amp;</span> <span class="token function">isChildrenDrawingOrderEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 关键</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 为mFirstTouchTarget赋值</span>                                newTouchTarget <span class="token operator">=</span> <span class="token function">addTouchTarget</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">;</span>                                alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorderedList <span class="token operator">!=</span> null<span class="token punctuation">)</span> preorderedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Dispatch to touch targets.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mFirstTouchTarget <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 关键</span>                handled <span class="token operator">=</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> canceled<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                        TouchTarget<span class="token punctuation">.</span>ALL_POINTER_IDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                TouchTarget predecessor <span class="token operator">=</span> null<span class="token punctuation">;</span>                TouchTarget target <span class="token operator">=</span> mFirstTouchTarget<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> TouchTarget next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyDispatchedToNewTouchTarget <span class="token operator">&amp;&amp;</span> target <span class="token operator">==</span> newTouchTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token keyword">boolean</span> cancelChild <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">)</span>                                <span class="token operator">||</span> intercepted<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 关键</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> cancelChild<span class="token punctuation">,</span>                                target<span class="token punctuation">.</span>child<span class="token punctuation">,</span> target<span class="token punctuation">.</span>pointerIdBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里会进行一些判断(比如触摸点是否在对应的View内,避免无效计算),然后:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cancel<span class="token punctuation">,</span>            View child<span class="token punctuation">,</span> <span class="token keyword">int</span> desiredPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> handled<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> oldAction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cancel <span class="token operator">||</span> oldAction <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            event<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>oldAction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> handled<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> MotionEvent transformedEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newPointerIdBits <span class="token operator">==</span> oldPointerIdBits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> offsetX <span class="token operator">=</span> mScrollX <span class="token operator">-</span> child<span class="token punctuation">.</span>mLeft<span class="token punctuation">;</span>                    <span class="token keyword">final</span> <span class="token keyword">float</span> offsetY <span class="token operator">=</span> mScrollY <span class="token operator">-</span> child<span class="token punctuation">.</span>mTop<span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 关键</span>                    handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span><span class="token operator">-</span>offsetX<span class="token punctuation">,</span> <span class="token operator">-</span>offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> handled<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            transformedEvent <span class="token operator">=</span> MotionEvent<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transformedEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>newPointerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Perform any necessary transformations and dispatch.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关键</span>            handled <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">float</span> offsetX <span class="token operator">=</span> mScrollX <span class="token operator">-</span> child<span class="token punctuation">.</span>mLeft<span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">float</span> offsetY <span class="token operator">=</span> mScrollY <span class="token operator">-</span> child<span class="token punctuation">.</span>mTop<span class="token punctuation">;</span>            transformedEvent<span class="token punctuation">.</span><span class="token function">offsetLocation</span><span class="token punctuation">(</span>offsetX<span class="token punctuation">,</span> offsetY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> child<span class="token punctuation">.</span><span class="token function">hasIdentityMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                transformedEvent<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getInverseMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//关键</span>            handled <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>transformedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Done.</span>        transformedEvent<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> handled<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里就将事件分发给子View了.</p></li><li><p>View#dispatchTouchEvent():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED <span class="token operator">&amp;&amp;</span> <span class="token function">handleScrollBarDragging</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 关键</span>            ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                    <span class="token comment" spellcheck="true">// OnTouchListener回调</span>                    <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果OnTouchListener消耗了事件,则不会执行后面的onTouchEvent()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里可以看到<strong>OnTouchListener#onTouch() 优先级 高于 onTouchEvent().</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> x <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">float</span> y <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> viewFlags <span class="token operator">=</span> mViewFlags<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> clickable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CLICKABLE                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> LONG_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> LONG_CLICKABLE<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> CONTEXT_CLICKABLE<span class="token punctuation">)</span> <span class="token operator">==</span> CONTEXT_CLICKABLE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTouchDelegate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mTouchDelegate<span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clickable <span class="token operator">||</span> <span class="token punctuation">(</span>viewFlags <span class="token operator">&amp;</span> TOOLTIP<span class="token punctuation">)</span> <span class="token operator">==</span> TOOLTIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                    <span class="token keyword">boolean</span> prepressed <span class="token operator">=</span> <span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PREPRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> prepressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">boolean</span> focusTaken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFocusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFocusableInTouchMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFocused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            focusTaken <span class="token operator">=</span> <span class="token function">requestFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mHasPerformedLongPress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mIgnoreNextUpEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// This is a tap, so remove the longpress check</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 处理点击事件</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>focusTaken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPerformClick <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 一个Runnbale</span>                                    mPerformClick <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">post</span><span class="token punctuation">(</span>mPerformClick<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">//一般不会进入这个分支</span>                                    <span class="token function">performClickInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    mIgnoreNextUpEvent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                    mHasPerformedLongPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clickable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 处理长按点击事件</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isInScrollingContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPrivateFlags <span class="token operator">|=</span> PFLAG_PREPRESSED<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 检查点击事件</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingCheckForTap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            mPendingCheckForTap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckForTap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        mPendingCheckForTap<span class="token punctuation">.</span>x <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mPendingCheckForTap<span class="token punctuation">.</span>y <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">postDelayed</span><span class="token punctuation">(</span>mPendingCheckForTap<span class="token punctuation">,</span> ViewConfiguration<span class="token punctuation">.</span><span class="token function">getTapTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 长按</span>                        <span class="token function">setPressed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL<span class="token operator">:</span>                    <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mInContextButtonPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mHasPerformedLongPress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mIgnoreNextUpEvent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_FINGER_DOWN<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ambiguousGesture <span class="token operator">&amp;&amp;</span> <span class="token function">hasPendingLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pointInView</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> touchSlop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ViewConfiguration<span class="token punctuation">.</span><span class="token function">getLongPressTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">*</span> mAmbiguousGestureMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// Subtract the time already spent</span>                            delay <span class="token operator">-=</span> event<span class="token punctuation">.</span><span class="token function">getEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> event<span class="token punctuation">.</span><span class="token function">getDownTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                    delay<span class="token punctuation">,</span>                                    x<span class="token punctuation">,</span>                                    y<span class="token punctuation">,</span>                                    TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__LONG_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        touchSlop <span class="token operator">*=</span> mAmbiguousGestureMultiplier<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pointInView</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> touchSlop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Outside button</span>                        <span class="token comment" spellcheck="true">// Remove any future long press/tap checks</span>                        <span class="token function">removeTapCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mPrivateFlags <span class="token operator">&amp;</span> PFLAG_PRESSED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">setPressed</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        mPrivateFlags3 <span class="token operator">&amp;=</span> <span class="token operator">~</span>PFLAG3_FINGER_DOWN<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">final</span> <span class="token keyword">boolean</span> deepPress <span class="token operator">=</span>                            motionClassification <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>CLASSIFICATION_DEEP_PRESS<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>deepPress <span class="token operator">&amp;&amp;</span> <span class="token function">hasPendingLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// process the long click action immediately</span>                        <span class="token function">removeLongPressCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">checkForLongClick</span><span class="token punctuation">(</span>                                <span class="token number">0</span> <span class="token comment" spellcheck="true">/* send immediately */</span><span class="token punctuation">,</span>                                x<span class="token punctuation">,</span>                                y<span class="token punctuation">,</span>                                TOUCH_GESTURE_CLASSIFIED__CLASSIFICATION__DEEP_PRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>View#onTouchEvent()中的逻辑也比较复杂,需要注意几个要点:</p><ul><li>TouchDelegate具有很高的优先级,会最先进行判断,它是用来拓展View的可点击区域的(适合于View尺寸有限,但是需要扩大点击区域的场景)</li><li>点击事件和长安事件目前都封装成了Runnable,在DOWN,MOVE,UP,CANCEL等几种事件里都有逻辑,本质就是通过view的延时post方法,即Handler的延时发送来进行调度的</li></ul></li></ol><p>基本流程如下:</p><ol><li>DecorView -&gt; Activity -&gt; Window -&gt;ViewGroup#dispatchTouchEvent()</li><li>ViewGroup#onInterceptTouchEvent(ev),返回true,表示拦截,否则表示不拦截</li><li>如果不拦截,则调用dispatchTransformedTouchEvent(),child为null,则调用super.dispatchTouchEvent(),super是什么,是View,因此把当前ViewGroup当作View,并执行它的dispatchTouchEvent()方法;如果child不为null,则直接执行child的dispatchTouchEvent()方法,进入循环,遇到没有子View的时候执行View的dispatchTouchEvent()方法;</li><li>如果拦截,则调用自己的dispatchTransformedTouchEvent(),传入的child为null,因此会执行super.dispatchTouchEvent(),把自己当作View,执行View的dispatchTouchEvent()方法;</li><li>View#dispatchTouchEvent()方法中会执行<code>onTouchEvent()</code>方法;</li></ol><p>到这里整个流程其实就走通了,唯一可能导致疑惑的地方其实就是ViewGroup如何调用自身的onTouchEvent(),其实这里记住一点即可:</p><p><code>ViewGroup的super就是View,View中才有默认实现的onTouchEvent()</code>.</p><h2 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h2><p>从上面的源码分析可以看到:</p><p>OnTouchListener#onTouch()  大于  View#onTouchEvent() 大于 OnClickListener#onClick()</p><h2 id="View-onTouchEvent-返回值问题"><a href="#View-onTouchEvent-返回值问题" class="headerlink" title="View#onTouchEvent()返回值问题"></a>View#onTouchEvent()返回值问题</h2><p><strong>View如果消费了ACTION_DOWN,则后续的一系列ACTION都会传给这个View的onTouchEvent()来处理; View如果不消费ACTION_DOWN,则后续的一系列ACTION都不会交给它的onTouchEvent()处理;如果当前View和它的兄弟View都无法消费ACTION_DOWN,则会找它的父布局的onTouchEvent()去消费</strong></p><p><strong>所谓消费,指的就是View#onTouchEvent()的返回值,返回true,表示消费了,否则表示没消费</strong></p><h2 id="ViewGroup-onInterceptTouchEvent-ev-的问题"><a href="#ViewGroup-onInterceptTouchEvent-ev-的问题" class="headerlink" title="ViewGroup#onInterceptTouchEvent(ev)的问题"></a>ViewGroup#onInterceptTouchEvent(ev)的问题</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN                    <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>从dispatchTouchEvent()开始,一层层的调用,直到View#onTouchEvent(),返回值其实是ViewGroup#dispatchTouchEvent()最终使用的:</p><p>如果返回fasle,则不会为mFirstTouchTarget赋值,否则将child赋值给mFristTouchTarget.那这又影响了什么呢?</p><p>如果不调用API请求不拦截事件,则只有两种情况下的任意一种,才会触发拦截:</p><ul><li>当前事件是ACTION_DOWN</li><li>mFirstTouchTarget != null (当前ViewGroup的所有子View的onTouchEvent()均返回false)</li></ul><p>因此得出结论:</p><ul><li><strong>只有ViewGroup才有onInterceptTouchEvent(ev)方法</strong></li><li><strong>只要是ACTION_DOWN事件,ViewGroup都会执行onInterceptTouchEvent(ev)方法</strong></li><li><strong>如果不是ACTION_DOWN事件,则要判断该ViewGroup的所有子View中是否能消耗ACTION_DOWN事件,即子View中是否有onTouchEvent()返回为true,如果有,则还会执行onInterceptTouchEvent(ev)方法,如果一个都没有,则不会执行onInterceptTouchEvent(ev)方法</strong></li><li><strong>如果ViewGroup的onInterceptTouchEvent(ev)返回了true,则其子View一种事件都获取不到,因为不会执行子View的dispatchTouchEvent()方法,就算仅仅是拦截了ACTION_DOWN;如果不拦截ACTION_DOWN,而拦截ACTION_MOVE,则子View可以正常捕获到ACTION_DOWN,但是后面会主动执行一个ACTION_CANCEL,就不再接收其他事件了.</strong></li></ul><h2 id="adb查看工具"><a href="#adb查看工具" class="headerlink" title="adb查看工具"></a>adb查看工具</h2><ul><li><p><code>getevent</code> : 输出所有event设备的基本信息</p><pre class=" language-shell"><code class="language-shell">130|cmi:/dev/input $ geteventadd device 1: /dev/input/event7  name:     "kona-mtp-snd-card USB_3_5 Jack"   #声音add device 2: /dev/input/event6  name:     "kona-mtp-snd-card Button Jack"    #add device 3: /dev/input/event5  name:     "kona-mtp-snd-card Headset Jack"  #耳机add device 4: /dev/input/event4  name:     "fts"                             #触摸屏add device 5: /dev/input/event1  name:     "uinput-goodix"                   #指纹传感器add device 6: /dev/input/event3               # 音量上按键  name:     "gpio-keys"add device 7: /dev/input/event0               #高通按键驱动  name:     "qpnp_pon"add device 8: /dev/input/event2  name:     "aw8697_haptic"                  #电机驱动</code></pre><p>此时如果触摸屏幕或者按键,会输出:</p><pre class=" language-shell"><code class="language-shell">/dev/input/event4: 0003 0039 ffffffff</code></pre><p>格式为: <code>设备名: 事件type 事件code 事件value</code> (这里的数字是16进制的)</p><p>如果使用<code>getevent -l</code>,则会输出具体的常量名称,比较易于理解:</p><pre class=" language-shell"><code class="language-shell">/dev/input/event4: EV_SYN       SYN_REPORT           00000000</code></pre><p>这些常量是定义在<code>sysroot/usr/include/linux/input.h</code>中的.</p></li><li><p><code>sendevent</code>: 模拟发送事件 (可能需要权限)</p><p>格式为: </p><pre class=" language-shell"><code class="language-shell">sendevent DEVICE TYPE CODE VALUE</code></pre><p>如:</p><pre class=" language-shell"><code class="language-shell">sendevent /dev/input/event0 0001 0114 00000001</code></pre><p>这里面的值是由16进制转换而成的10进制数.</p></li><li><p><code>getevent -p</code>: 查看详细的交互设备信息</p><p>输出如下:</p><pre class=" language-shell"><code class="language-shell">1|cmi:/dev/input $ getevent -padd device 1: /dev/input/event7  name:     "kona-mtp-snd-card USB_3_5 Jack"  events:    SW  (0005): 0002  0004  0013  input props:    <none>add device 2: /dev/input/event6  name:     "kona-mtp-snd-card Button Jack"  events:    KEY (0001): 00e2  0101  0102  0103  0104  0105  input props:    <none>add device 3: /dev/input/event5  name:     "kona-mtp-snd-card Headset Jack"  events:    SW  (0005): 0002  0004  0006  0007  0010  0011  0012  0013  input props:    <none>add device 4: /dev/input/event4  name:     "fts"  events:    KEY (0001): 0011  0012  0018  001a  001b  001f  0021  0026                002c  002e  002f  0032  003b  003c  003d  003e                003f  0067  0069  006a  006c  008f  0096  0145                014a  0152  0162    ABS (0003): 002f  : value 0, min 0, max 9, fuzz 0, flat 0, resolution 0                0030  : value 0, min 0, max 1080, fuzz 0, flat 0, resolution 0                0031  : value 0, min 0, max 2340, fuzz 0, flat 0, resolution 0                0032  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                0033  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                0034  : value 0, min -90, max 90, fuzz 0, flat 0, resolution 0                0035  : value 0, min 0, max 1079, fuzz 0, flat 0, resolution 0                0036  : value 0, min 0, max 2339, fuzz 0, flat 0, resolution 0                0039  : value 0, min 0, max 65535, fuzz 0, flat 0, resolution 0                003b  : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0  input props:    INPUT_PROP_DIRECTadd device 5: /dev/input/event1  name:     "uinput-goodix"  events:    KEY (0001): 0066  0067  0069  006a  006c  0072  0073  0074                008b  009e  00d4  00d8  00d9  input props:    <none>add device 6: /dev/input/event3  name:     "gpio-keys"  events:    KEY (0001): 0073    SW  (0005): 0000  input props:    <none>add device 7: /dev/input/event0  name:     "qpnp_pon"  events:    KEY (0001): 0072  0074  input props:    <none>add device 8: /dev/input/event2  name:     "aw8697_haptic"  events:    FF  (0015): 0050  0051  0052  005d  0060  input props:    <none></code></pre></li><li><p><code>getevent -lp</code>或者 <code>getevent -lp /dev/input/event4</code> : 输出交互设备信息文字标签信息</p><pre class=" language-shell"><code class="language-shell">add device 1: /dev/input/event4  name:     "fts"  events:    KEY (0001): KEY_W                 KEY_E                 KEY_O                 KEY_LEFTBRACE                KEY_RIGHTBRACE        KEY_S                 KEY_F                 KEY_L                KEY_Z                 KEY_C                 KEY_V                 KEY_M                KEY_F1                KEY_F2                KEY_F3                KEY_F4                KEY_F5                KEY_UP                KEY_LEFT              KEY_RIGHT                KEY_DOWN              KEY_WAKEUP            KEY_WWW               BTN_TOOL_FINGER                BTN_TOUCH             0152                  KEY_GOTO    ABS (0003): ABS_MT_SLOT           : value 0, min 0, max 9, fuzz 0, flat 0, resolution 0                ABS_MT_TOUCH_MAJOR    : value 0, min 0, max 1080, fuzz 0, flat 0, resolution 0                ABS_MT_TOUCH_MINOR    : value 0, min 0, max 2340, fuzz 0, flat 0, resolution 0                ABS_MT_WIDTH_MAJOR    : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                ABS_MT_WIDTH_MINOR    : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0                ABS_MT_ORIENTATION    : value 0, min -90, max 90, fuzz 0, flat 0, resolution 0                ABS_MT_POSITION_X     : value 0, min 0, max 1079, fuzz 0, flat 0, resolution 0                ABS_MT_POSITION_Y     : value 0, min 0, max 2339, fuzz 0, flat 0, resolution 0                ABS_MT_TRACKING_ID    : value 0, min 0, max 65535, fuzz 0, flat 0, resolution 0                ABS_MT_DISTANCE       : value 0, min 0, max 127, fuzz 0, flat 0, resolution 0  input props:    INPUT_PROP_DIRECT</code></pre></li><li><p><code>getevent -i</code>: 显示更加详细的信息</p></li><li><p><code>getevent -t</code>: 显示时间戳</p></li></ul><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><ol><li><a href="https://source.android.com/devices/input" target="_blank" rel="noopener">https://source.android.com/devices/input</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从输入硬件到Android窗口&quot;&gt;&lt;a href=&quot;#从输入硬件到Android窗口&quot; class=&quot;headerlink&quot; title=&quot;从输入硬件到Android窗口&quot;&gt;&lt;/a&gt;从输入硬件到Android窗口&lt;/h2&gt;&lt;p&gt;这里直接从底层硬件分析到事件传递到V
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="事件分发" scheme="https://www.jiangkang.tech/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android中的Broadcast</title>
    <link href="https://www.jiangkang.tech/2020/10/09/android/qian-tan-android-zhong-de-broadcast/"/>
    <id>https://www.jiangkang.tech/2020/10/09/android/qian-tan-android-zhong-de-broadcast/</id>
    <published>2020-10-09T10:36:00.000Z</published>
    <updated>2020-10-09T10:38:55.203Z</updated>
    
    <content type="html"><![CDATA[<p>![Android 广播](<a href="https://oss.jiangkang.tech/jk/Android" target="_blank" rel="noopener">https://oss.jiangkang.tech/jk/Android</a> 广播.png)</p><h2 id="广播实现机制"><a href="#广播实现机制" class="headerlink" title="广播实现机制"></a>广播实现机制</h2><p>先思考几个问题:</p><ul><li>广播注册到了什么地方?</li><li>当发送广播的时候,是谁在分发广播?</li><li>BroadcastReceiver是如何接收到广播的?</li></ul><h2 id="广播注册"><a href="#广播注册" class="headerlink" title="广播注册"></a>广播注册</h2><p>从 Activity或者Context的<code>registerReceiver()</code>方法一路查看调用,可知最终注册实际上是在<code>ActivityManagerService</code>里进行的.</p><p>注册到了一个成员变量中:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>IBinder<span class="token punctuation">,</span> ReceiverList<span class="token operator">></span> mRegisteredReceivers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的ReceiverList实际上就是BroadcastFilter(IntentFilter的继承类)的ArrayList封装.</p><p>而IBinder则是<code>IItentReceiver</code>,是一个AIDL定义的接口,在 <code>LoadedApk</code>的<code>ReceiverDispatcher</code>中有相应的代理实现类<code>IntentReceiver</code>.</p><p><code>BroadcastReceiver</code>会被传递并封装到<code>IItentReceiver</code>中.</p><p>这样上面说的map其实也就清楚了: key ~= BroadcastReceiver, value ~= List<IntentFilter></p><h2 id="广播发送"><a href="#广播发送" class="headerlink" title="广播发送"></a>广播发送</h2><p>从<code>sendBroadcast(Intent intent)</code>出发,最终依然是由<code>ActivityManagerService#broadcastIntent()</code>方法处理的.</p><p>这里大概几个步骤:</p><ol><li>检查Intent对象合法性,是否有问题,然后封装一些中间类传递数据</li><li>检查Intent是否为一些系统级的广播ACTION,然后发出Handler消息做对应的处理</li><li>sticky广播相关的逻辑</li><li>查询处理静态注册可以接收的reciever</li><li>通过IntentResolver查询符合要求的BroadcastFilter</li><li>获取对应的BroadcastQueue对象(有三种,前台,后台,卸载),并将对应的Intent封装到<code>BroadcastRecord</code>中,并添加到<code>BroadcastQueue</code>中(<code>queue.enqueueOrderedBroadcastLocked(r);</code>)</li><li>开始<code>BroadcastQueue</code>的调度,这里需要注意的是分为两种调度:<ul><li>并行: <code>enqueueParallelBroadcastLocked(r)</code></li><li>串行: <code>enqueueOrderedBroadcastLocked(r)</code></li></ul></li></ol><h2 id="广播分发-调度"><a href="#广播分发-调度" class="headerlink" title="广播分发/调度"></a>广播分发/调度</h2><p><code>BroadcastReceiver</code>中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleBroadcastsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG_BROADCAST<span class="token punctuation">,</span> <span class="token string">"Schedule broadcasts ["</span>                <span class="token operator">+</span> mQueueName <span class="token operator">+</span> <span class="token string">"]: current="</span>                <span class="token operator">+</span> mBroadcastsScheduled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mBroadcastsScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>BROADCAST_INTENT_MSG<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mBroadcastsScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">BroadcastHandler</span><span class="token punctuation">(</span>Looper looper<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>looper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 接收调度消息</span>                <span class="token keyword">case</span> BROADCAST_INTENT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>                            TAG_BROADCAST<span class="token punctuation">,</span> <span class="token string">"Received BROADCAST_INTENT_MSG ["</span>                            <span class="token operator">+</span> mQueueName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 此处是关键</span>                    <span class="token function">processNextBroadcast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> BROADCAST_TIMEOUT_MSG<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">broadcastTimeoutLocked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到这里其实就是通过Handler Message机制进行调度的.</p><p><strong>调度的逻辑里会区分当前进程是否已经正在运行,广播是串行还是并行的,然后进入各自的调度逻辑.</strong></p><p>这里挑一个串行的调度逻辑分析下,并行的逻辑也是大同小异的.</p><p>串行分发逻辑最终都会通过oneway binder调用<code>IIntentReceiver</code>的<code>performReceive()</code>方法去执行;</p><p>正如前面所说,在<code>LoadedApk.ReceiverDispathcer</code>  中有:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performReceive</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> String data<span class="token punctuation">,</span>                Bundle extras<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ordered<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sticky<span class="token punctuation">,</span> <span class="token keyword">int</span> sendingUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Args args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Args</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">,</span> extras<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span>                    sticky<span class="token punctuation">,</span> sendingUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Null intent received"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>DEBUG_BROADCAST<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> seq <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"seq"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"Enqueueing broadcast "</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">" seq="</span> <span class="token operator">+</span> seq <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// intent一般不为null,因此会执行args中的runnbale</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>mActivityThread<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mRegistered <span class="token operator">&amp;&amp;</span> ordered<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>DEBUG_BROADCAST<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>                            <span class="token string">"Finishing sync broadcast to "</span> <span class="token operator">+</span> mReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>                    args<span class="token punctuation">.</span><span class="token function">sendFinished</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>在<code>getRunnable()</code>方法中有:</p><pre class=" language-java"><code class="language-java">                        ClassLoader cl <span class="token operator">=</span> mReceiver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                        intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>                        receiver<span class="token punctuation">.</span><span class="token function">setPendingResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        receiver<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">getPendingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                           <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span></code></pre><p>显而易见的,又是通过反射获取Receiver的对象并调用<code>onReceive()</code>方法.</p><p>执行完毕或者失败,发送执行完毕消息.</p><h2 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h2><ul><li><p>普通广播/有序广播/粘性广播</p><p>普通广播随机顺序发送广播,有序广播串行发送数据,粘性广播不安全已被废弃</p></li><li><p>串行/并行广播</p><p>静态广播接收器不管广播是否为并行,都按照串行处理</p><p>动态广播接收器遇到串行广播则按照串行处理,遇到并行广播则按照并行处理.</p></li></ul><h2 id="接收顺序问题"><a href="#接收顺序问题" class="headerlink" title="接收顺序问题"></a>接收顺序问题</h2><ul><li>广播发送时本身的优先级(比如有序广播)</li><li>动态广播先于静态广播接收器收到广播 </li></ul><h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><p>主要是调用<code>LocalBroadcastManager</code>去使用,与系统广播的各种机制其实没什么关系,只是利用了一下<code>BroadcastReceiver</code>这个抽象类而已,其本质就是观察者模式 + Handler消息传递.因此在应用内传递效率颇高.</p><p>而且它的实现在支持包中,并不在源码中,目前是在androidx的支持包中.</p><p>看一段代码就明白了:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">executePendingBroadcasts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> BroadcastRecord<span class="token punctuation">[</span><span class="token punctuation">]</span> brs<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mReceivers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                brs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BroadcastRecord</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>brs<span class="token punctuation">)</span><span class="token punctuation">;</span>                mPendingBroadcasts<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>brs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> BroadcastRecord br <span class="token operator">=</span> brs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> nbr <span class="token operator">=</span> br<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nbr<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> ReceiverRecord rec <span class="token operator">=</span> br<span class="token punctuation">.</span>receivers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rec<span class="token punctuation">.</span>dead<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rec<span class="token punctuation">.</span>receiver<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>mAppContext<span class="token punctuation">,</span> br<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://developer.android.com/guide/components/broadcasts" target="_blank" rel="noopener">https://developer.android.com/guide/components/broadcasts</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;![Android 广播](&lt;a href=&quot;https://oss.jiangkang.tech/jk/Android&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://oss.jiangkang.tech/jk/Android&lt;/a&gt; 广播
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Broadcast" scheme="https://www.jiangkang.tech/tags/Broadcast/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android中的Handler</title>
    <link href="https://www.jiangkang.tech/2020/10/06/android/qian-tan-android-zhong-de-handler/"/>
    <id>https://www.jiangkang.tech/2020/10/06/android/qian-tan-android-zhong-de-handler/</id>
    <published>2020-10-06T12:34:56.000Z</published>
    <updated>2020-10-09T10:38:09.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Handler-post-runnable-vs-Handler-sendMessage-Message-msg"><a href="#Handler-post-runnable-vs-Handler-sendMessage-Message-msg" class="headerlink" title="Handler.post(runnable) vs Handler.sendMessage(Message msg)"></a><code>Handler.post(runnable)</code> vs <code>Handler.sendMessage(Message msg)</code></h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span><span class="token function">getPostMessage</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Message <span class="token function">getPostMessage</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message m <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Message的callback即是runnable</span>        m<span class="token punctuation">.</span>callback <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其实两种方式最终都是利用的<code>sendMessageDelayed</code>方法.区别是传递的Message对象.</p><ul><li><p><code>Handler.post(Runnbale runnable)</code></p><p>它的Message中callback为runnable</p></li><li><p><code>Handler.sendMessage(Message msg)</code></p><p> 一般传递给它的message并不会指定callback,也就是说callback为null</p></li></ul><p>那么Message是否带callback有何影响?这里要说一下Message最终分发的逻辑:</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">// 优先处理Message中自带的callback,其次就是Handler中的callback,再才是handleMessage方法 </span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置给Handler的Callback</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回true,则处理完毕;返回false,则后面handleMessage()会继续处理</span>        <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Handler中需要重写的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    </code></pre><p>也就是一个执行优先级的区别了.</p><h2 id="Handler与线程"><a href="#Handler与线程" class="headerlink" title="Handler与线程"></a>Handler与线程</h2><p><code>ActivityThread</code>中已经为主线程准备好了Looper,即已经创建了Looper,并开启了循环:</p><pre class=" language-java"><code class="language-java">Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这就相当于为主线程暴露了一个消息传递的入口,在其他线程里可以创建一个主线程Handler,向主线程中传递消息,或者切换到主线程执行任务.</p><p>既然主线程可以这么做,其他线程也可以这么做,如果需要为线程开启消息循环机制,需要两步:</p><pre class=" language-java"><code class="language-java">Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于主线程之外的线程的消息传递机制可以参考一下<code>HandlerThread</code>的实现方式,也可以直接使用<code>HandlerThread</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mTid <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">myTid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Process<span class="token punctuation">.</span><span class="token function">setThreadPriority</span><span class="token punctuation">(</span>mPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLooperPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mTid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>子线程可以被销毁,但是主线程在APP生命周期中一直存在着,因此主线程的Looper其实是不允许停止的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里传递的false参数,不允许停止</span>        <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainLooper <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"The main Looper has already been prepared."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sMainLooper <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="Message-与-MessageQueue"><a href="#Message-与-MessageQueue" class="headerlink" title="Message 与 MessageQueue"></a>Message 与 MessageQueue</h2><p>Message本身的对象池复用不必多少,需要说的是<strong>Message对象实际上是一个单链表</strong>,Message中的next字段就是下一个Message节点.</p><p>我们都知道LinkedList可以当作一个队列使用,这里Message其实就是一个链表,自然也可以当作一个队列使用.</p><p>而MessageQueue则封装了Message的入队出队操作,<strong>还需要注意的是这并不是完全意义上的先进先出队列</strong>,因为Message中存在延时时间,所以入队的时候需要根据执行时间插入到指定的节点.</p><p>既然大体上还算是一个队列,那么肯定有一个入队和出队的过程:</p><ul><li><p>入队:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalStateException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// New head, wake up the event queue if blocked.</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>                needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prev<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// We can assume mPtr != 0 because mQuitting is false.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p>出队:</p><p>这里既然是一个消息循环,那么应该是循环开始的时候会不断从队列中取出Message,这里是Looper.loop():</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        me<span class="token punctuation">.</span>mInLoop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 取出消息</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// No message indicates that the message queue is quitting.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> origWorkSource <span class="token operator">=</span> ThreadLocalWorkSource<span class="token punctuation">.</span><span class="token function">setUid</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>workSourceUid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分发消息</span>                msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里其实用的MessageQueue的next方法取出消息的:</p><pre class=" language-java"><code class="language-java">    Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ptr <span class="token operator">=</span> mPtr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pendingIdleHandlerCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 only during first iteration</span>        <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Got a message.</span>                        mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No more messages.</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Process the quit message now that all pending messages have been handled.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// If first time idle, then get the number of idlers to run.</span>                <span class="token comment" spellcheck="true">// Idle handles only run if the queue is empty or if the first message</span>                <span class="token comment" spellcheck="true">// in the queue (possibly a barrier) is due to be handled in the future.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;</span> <span class="token number">0</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mMessages <span class="token operator">==</span> null <span class="token operator">||</span> now <span class="token operator">&lt;</span> mMessages<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pendingIdleHandlerCount <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No idle handlers to run.  Loop and wait some more.</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingIdleHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPendingIdleHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdleHandler</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pendingIdleHandlerCount<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mPendingIdleHandlers <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>mPendingIdleHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Run the idle handlers.</span>            <span class="token comment" spellcheck="true">// We only ever reach this code block during the first iteration.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingIdleHandlerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> IdleHandler idler <span class="token operator">=</span> mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// release the reference to the handler</span>                <span class="token keyword">boolean</span> keep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    keep <span class="token operator">=</span> idler<span class="token punctuation">.</span><span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"IdleHandler threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mIdleHandlers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Reset the idle handler count to 0 so we do not run them again.</span>            pendingIdleHandlerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// While calling an idle handler, a new message could have been delivered</span>            <span class="token comment" spellcheck="true">// so go back and look again for a pending message without waiting.</span>            nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>其实也是一个根据时间查找节点的过程.</p></li></ul><p>再补充一点,MessageQueue实际上是在Looper实例化的时候创建的,并且Looper持有了MessageQueue的引用,Handler中使用的就是Looper传递过去的MessageQueue.</p><p>开发者可以使用<code>Looper.myQueue()</code>获取对应的MessageQueue对象.</p><h2 id="IdleHandler"><a href="#IdleHandler" class="headerlink" title="IdleHandler"></a>IdleHandler</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 消息队列为空时的回调接口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">IdleHandler</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前MessageQueue为空,即阻塞时,执行这个回调方法</span>        <span class="token comment" spellcheck="true">// 返回true,则会一直保持这个IdleHandler,会重复执行,返回fasle则只执行一次</span>        <span class="token keyword">boolean</span> <span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>IdleHandler</code>时MessageQueue中的一个内部接口.当消息队列阻塞时,即消息为空,或当前没有要执行的消息的时候就会执行这个IdleHandler.</p><p>一般添加<code>IdleHandler</code>都是使用:</p><pre class=" language-kotlin"><code class="language-kotlin">Looper<span class="token punctuation">.</span><span class="token function">myQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIdleHandler</span> <span class="token punctuation">{</span>           <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>一般用在性能优化场景和一些不抢占主线程任务资源但是也有机会执行的场景:</p><ul><li>ActivityThread中的GC操作</li><li>LeakCanary中内存泄漏提示Toast的显示</li><li>Android的严格模式</li><li>各种Instrumentation</li></ul><h2 id="同步消息-异步消息-SyncBarrier-同步屏障"><a href="#同步消息-异步消息-SyncBarrier-同步屏障" class="headerlink" title="同步消息/异步消息/SyncBarrier(同步屏障)"></a>同步消息/异步消息/SyncBarrier(同步屏障)</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>async<span class="token punctuation">)</span> <span class="token punctuation">{</span>            flags <span class="token operator">|=</span> FLAG_ASYNCHRONOUS<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>FLAG_ASYNCHRONOUS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Message 中可以通过调用<code>setAsynchronous()</code>方法来设置是否为异步消息.实际使用的时候,需要使用<code>MessageCompat</code>.</p><p>同步消息和异步消息的发送其实都是通过<code>sendMessageAtTime</code>发送的,这之后都会执行到:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> MessageQueue queue<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Message msg<span class="token punctuation">,</span>            <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里赋值了target为当前Handler   </span>        msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>workSourceUid <span class="token operator">=</span> ThreadLocalWorkSource<span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>而SyncBarrier则是在MessageQueue中通过<code>postSyncBarrier(long when)</code>添加的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">postSyncBarrier</span><span class="token punctuation">(</span><span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Enqueue a new sync barrier token.</span>        <span class="token comment" spellcheck="true">// We don't need to wake the queue because the purpose of a barrier is to stall it.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> token <span class="token operator">=</span> mNextBarrierToken<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Message msg <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> token<span class="token punctuation">;</span>            Message prev <span class="token operator">=</span> null<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>when <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>when <span class="token operator">&lt;=</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> token<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,<strong>这里的Message实际上没有给target赋值,因此target = null</strong>.也就是说<strong>SyncBarrier是target = null的Message</strong>.</p><p>当loop的时候如果遇到SyncBarrier,则会去寻找下一个异步消息,因此这里<strong>SyncBarrier的作用是拦截同步消息,通过异步消息.</strong></p><p>在MessageQueue的next方法中有这么一段就是处理这部分逻辑的:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>SyncBarrier一般都是成对使用的:</p><ul><li><code>private int postSyncBarrier(long when)</code></li><li><code>public void removeSyncBarrier(int token)</code></li></ul><p>不过目前这两个方法在应用层都无法使用.具体的使用场景可以参考<code>ViewRootImpl</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">scheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            mTraversalBarrier <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSyncBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mChoreographer<span class="token punctuation">.</span><span class="token function">postCallback</span><span class="token punctuation">(</span>                    Choreographer<span class="token punctuation">.</span>CALLBACK_TRAVERSAL<span class="token punctuation">,</span> mTraversalRunnable<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyRendererOfFramePending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pokeDrawLockIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unscheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSyncBarrier</span><span class="token punctuation">(</span>mTraversalBarrier<span class="token punctuation">)</span><span class="token punctuation">;</span>            mChoreographer<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>                    Choreographer<span class="token punctuation">.</span>CALLBACK_TRAVERSAL<span class="token punctuation">,</span> mTraversalRunnable<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">doTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSyncBarrier</span><span class="token punctuation">(</span>mTraversalBarrier<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Debug<span class="token punctuation">.</span><span class="token function">stopMethodTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mProfile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="内存泄漏问题"><a href="#内存泄漏问题" class="headerlink" title="内存泄漏问题"></a>内存泄漏问题</h2><p>Handler的内存泄漏问题是一个老生常谈的问题了,这里就不多说了,一般的场景有:</p><ul><li><p>内部类/匿名内部类</p><p>内部类/匿名内部类会隐私持有外部对象,容易造成内存泄漏,因此需要使用静态内部类</p></li><li><p>Callback问题</p><p>在Activity销毁或者任务执行完之后需要removeCallback,不然也有可能会导致内存泄漏</p></li></ul><h2 id="为什么主线程不会因为Looper-loop-而阻塞"><a href="#为什么主线程不会因为Looper-loop-而阻塞" class="headerlink" title="为什么主线程不会因为Looper.loop()而阻塞?"></a>为什么主线程不会因为Looper.loop()而阻塞?</h2><p>前面的loop循环有说过,里面有一个无限循环,但是为什么不会因此阻塞呢,导致无法处理其他的主线程任务.</p><p>这里需要明确一点:</p><ul><li><p>主线程任务都会通过Message消息传递机制执行,也就是说最终都会在loop()中获取到并执行</p><p>Android Activity/Service的各种回调,比如onCreate()/onResume()等都是ActivityThread中H中有对应的消息类型进行处理,其实都是在消息队列中,并不会有什么其他类型的主线程任务会有别的方式去执行.</p></li></ul><p>但是loop()中的无限循环,会很耗费资源吗?当没有任务时,是简单的sleep吗,那是如何唤醒的呢?</p><p>关键之处就在MessageQueue中next方法中的一个native方法调用:</p><pre class=" language-java"><code class="language-java"><span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>android_os_MessageQueue.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> NativeMessageQueue<span class="token operator">::</span><span class="token function">pollOnce</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject pollObj<span class="token punctuation">,</span> <span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mPollEnv <span class="token operator">=</span> env<span class="token punctuation">;</span>    mPollObj <span class="token operator">=</span> pollObj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里的Looper是在Looper.h中定义的</span>    mLooper<span class="token operator">-</span><span class="token operator">></span><span class="token function">pollOnce</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    mPollObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    mPollEnv <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">Throw</span><span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token operator">-</span><span class="token operator">></span><span class="token function">DeleteLocalRef</span><span class="token punctuation">(</span>mExceptionObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        mExceptionObj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到这里其实用到的是Native层的<code>Looper</code>的<code>poolOnce</code>方法.</p><p>Native层的<code>Looper</code>支持监控文件描述符事件,还支持callback,并且其内部使用的是<code>epoll()</code>方式.</p><p>在<code>Looper.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> Looper<span class="token operator">::</span><span class="token function">pollOnce</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeoutMillis<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outFd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outEvents<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span> outData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mResponseIndex <span class="token operator">&lt;</span> mResponses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> Response<span class="token operator">&amp;</span> response <span class="token operator">=</span> mResponses<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span>mResponseIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ident <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ident<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ident <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> fd <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>                <span class="token keyword">int</span> events <span class="token operator">=</span> response<span class="token punctuation">.</span>events<span class="token punctuation">;</span>                <span class="token keyword">void</span><span class="token operator">*</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outFd <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outFd <span class="token operator">=</span> fd<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outEvents <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outEvents <span class="token operator">=</span> events<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>outData <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outData <span class="token operator">=</span> data<span class="token punctuation">;</span>                <span class="token keyword">return</span> ident<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outFd <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outFd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outEvents <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outEvents <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outData <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">*</span>outData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里</span>        result <span class="token operator">=</span> <span class="token function">pollInner</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> Looper<span class="token operator">::</span><span class="token function">pollInner</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Adjust the timeout based on when the next message is due.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mNextMessageUptime <span class="token operator">!=</span> LLONG_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nsecs_t now <span class="token operator">=</span> <span class="token function">systemTime</span><span class="token punctuation">(</span>SYSTEM_TIME_MONOTONIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> messageTimeoutMillis <span class="token operator">=</span> <span class="token function">toMillisecondTimeoutDelay</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> mNextMessageUptime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageTimeoutMillis <span class="token operator">>=</span> <span class="token number">0</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> messageTimeoutMillis <span class="token operator">&lt;</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            timeoutMillis <span class="token operator">=</span> messageTimeoutMillis<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Poll.</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> POLL_WAKE<span class="token punctuation">;</span>    mResponses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mResponseIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We are about to idle.</span>    mPolling <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// epoll_wait()系统调用</span>    <span class="token keyword">struct</span> epoll_event eventItems<span class="token punctuation">[</span>EPOLL_MAX_EVENTS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> eventCount <span class="token operator">=</span> <span class="token function">epoll_wait</span><span class="token punctuation">(</span>mEpollFd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventItems<span class="token punctuation">,</span> EPOLL_MAX_EVENTS<span class="token punctuation">,</span> timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// No longer idling.</span>    mPolling <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Acquire lock.</span>    mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Rebuild epoll set if needed.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mEpollRebuildRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mEpollRebuildRequired <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">rebuildEpollLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check for poll error.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Poll failed with an unexpected error: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> POLL_ERROR<span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check for poll timeout.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE</span>        <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - timeout"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        result <span class="token operator">=</span> POLL_TIMEOUT<span class="token punctuation">;</span>        <span class="token keyword">goto</span> Done<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Handle all events.</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE</span>    <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - handling events from %d fds"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> eventCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> eventCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> fd <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>        uint32_t epollEvents <span class="token operator">=</span> eventItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>events<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> mWakeEventFd<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">awoken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Ignoring unexpected epoll events 0x%x on wake event fd."</span><span class="token punctuation">,</span> epollEvents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ssize_t requestIndex <span class="token operator">=</span> mRequests<span class="token punctuation">.</span><span class="token function">indexOfKey</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> events <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLIN<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_INPUT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLOUT<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_OUTPUT<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLERR<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_ERROR<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>epollEvents <span class="token operator">&amp;</span> EPOLLHUP<span class="token punctuation">)</span> events <span class="token operator">|</span><span class="token operator">=</span> EVENT_HANGUP<span class="token punctuation">;</span>                <span class="token function">pushResponse</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> mRequests<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>requestIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Ignoring unexpected epoll events 0x%x on fd %d that is "</span>                        <span class="token string">"no longer registered."</span><span class="token punctuation">,</span> epollEvents<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>Done<span class="token operator">:</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Invoke pending message callbacks.</span>    mNextMessageUptime <span class="token operator">=</span> LLONG_MAX<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nsecs_t now <span class="token operator">=</span> <span class="token function">systemTime</span><span class="token punctuation">(</span>SYSTEM_TIME_MONOTONIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> MessageEnvelope<span class="token operator">&amp;</span> messageEnvelope <span class="token operator">=</span> mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">itemAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>messageEnvelope<span class="token punctuation">.</span>uptime <span class="token operator">&lt;=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Remove the envelope from the list.</span>            <span class="token comment" spellcheck="true">// We keep a strong reference to the handler until the call to handleMessage</span>            <span class="token comment" spellcheck="true">// finishes.  Then we drop it so that the handler can be deleted *before*</span>            <span class="token comment" spellcheck="true">// we reacquire our lock.</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// obtain handler</span>                sp<span class="token operator">&lt;</span>MessageHandler<span class="token operator">></span> handler <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>                Message message <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>message<span class="token punctuation">;</span>                mMessageEnvelopes<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mSendingMessage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span>                <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - sending message: handler=%p, what=%d"</span><span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>                handler<span class="token operator">-</span><span class="token operator">></span><span class="token function">handleMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// release handler</span>            mLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSendingMessage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The last message left at the head of the queue determines the next wakeup time.</span>            mNextMessageUptime <span class="token operator">=</span> messageEnvelope<span class="token punctuation">.</span>uptime<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Release lock.</span>    mLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Invoke all response callbacks.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mResponses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Response<span class="token operator">&amp;</span> response <span class="token operator">=</span> mResponses<span class="token punctuation">.</span><span class="token function">editItemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ident <span class="token operator">==</span> POLL_CALLBACK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fd <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>fd<span class="token punctuation">;</span>            <span class="token keyword">int</span> events <span class="token operator">=</span> response<span class="token punctuation">.</span>events<span class="token punctuation">;</span>            <span class="token keyword">void</span><span class="token operator">*</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> DEBUG_POLL_AND_WAKE || DEBUG_CALLBACKS</span>            <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"%p ~ pollOnce - invoking fd event callback %p: fd=%d, events=0x%x, data=%p"</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token comment" spellcheck="true">// Invoke the callback.  Note that the file descriptor may be closed by</span>            <span class="token comment" spellcheck="true">// the callback (and potentially even reused) before the function returns so</span>            <span class="token comment" spellcheck="true">// we need to be a little careful when removing the file descriptor afterwards.</span>            <span class="token keyword">int</span> callbackResult <span class="token operator">=</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token operator">-</span><span class="token operator">></span><span class="token function">handleEvent</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> events<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>callbackResult <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">removeFd</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Clear the callback reference in the response structure promptly because we</span>            <span class="token comment" spellcheck="true">// will not clear the response vector itself until the next poll.</span>            response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> POLL_CALLBACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关于epoll机制,可以查看<a href="https://zh.wikipedia.org/wiki/Epoll" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Epoll</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Handler-post-runnable-vs-Handler-sendMessage-Message-msg&quot;&gt;&lt;a href=&quot;#Handler-post-runnable-vs-Handler-sendMessage-Message-msg&quot; class=
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Handler" scheme="https://www.jiangkang.tech/tags/Handler/"/>
    
  </entry>
  
</feed>
