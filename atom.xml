<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姜康的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jiangkang.tech/"/>
  <updated>2020-08-23T14:53:42.633Z</updated>
  <id>https://www.jiangkang.tech/</id>
  
  <author>
    <name>姜康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Service启动流程分析</title>
    <link href="https://www.jiangkang.tech/2020/08/23/android/service-qi-dong-liu-cheng-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/08/23/android/service-qi-dong-liu-cheng-fen-xi/</id>
    <published>2020-08-23T14:53:01.000Z</published>
    <updated>2020-08-23T14:53:42.633Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过App和Activity的启动流程分析:</p><ul><li><a href="https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/">App启动流程分析</a></li><li><a href="https://www.jiangkang.tech/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/">Activity启动流程分析</a></li></ul><p>现在梳理下Service的启动流程吧</p><blockquote><p>基于Android 10的源码分析</p></blockquote><h2 id="ContextWrapper-startService"><a href="#ContextWrapper-startService" class="headerlink" title="ContextWrapper.startService()"></a>ContextWrapper.startService()</h2><p>Context的实现是<code>ContextImpl</code>,因此到<code>ContextImpl</code>中查看:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentName <span class="token function">startService</span><span class="token punctuation">(</span>Intent service<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warnIfCallingFromSystemProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">startServiceCommon</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> mUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ComponentName <span class="token function">startServiceCommon</span><span class="token punctuation">(</span>Intent service<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requireForeground<span class="token punctuation">,</span>            UserHandle user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关键, 利用ActivityManagerService启动Service</span>            ComponentName cn <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span>                mMainThread<span class="token punctuation">.</span><span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">,</span> service<span class="token punctuation">.</span><span class="token function">resolveTypeIfNeeded</span><span class="token punctuation">(</span>                            <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requireForeground<span class="token punctuation">,</span>                            <span class="token function">getOpPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cn<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还是调用的<code>ActivityManagerService</code>去执行的.</p><h2 id="ActivityManagerService-startService"><a href="#ActivityManagerService-startService" class="headerlink" title="ActivityManagerService.startService()"></a>ActivityManagerService.startService()</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ComponentName <span class="token function">startService</span><span class="token punctuation">(</span>IApplicationThread caller<span class="token punctuation">,</span> Intent service<span class="token punctuation">,</span>            String resolvedType<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requireForeground<span class="token punctuation">,</span> String callingPackage<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionTooLargeException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> callingPid <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> callingUid <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ComponentName res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里的mServices是ActiveServices</span>                res <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">startServiceLocked</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> service<span class="token punctuation">,</span>                        resolvedType<span class="token punctuation">,</span> callingPid<span class="token punctuation">,</span> callingUid<span class="token punctuation">,</span>                        requireForeground<span class="token punctuation">,</span> callingPackage<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>origId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>然后就到了<code>ActiveServices</code>中,这个类其实在之前的启动流程分析文章中也有提到过:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// startService 和bindService两种方式其实最终都会走到这里</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">realStartServiceLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">,</span> <span class="token keyword">boolean</span> execInFg<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">setProcess</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> created <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//ApplicationThread,关键点</span>            app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleCreateService</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">,</span>                    mAm<span class="token punctuation">.</span><span class="token function">compatibilityInfoForPackage</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>serviceInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                    app<span class="token punctuation">.</span><span class="token function">getReportedProcState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">postNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            created <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token function">requestServiceBindingsLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> execInFg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">updateServiceClientActivitiesLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newService <span class="token operator">&amp;&amp;</span> created<span class="token punctuation">)</span> <span class="token punctuation">{</span>            app<span class="token punctuation">.</span><span class="token function">addBoundClientUidsOfNewService</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里也很关键</span>        <span class="token function">sendServiceArgsLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> execInFg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这期间调用链其实很长,这里直接走到最后一步.</p><h2 id="ActivityThread-ApplicationThread-scheduleCreateService"><a href="#ActivityThread-ApplicationThread-scheduleCreateService" class="headerlink" title="ActivityThread.ApplicationThread.scheduleCreateService"></a>ActivityThread.ApplicationThread.scheduleCreateService</h2><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">scheduleCreateService</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span>                ServiceInfo info<span class="token punctuation">,</span> CompatibilityInfo compatInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> processState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">updateProcessState</span><span class="token punctuation">(</span>processState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CreateServiceData s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateServiceData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>            s<span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>            s<span class="token punctuation">.</span>compatInfo <span class="token operator">=</span> compatInfo<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// handler机制</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>CREATE_SERVICE<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>Handler收到消息之后:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> CREATE_SERVICE<span class="token operator">:</span>                    <span class="token function">handleCreateService</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CreateServiceData<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><h2 id="加载Service类-并执行onCreate回调"><a href="#加载Service类-并执行onCreate回调" class="headerlink" title="加载Service类,并执行onCreate回调"></a>加载Service类,并执行onCreate回调</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleCreateService</span><span class="token punctuation">(</span>CreateServiceData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取APP信息</span>        LoadedApk packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfoNoCheck</span><span class="token punctuation">(</span>                data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> data<span class="token punctuation">.</span>compatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        Service service <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用ClassLoader加载并实例化Service类</span>        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">getAppFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">instantiateService</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建Context</span>            ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> packageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建Application</span>            Application app <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行service的attach方法</span>            service<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> app<span class="token punctuation">,</span>                    ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">///调用service的onCreate回调</span>            service<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mServices<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通知AMS服务</span>                <span class="token comment" spellcheck="true">// SERVICE_DONE_EXECUTING_ANON表示异步执行</span>                ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                        data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> SERVICE_DONE_EXECUTING_ANON<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,Service的启动过程其实和Activity的启动过程大同小异,都是使用ClassLoader加载的.</p><p>还有最后一句,通知ActivityManagerService,看下这部分干了什么:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mServices<span class="token punctuation">.</span><span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServiceRecord<span class="token punctuation">)</span>token<span class="token punctuation">,</span> type<span class="token punctuation">,</span> startId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// SERVICE_DONE_EXECUTING_ANON,0,0</span>    <span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> inDestroying <span class="token operator">=</span> mDestroyingServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> origId <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主要是一些超时逻辑</span>        <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> inDestroying<span class="token punctuation">,</span> inDestroying<span class="token punctuation">)</span><span class="token punctuation">;</span>        Binder<span class="token punctuation">.</span><span class="token function">restoreCallingIdentity</span><span class="token punctuation">(</span>origId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> </code></pre><p>可以看到这一步其实没什么.</p><p>现在回到onCreate回调之后的处理逻辑:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sendServiceArgsLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> execInFg<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> oomAdjusted<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionTooLargeException <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>ServiceStartArgs<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键点</span>        r<span class="token punctuation">.</span>app<span class="token punctuation">.</span>thread<span class="token punctuation">.</span><span class="token function">scheduleServiceArgs</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> slice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个会执行到ActivityThread的ApplicationThread中:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">scheduleServiceArgs</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> ParceledListSlice args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ServiceStartArgs<span class="token operator">></span> list <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ServiceStartArgs ssa <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ServiceArgsData s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceArgsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>taskRemoved <span class="token operator">=</span> ssa<span class="token punctuation">.</span>taskRemoved<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>startId <span class="token operator">=</span> ssa<span class="token punctuation">.</span>startId<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>flags <span class="token operator">=</span> ssa<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>                s<span class="token punctuation">.</span>args <span class="token operator">=</span> ssa<span class="token punctuation">.</span>args<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关键</span>                <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>SERVICE_ARGS<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>Handelr收到消息之后有:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> SERVICE_ARGS<span class="token operator">:</span>                    <span class="token function">handleServiceArgs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ServiceArgsData<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>这里其实会执行Service 的onStartCommand()回调:</p><h2 id="Service-onStartCommand"><a href="#Service-onStartCommand" class="headerlink" title="Service.onStartCommand()"></a>Service.onStartCommand()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleServiceArgs</span><span class="token punctuation">(</span>ServiceArgsData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Service s <span class="token operator">=</span> mServices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> res<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>taskRemoved<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 调用Service的onStartCommand方法</span>                    res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>args<span class="token punctuation">,</span> data<span class="token punctuation">.</span>flags<span class="token punctuation">,</span> data<span class="token punctuation">.</span>startId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">onTaskRemoved</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> Service<span class="token punctuation">.</span>START_TASK_REMOVED_COMPLETE<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                QueuedWork<span class="token punctuation">.</span><span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 通知AMS service启动</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceDoneExecuting</span><span class="token punctuation">(</span>                            data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> SERVICE_DONE_EXECUTING_START<span class="token punctuation">,</span> data<span class="token punctuation">.</span>startId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>执行完Service的onStartCommand()方法之后,会通知AMS:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">serviceDoneExecutingLocked</span><span class="token punctuation">(</span>ServiceRecord r<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> inDestroying <span class="token operator">=</span> mDestroyingServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> ActivityThread<span class="token punctuation">.</span>SERVICE_DONE_EXECUTING_START<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行这个分支</span>                r<span class="token punctuation">.</span>callStart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_STICKY_COMPATIBILITY<span class="token operator">:</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_STICKY<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We are done with the associated start arguments.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// Don't stop if killed.</span>                        r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_NOT_STICKY<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We are done with the associated start arguments.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLastStartId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// There is no more work, and this service</span>                            <span class="token comment" spellcheck="true">// doesn't want to hang around if killed.</span>                            r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_REDELIVER_INTENT<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// We'll keep this item until they explicitly</span>                        <span class="token comment" spellcheck="true">// call stop for it, but keep track of the fact</span>                        <span class="token comment" spellcheck="true">// that it was delivered.</span>                        ServiceRecord<span class="token punctuation">.</span>StartItem si <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>si <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            si<span class="token punctuation">.</span>deliveryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            si<span class="token punctuation">.</span>doneExecutingCount<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// Don't stop if killed.</span>                            r<span class="token punctuation">.</span>stopIfKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">case</span> Service<span class="token punctuation">.</span>START_TASK_REMOVED_COMPLETE<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Special processing for onTaskRemoved().  Don't</span>                        <span class="token comment" spellcheck="true">// impact normal onStartCommand() processing.</span>                        r<span class="token punctuation">.</span><span class="token function">findDeliveredStart</span><span class="token punctuation">(</span>startId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                                <span class="token string">"Unknown service start result: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> Service<span class="token punctuation">.</span>START_STICKY_COMPATIBILITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    r<span class="token punctuation">.</span>callStart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里其实就是处理不同类型的Service,比如Sticky Service的启动逻辑,这里不仔细说了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Service的启动流程和Activity的启动流程大同小异</li><li>ActivityThread和AMS起到了关键性的作用</li><li>不同类型Service在AMS中有处理逻辑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前写过App和Activity的启动流程分析:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/&quot;&gt;App启动流程分析&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Service启动流程" scheme="https://www.jiangkang.tech/tags/Service%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Activity启动流程分析</title>
    <link href="https://www.jiangkang.tech/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/08/23/android/activity-qi-dong-liu-cheng-fen-xi/</id>
    <published>2020-08-22T17:56:03.000Z</published>
    <updated>2020-08-22T17:56:56.299Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/">App启动流程分析</a>中已经分析过大部分的流程了,但是对于Activity的启动流程并没有详细的说明,这里讲一下.</p><p>在分析源码之前,先想一下大概有哪些疑问:</p><ul><li>Activity是如何加载的?</li><li>Activity为什么必须在Manifest文件中注册?</li><li>Activity的本质是什么,可以不需要Activity实现Android APP吗?</li><li>Activity的生命周期是如何调度的?</li><li>Activity的启动模式的原理</li></ul><h2 id="源码中常见的类"><a href="#源码中常见的类" class="headerlink" title="源码中常见的类"></a>源码中常见的类</h2><ul><li><p>ActivityRecord</p><p>表示一个Activity,与Activity是一一对应的关系</p></li><li><p>ActivityStack</p><p>即Activity栈,管理Activity的状态</p></li><li><p>RootActivityContainer</p><p>一个暂时分离出来的类,主要就是一些不应该放到ActivityStackSuperVisor中的功能,可能后面会合并到RootWindowContainer中</p></li></ul><h2 id="Binder调用前"><a href="#Binder调用前" class="headerlink" title="Binder调用前"></a>Binder调用前</h2><p>由于之前分析过一些代码的调用流程,这里从<code>ActivityStackSupervisor#startSpecificActivityLocked()</code>开始:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">startSpecificActivityLocked</span><span class="token punctuation">(</span>ActivityRecord r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> andResume<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wpc <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> wpc<span class="token punctuation">.</span><span class="token function">hasThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 进程已经准备好,执行这个过程</span>                <span class="token function">realStartActivityLocked</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> wpc<span class="token punctuation">,</span> andResume<span class="token punctuation">,</span> checkConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Exception when starting activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flattenToShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            knownToBeDead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 还未创建进程,先创建进程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Message msg <span class="token operator">=</span> PooledLambda<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>                    ActivityManagerInternal<span class="token operator">:</span><span class="token operator">:</span>startProcess<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mAmInternal<span class="token punctuation">,</span> r<span class="token punctuation">.</span>processName<span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>info<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> <span class="token string">"activity"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span>mH<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>之前说过,创建APP进程的时候走的是下面那个逻辑,这里启动Activity的时候看<code>realStartActivityLocked</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">realStartActivityLocked</span><span class="token punctuation">(</span>ActivityRecord r<span class="token punctuation">,</span> WindowProcessController proc<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> andResume<span class="token punctuation">,</span> <span class="token keyword">boolean</span> checkConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">final</span> TaskRecord task <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">getTaskRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ActivityStack stack <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">getStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beginDeferResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">startFreezingScreenLocked</span><span class="token punctuation">(</span>proc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// schedule launch ticks to collect information about slow apps.</span>            r<span class="token punctuation">.</span><span class="token function">startLaunchTickingLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">setProcess</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">;</span>            proc<span class="token punctuation">.</span><span class="token function">addActivityIfNeeded</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 关键:创建Activity启动事务</span>                <span class="token keyword">final</span>  clientTransaction <span class="token operator">=</span> ClientTransaction<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>                        proc<span class="token punctuation">.</span><span class="token function">getThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>appToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将intent信息打包到LaunchActivityItem中去</span>                <span class="token comment" spellcheck="true">// LaunchActivityItem表示启动Activity的请求,是ClientTransactionItem的子类</span>                clientTransaction<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>LaunchActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">,</span>                        System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>info<span class="token punctuation">,</span>                        mergedConfiguration<span class="token punctuation">.</span><span class="token function">getGlobalConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        mergedConfiguration<span class="token punctuation">.</span><span class="token function">getOverrideConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>compat<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>launchedFromPackage<span class="token punctuation">,</span> task<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">,</span> proc<span class="token punctuation">.</span><span class="token function">getReportedProcState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>icicle<span class="token punctuation">,</span> r<span class="token punctuation">.</span>persistentState<span class="token punctuation">,</span> results<span class="token punctuation">,</span> newIntents<span class="token punctuation">,</span>                        dc<span class="token punctuation">.</span><span class="token function">isNextTransitionForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proc<span class="token punctuation">.</span><span class="token function">createProfilerInfoIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                r<span class="token punctuation">.</span>assistToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Activity应该到达的生命周期状态</span>                <span class="token keyword">final</span> ActivityLifecycleItem lifecycleItem<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>andResume<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lifecycleItem <span class="token operator">=</span> ResumeActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">isNextTransitionForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    lifecycleItem <span class="token operator">=</span> PauseActivityItem<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                clientTransaction<span class="token punctuation">.</span><span class="token function">setLifecycleStateRequest</span><span class="token punctuation">(</span>lifecycleItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 关键:执行请求,Schedule transaction.</span>                mService<span class="token punctuation">.</span><span class="token function">getLifecycleManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>clientTransaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">endDeferResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>看一下调度事务的代码:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">final</span> IApplicationThread client <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>client <span class="token keyword">instanceof</span> <span class="token class-name">Binder</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的mClient就是IApplicationThread,会通过Binder调用到ApplicationThread</span>        mClient<span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><h2 id="ActivityThread-ApplicationThread中的调度过程"><a href="#ActivityThread-ApplicationThread中的调度过程" class="headerlink" title="ActivityThread.ApplicationThread中的调度过程"></a>ActivityThread.ApplicationThread中的调度过程</h2><p>现在进入了<code>ApplicationThread</code>中:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>            ActivityThread<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><code>ActivityThead</code>实现了<code>ClientTransactionHandler</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** Prepare and schedule transaction for execution. */</span>    <span class="token keyword">void</span> <span class="token function">scheduleTransaction</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 预先执行一些逻辑</span>        transaction<span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>H<span class="token punctuation">.</span>EXECUTE_TRANSACTION<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preExecute</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ClientTransactionHandler clientTransactionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mActivityCallbacks <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> mActivityCallbacks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mActivityCallbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span>clientTransactionHandler<span class="token punctuation">,</span> mActivityToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLifecycleStateRequest <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLifecycleStateRequest<span class="token punctuation">.</span><span class="token function">preExecute</span><span class="token punctuation">(</span>clientTransactionHandler<span class="token punctuation">,</span> mActivityToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>mActivityCallback</code>即上面添加的<code>LaunchActivityItem</code>,因此会先执行它的<code>preExecute</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preExecute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        client<span class="token punctuation">.</span><span class="token function">countLaunchingActivities</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">updateProcessState</span><span class="token punctuation">(</span>mProcState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">updatePendingConfiguration</span><span class="token punctuation">(</span>mCurConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里就是更新下信息,没什么大不了的,看来还是分析下面的这一句比较重要:</p><pre class=" language-java"><code class="language-java"> <span class="token function">sendMessage</span><span class="token punctuation">(</span>ActivityThread<span class="token punctuation">.</span>H<span class="token punctuation">.</span>EXECUTE_TRANSACTION<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityThread.H</code>中有:</p><pre class=" language-java"><code class="language-java">                <span class="token keyword">case</span> EXECUTE_TRANSACTION<span class="token operator">:</span>                    <span class="token keyword">final</span> ClientTransaction transaction <span class="token operator">=</span> <span class="token punctuation">(</span>ClientTransaction<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    mTransactionExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span></code></pre><p>继续看:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> IBinder token <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getActivityToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行callback</span>        <span class="token function">executeCallbacks</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 过渡到最终状态,即Resumed状态</span>        <span class="token function">executeLifecycleState</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPendingActions<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCallbacks</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ClientTransactionItem<span class="token operator">></span> callbacks <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ClientTransactionItem item <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行callback</span>            item<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>            item<span class="token punctuation">.</span><span class="token function">postExecute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeLifecycleState</span><span class="token punctuation">(</span>ClientTransaction transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityLifecycleItem lifecycleItem <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getLifecycleStateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Execute the final transition with proper parameters.</span>        lifecycleItem<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>        lifecycleItem<span class="token punctuation">.</span><span class="token function">postExecute</span><span class="token punctuation">(</span>mTransactionHandler<span class="token punctuation">,</span> token<span class="token punctuation">,</span> mPendingActions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> 这下思路清晰了:</p><ol><li>先执行<code>LaunchActivityItem</code>中的<code>execute</code>和<code>postExecute</code>方法</li><li>再执行<code>ResumeActivityItem</code>中的<code>execute</code>和<code>postExecute</code>方法</li></ol><h2 id="Launch"><a href="#Launch" class="headerlink" title="Launch"></a>Launch</h2><p>看下<code>LaunchActivityItem</code>的指令:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"activityStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ActivityClientRecord用于记录真实的Activity实例</span>        ActivityClientRecord r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityClientRecord</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> mIntent<span class="token punctuation">,</span> mIdent<span class="token punctuation">,</span> mInfo<span class="token punctuation">,</span>                mOverrideConfig<span class="token punctuation">,</span> mCompatInfo<span class="token punctuation">,</span> mReferrer<span class="token punctuation">,</span> mVoiceInteractor<span class="token punctuation">,</span> mState<span class="token punctuation">,</span> mPersistentState<span class="token punctuation">,</span>                mPendingResults<span class="token punctuation">,</span> mPendingNewIntents<span class="token punctuation">,</span> mIsForward<span class="token punctuation">,</span>                mProfilerInfo<span class="token punctuation">,</span> client<span class="token punctuation">,</span> mAssistToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用ActivityThread的handleLaunchActivity方法        </span>        client<span class="token punctuation">.</span><span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> pendingActions<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* customIntent */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这下进入到了<code>ActivityThread</code>中的<code>handleLaunchActivity</code>方法了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Activity <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Initialize before creating the activity</span>        <span class="token comment" spellcheck="true">// 看看是否支持硬件加速,支持的话就预加载</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ThreadedRenderer<span class="token punctuation">.</span>sRendererDisabled                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ActivityInfo<span class="token punctuation">.</span>FLAG_HARDWARE_ACCELERATED<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HardwareRenderer<span class="token punctuation">.</span><span class="token function">preload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化WindowManagerService服务</span>        WindowManagerGlobal<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Hint the GraphicsEnvironment that an activity is launching on the process.</span>        GraphicsEnvironment<span class="token punctuation">.</span><span class="token function">hintActivityLaunch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动Activity</span>        <span class="token keyword">final</span> Activity a <span class="token operator">=</span> <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这下进入了启动Activity的核心实现代码了:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**  Core implementation of activity launch. */</span>    <span class="token keyword">private</span> Activity <span class="token function">performLaunchActivity</span><span class="token punctuation">(</span>ActivityClientRecord r<span class="token punctuation">,</span> Intent customIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActivityInfo aInfo <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>packageInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span>packageInfo <span class="token operator">=</span> <span class="token function">getPackageInfo</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">,</span> r<span class="token punctuation">.</span>compatInfo<span class="token punctuation">,</span>                    Context<span class="token punctuation">.</span>CONTEXT_INCLUDE_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 目标Activity的ComponnetName</span>        ComponentName component <span class="token operator">=</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>component <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component <span class="token operator">=</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">resolveActivity</span><span class="token punctuation">(</span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>targetActivity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                    r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>targetActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为Activity创建Context</span>        ContextImpl appContext <span class="token operator">=</span> <span class="token function">createBaseContextForActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 目标Activity</span>        Activity activity <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//重头戏,创建目标Activity</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> appContext<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            activity <span class="token operator">=</span> mInstrumentation<span class="token punctuation">.</span><span class="token function">newActivity</span><span class="token punctuation">(</span>                    cl<span class="token punctuation">,</span> component<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            StrictMode<span class="token punctuation">.</span><span class="token function">incrementExpectedActivityCount</span><span class="token punctuation">(</span>activity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">setExtrasClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">prepareToEnterProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>state <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to instantiate activity "</span> <span class="token operator">+</span> component                    <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Application app <span class="token operator">=</span> r<span class="token punctuation">.</span>packageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mInstrumentation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                CharSequence title <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">loadLabel</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Configuration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span>mCompatConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>overrideConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    config<span class="token punctuation">.</span><span class="token function">updateFrom</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>overrideConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_CONFIGURATION<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Launching activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" with config "</span> <span class="token operator">+</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>                Window window <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>mPendingRemoveWindow <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>mPreserveWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    window <span class="token operator">=</span> r<span class="token punctuation">.</span>mPendingRemoveWindow<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>mPendingRemoveWindow <span class="token operator">=</span> null<span class="token punctuation">;</span>                    r<span class="token punctuation">.</span>mPendingRemoveWindowManager <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                appContext<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行Activity的attach方法</span>                activity<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>appContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getInstrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>token<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>ident<span class="token punctuation">,</span> app<span class="token punctuation">,</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">,</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">,</span> title<span class="token punctuation">,</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>embeddedID<span class="token punctuation">,</span> r<span class="token punctuation">.</span>lastNonConfigurationInstances<span class="token punctuation">,</span> config<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>referrer<span class="token punctuation">,</span> r<span class="token punctuation">.</span>voiceInteractor<span class="token punctuation">,</span> window<span class="token punctuation">,</span> r<span class="token punctuation">.</span>configCallback<span class="token punctuation">,</span>                        r<span class="token punctuation">.</span>assistToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>customIntent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    activity<span class="token punctuation">.</span>mIntent <span class="token operator">=</span> customIntent<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span>lastNonConfigurationInstances <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token function">checkAndBlockForNetworkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                activity<span class="token punctuation">.</span>mStartedActivity <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> theme <span class="token operator">=</span> r<span class="token punctuation">.</span>activityInfo<span class="token punctuation">.</span><span class="token function">getThemeResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>theme <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 这是主题</span>                    activity<span class="token punctuation">.</span><span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                activity<span class="token punctuation">.</span>mCalled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 执行Activity的onCreate()回调</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isPersistable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">,</span> r<span class="token punctuation">.</span>persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    mInstrumentation<span class="token punctuation">.</span><span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> r<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activity<span class="token punctuation">.</span>mCalled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperNotCalledException</span><span class="token punctuation">(</span>                        <span class="token string">"Activity "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">" did not call through to super.onCreate()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                r<span class="token punctuation">.</span>activity <span class="token operator">=</span> activity<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>ON_CREATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SuperNotCalledException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token string">"Unable to start activity "</span> <span class="token operator">+</span> component                    <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里主要干了下面这几件事:</p><ol><li>为目标Activity创建Context</li><li>使用ClassLoader加载Activity类并实例化</li><li>使用ClassLoader加载Application并实例化,调用attach()和onCreate()方法</li><li>执行Activity的attach() 方法并为Activity设置主题</li><li>使用Instrumentation执行Activity的onCreate()回调</li></ol><p>Application和Activity代码的加载和实例化入口都在<code>Instrumentation</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Activity <span class="token function">newActivity</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span>            Intent intent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>            ClassNotFoundException <span class="token punctuation">{</span>        String pkg <span class="token operator">=</span> intent <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null                <span class="token operator">?</span> intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiateActivity</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">,</span> intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Application <span class="token function">newApplication</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>             ClassNotFoundException <span class="token punctuation">{</span>        Application app <span class="token operator">=</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">instantiateApplication</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><p>实例化其实都是反射调用:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Application <span class="token function">instantiateApplication</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Application<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Activity <span class="token function">instantiateActivity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Intent intent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Activity<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><h2 id="Activity-onCreate"><a href="#Activity-onCreate" class="headerlink" title="Activity.onCreate()"></a>Activity.onCreate()</h2><p>至于Activity的onCreate()回调,也在<code>Instrumentation</code>中进行:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callActivityOnCreate</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">,</span> Bundle icicle<span class="token punctuation">,</span>            PersistableBundle persistentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">prePerformCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        activity<span class="token punctuation">.</span><span class="token function">performCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">,</span> persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postPerformCreate</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">performCreate</span><span class="token punctuation">(</span>Bundle icicle<span class="token punctuation">,</span> PersistableBundle persistentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>persistentState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">,</span> persistentState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onCreate</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mFragments<span class="token punctuation">.</span><span class="token function">dispatchActivityCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mActivityTransitionState<span class="token punctuation">.</span><span class="token function">setEnterActivityOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getActivityOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dispatchActivityPostCreated</span><span class="token punctuation">(</span>icicle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里onCreate()回调就被调用了.</p><p>再来看下onResume()回调的调用吧</p><h2 id="Activity-onResume"><a href="#Activity-onResume" class="headerlink" title="Activity.onResume()"></a>Activity.onResume()</h2><p>还是回到之前的<code>ResumeActivityItem</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"activityResume"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用ActivityThread的handleResumeActivity方法</span>        client<span class="token punctuation">.</span><span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* finalStateRequest */</span><span class="token punctuation">,</span> mIsForward<span class="token punctuation">,</span>                <span class="token string">"RESUME_ACTIVITY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postExecute</span><span class="token punctuation">(</span>ClientTransactionHandler client<span class="token punctuation">,</span> IBinder token<span class="token punctuation">,</span>            PendingTransactionActions pendingActions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO(lifecycler): Use interface callback instead of AMS.</span>            ActivityTaskManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activityResumed</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>还是Binder调用到ActivityThread中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isForward<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行onResume()</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> finalStateRequest<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">myQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIdleHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Idler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ActivityClientRecord <span class="token function">performResumeActivity</span><span class="token punctuation">(</span>IBinder token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finalStateRequest<span class="token punctuation">,</span>            String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ActivityClientRecord r <span class="token operator">=</span> mActivities<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行onResume</span>            r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">performResume</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>startsNotResumed<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>state <span class="token operator">=</span> null<span class="token punctuation">;</span>            r<span class="token punctuation">.</span>persistentState <span class="token operator">=</span> null<span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>ON_RESUME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Unable to resume activity "</span>                        <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里Activity启动流程就分析完了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>基于<code>ClientTransaction</code>的消息传递机制,通过Binder调用到ActivityThread中的方法</li><li>ActivityThread中会使用<code>Instrumentation</code>和<code>Handler</code>去执行各种逻辑</li><li><code>LoadedApk</code>和<code>Instrumentaion</code>负责Application的创建和实例化</li><li><code>Instrumentation</code>负责Activity的创建和实例化</li><li>Application和Activity的创建和实例化其实都是利用的Classloader和反射机制</li><li>四大组件的实例化代码都在<code>AppComponentFactory</code>中</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/&quot;&gt;App启动流程分析&lt;/a&gt;中已经分析过大部分的流程了,但是对于Activity的启动流程并没有详细的
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Activity启动流程" scheme="https://www.jiangkang.tech/tags/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>文件压缩格式</title>
    <link href="https://www.jiangkang.tech/2020/08/22/ji-chu/wen-jian-ya-suo-ge-shi/"/>
    <id>https://www.jiangkang.tech/2020/08/22/ji-chu/wen-jian-ya-suo-ge-shi/</id>
    <published>2020-08-22T14:48:43.000Z</published>
    <updated>2020-08-22T14:50:28.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><p>zlib 是一个压缩，解压数据的工具库，只是单纯的数据压缩，不管数据来源。</p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>gzip 只能压缩单个文件</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>tar 压缩多个文件，通常与gzip配合使用。比如linux上常见的. tar. gz</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip 用于压缩多个文件的格式。可以使用多种压缩算法。</p><h2 id="7zip"><a href="#7zip" class="headerlink" title="7zip"></a>7zip</h2><p>7zip 一种新的压缩格式，拥有很高的压缩比。</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>rar一种专利文件格式，编码器有专利，解码器源码已经公开。一般用于windows平台。</p><h2 id="deflate算法"><a href="#deflate算法" class="headerlink" title="deflate算法"></a>deflate算法</h2><p>deflate 算法，无损压缩算法，zlib中有实现源码，7zip中的实现压缩率更高，广泛用于png图像压缩。</p><h2 id="inflate算法"><a href="#inflate算法" class="headerlink" title="inflate算法"></a>inflate算法</h2><p>inflate算法 gzip png等使用的解压缩算法，linux内核解压也是用的这个算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;zlib&quot;&gt;&lt;a href=&quot;#zlib&quot; class=&quot;headerlink&quot; title=&quot;zlib&quot;&gt;&lt;/a&gt;zlib&lt;/h2&gt;&lt;p&gt;zlib 是一个压缩，解压数据的工具库，只是单纯的数据压缩，不管数据来源。&lt;/p&gt;
&lt;h2 id=&quot;gzip&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="基础" scheme="https://www.jiangkang.tech/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="压缩" scheme="https://www.jiangkang.tech/tags/%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Android Hook之拦截Activity的启动</title>
    <link href="https://www.jiangkang.tech/2020/08/22/android/hook-zhi-lan-jie-activity-de-qi-dong/"/>
    <id>https://www.jiangkang.tech/2020/08/22/android/hook-zhi-lan-jie-activity-de-qi-dong/</id>
    <published>2020-08-22T14:43:36.000Z</published>
    <updated>2020-08-22T14:44:23.304Z</updated>
    
    <content type="html"><![CDATA[<p>Android中的插件化和热修复已经应用了很多年了,这里面涉及的主要就是Hook,即反射 + 代理的技巧去实现一些常规代码无法实现的功能.</p><p>之前有说过Hook点击事件的方式,这里讲一下拦截Activity的Hook方法,这也是插件化的基础.</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在进行Hook之前,我们必须熟悉源码,找到可以反射的的点,然后进行替换,这里要拦截Activity的启动,那么肯定得看下Activity的启动流程.具体的就不说了,其实最后会执行到<code>Instrumentation</code>中的<code>execStartActivity</code>方法.</p><p>有下面这些点我们可以知道:</p><ul><li>应用层可以访问到<code>Instrumentation</code>类,因此可以实现一个它的子类,重写一些方法进行替换</li><li><code>Activity</code>和<code>ActivityThread</code>中持有了<code>Instrumentation</code>对象,字段名为<code>mInstrumentation</code>,因此可以利用反射获取到这个字段</li><li>启动Activity肯定会调用到<code>Instrumentation#execStartActivity</code>方法,因此这个就是替换点了</li></ul><p>看到上面的3个点,思路基本上就清晰了.从<code>Activity</code>或者<code>ActivityThread</code>中反射拿到<code>mInstrumentation</code>字段,然后替换成自己的<code>Instrumentation</code>实现,重写<code>execStartActivity</code>方法,然后在应用代码中进行替换.</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>其实有两种思路,一个是从<code>Activity</code>入手,一个是从<code>ActivityThread</code>入手.</p><h2 id="从Activity入手"><a href="#从Activity入手" class="headerlink" title="从Activity入手"></a>从<code>Activity</code>入手</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">hookInstrumentationWithActivity</span><span class="token punctuation">(</span>sourceActivity<span class="token operator">:</span>Activity<span class="token punctuation">,</span> callback<span class="token operator">:</span> ActivityStartingCallback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">val</span> instrumentationField <span class="token operator">=</span> Activity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mInstrumentation"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instrumentationField<span class="token punctuation">.</span>isAccessible<span class="token punctuation">)</span><span class="token punctuation">{</span>            instrumentationField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> originInstrumentation<span class="token operator">:</span>Instrumentation <span class="token operator">=</span> instrumentationField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceActivity<span class="token punctuation">)</span> <span class="token keyword">as</span> Instrumentation        instrumentationField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sourceActivity<span class="token punctuation">,</span><span class="token function">ProxyInstrumentation</span><span class="token punctuation">(</span>originInstrumentation<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>这种方式,需要传入Activity对象,并不是很实用.</p><h2 id="从ActivityThread入手"><a href="#从ActivityThread入手" class="headerlink" title="从ActivityThread入手"></a>从<code>ActivityThread</code>入手</h2><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">hookInstrumentation</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> ActivityStartingCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取ActivityThread类</span>        <span class="token keyword">val</span> activityThreadClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.app.ActivityThread"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> currentActivityThreadMethod <span class="token operator">=</span> activityThreadClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"currentActivityThread"</span><span class="token punctuation">)</span>        currentActivityThreadMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">val</span> currentActivityThread <span class="token operator">=</span> currentActivityThreadMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> mInstrumentationField <span class="token operator">=</span> activityThreadClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mInstrumentation"</span><span class="token punctuation">)</span>        mInstrumentationField<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">val</span> mInstrumentation <span class="token operator">=</span> mInstrumentationField<span class="token punctuation">[</span>currentActivityThread<span class="token punctuation">]</span> <span class="token keyword">as</span> Instrumentation        <span class="token keyword">val</span> proxyInstrumentation<span class="token operator">:</span> Instrumentation <span class="token operator">=</span> <span class="token function">ProxyInstrumentation</span><span class="token punctuation">(</span>mInstrumentation<span class="token punctuation">,</span>callback<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//替换</span>        mInstrumentationField<span class="token punctuation">[</span>currentActivityThread<span class="token punctuation">]</span> <span class="token operator">=</span> proxyInstrumentation    <span class="token punctuation">}</span></code></pre><p>这种方式不需要传入Activity,直接在Application初始化过程中注入即可.</p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/jiangkang/KTools" target="_blank" rel="noopener">https://github.com/jiangkang/KTools</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android中的插件化和热修复已经应用了很多年了,这里面涉及的主要就是Hook,即反射 + 代理的技巧去实现一些常规代码无法实现的功能.&lt;/p&gt;
&lt;p&gt;之前有说过Hook点击事件的方式,这里讲一下拦截Activity的Hook方法,这也是插件化的基础.&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Hook" scheme="https://www.jiangkang.tech/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio查看和调试AOSP源码</title>
    <link href="https://www.jiangkang.tech/2020/08/21/android/androidstudio-cha-kan-he-diao-shi-aosp-yuan-ma/"/>
    <id>https://www.jiangkang.tech/2020/08/21/android/androidstudio-cha-kan-he-diao-shi-aosp-yuan-ma/</id>
    <published>2020-08-21T12:04:53.000Z</published>
    <updated>2020-08-22T06:16:04.153Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过使用VSCode阅读AOSP源码的方法,但是作为Android开发,还是对Android Studio熟悉一些,这里看下如何使用Android Studio查看AOSP源码.</p><p>如果你之前没完整的编译过AOSP,可以按照下面的流程进行配置:</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><pre class=" language-shell"><code class="language-shell">source build/envsetup.shmake idegen</code></pre><p>如果这一步成功了,没有报错,那么恭喜你,可以继续下一步了,如果报错了,到文章后面查看有没有你遇到的问题.</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><pre class=" language-shell"><code class="language-shell">sudo ./development/tools/idegen/idegen.sh</code></pre><p>这一步会在根目录下生成<code>android.ipr</code>和<code>android.iml</code>两个文件</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>使用Android Studio,选择<code>Open an existing Android Studio Project</code>打开上面生成的<code>android.ipr</code>文件即可</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>这一步要设置下JDK以及SDK:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_sdk.png" alt="选择SDK"></p><p>这里需要按照自己下载的源码版本选择对应的SDK.</p><p><img src="https://oss.jiangkang.tech/jk/aosp_jdk.png" alt="设置JDK"></p><p><img src="https://oss.jiangkang.tech/jk/aosp_sdk_jdk.png" alt="SDK设置JDK"></p><p>这一步需要新建一个不带classpath的JDK(点击+号,新建一个,改个名字,然后删除classpath就行),这个操作的话就会使用AOSP中的JDK环境了.</p><h2 id="调试源码"><a href="#调试源码" class="headerlink" title="调试源码"></a>调试源码</h2><p>可以找个模拟器,比如Genymotion,启动模拟器,然后在Android Studio里面选择对应的进程,就可以正常的进行调试了:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_debug.png" alt="调试源码"></p><h2 id="按需加载源码"><a href="#按需加载源码" class="headerlink" title="按需加载源码"></a>按需加载源码</h2><p>如果一次性将所有源码都加载到Android Studio,第一次索引时间可能会非常久(半个小时都有可能).这个时候可以修改<code>android.iml</code>来让Android Studio不要加载哪些模块:</p><p>在<code>android.iml</code>中搜索<code>excludeFolder</code>,然后在下面新增一些你不想加载的模块即可:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/bionic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/bootable<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/build<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/cts<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/developers<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/development<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/device<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/docs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/external<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/hardware<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/kernel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/out<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/pdk<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/platform_testing<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/prebuilts<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/sdk<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/system<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/toolchain<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/tools<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeFolder</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file://$MODULE_DIR$/.repo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>当然,<strong>如果你的电脑性能非常好,可以不用修改这些,一次性加载就行</strong></p><p>如果不想手动修改<code>android.iml</code>文件,还可以在Android Studio中操作:</p><p><img src="https://oss.jiangkang.tech/jk/aosp_exclude_modules.jpg" alt="exclude"></p><p>被你排除的module会显示为橙色,正常加载的module为灰色.</p><h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><ul><li><p>Could not find a supported mac sdk: [“10.10” “10.11” “10.12” “10.13” “10.14”]</p><p>在我的Macbook Pro上是出现了这个问题的,其实就是当前AOSP的soong编译工具还不支持MacOS 10.15,而我使用的正好是10.15,因此找到<code>build/soong/cc/config/x86_darwin_host.go</code>文件,并新增10.15支持即可:</p><pre class=" language-go"><code class="language-go">    darwinSupportedSdkVersions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token string">"10.10"</span><span class="token punctuation">,</span>        <span class="token string">"10.11"</span><span class="token punctuation">,</span>        <span class="token string">"10.12"</span><span class="token punctuation">,</span>        <span class="token string">"10.13"</span><span class="token punctuation">,</span>        <span class="token string">"10.14"</span><span class="token punctuation">,</span>        <span class="token string">"10.15"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span></code></pre><p><strong>结尾那个逗号一定要带上,要不然会报错</strong></p><p>如果你不知道自己当前使用的sdk版本,可以使用下面的命令:</p><pre class=" language-shell"><code class="language-shell">find /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs -iname "*.sdk"</code></pre></li><li><p>Java代码跳转错误</p><p><img src="https://oss.jiangkang.tech/jk/activitythread.png" alt="image-20200821235334709"></p><p>比如<code>ActivityThread</code>中有:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>ActivityManager<span class="token punctuation">.</span>PROCESS_STATE_UNKNOWN<span class="token punctuation">;</span></code></pre><p>一般不处理会“飘红”报错,那是因为引用的<code>ActivityManager</code>路径错了,引用到了test中去了.</p><p>有两种解决办法: </p><ul><li><p>修改<code>android.iml</code>中的<code>&lt;oderEntry&gt;</code>和 <code>&lt;sourceFolder&gt;</code>,对于不需要的module先<code>exclude</code>,<code>exclude</code>无效再查看<code>&lt;orderEntry&gt;</code>,再不行就删除对应的<code>&lt;sourceFolder&gt;</code></p></li><li><p>最干脆的办法,其实原理也和上面一样</p><p>把dependencies里一些乱七八糟的依赖都删掉,一劳永逸.(如果害怕删错了,可以找到对应的jar包删除)</p><p><img src="https://oss.jiangkang.tech/jk/aosp.png" alt="image-20200822000213857"></p></li></ul></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://liuwangshu.cn/framework/aosp/4-import-aosp.html" target="_blank" rel="noopener">https://liuwangshu.cn/framework/aosp/4-import-aosp.html</a></li><li><a href="http://wuxiaolong.me/2018/08/15/AOSP3/" target="_blank" rel="noopener">http://wuxiaolong.me/2018/08/15/AOSP3/</a></li><li><a href="https://stackoverflow.com/questions/50760701/could-not-find-a-supported-mac-sdk-10-10-10-11-10-12-10-13" target="_blank" rel="noopener">https://stackoverflow.com/questions/50760701/could-not-find-a-supported-mac-sdk-10-10-10-11-10-12-10-13</a></li><li><a href="https://liuwangshu.cn/framework/aosp/5-debug-aosp.html" target="_blank" rel="noopener">https://liuwangshu.cn/framework/aosp/5-debug-aosp.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前说过使用VSCode阅读AOSP源码的方法,但是作为Android开发,还是对Android Studio熟悉一些,这里看下如何使用Android Studio查看AOSP源码.&lt;/p&gt;
&lt;p&gt;如果你之前没完整的编译过AOSP,可以按照下面的流程进行配置:&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="AOSP" scheme="https://www.jiangkang.tech/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title>MultiDex原理分析</title>
    <link href="https://www.jiangkang.tech/2020/08/19/android/multidex-yuan-li-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/08/19/android/multidex-yuan-li-fen-xi/</id>
    <published>2020-08-19T15:34:05.000Z</published>
    <updated>2020-08-19T15:35:18.180Z</updated>
    
    <content type="html"><![CDATA[<p>单个Dex文件,即Dalvik Executable,代码中可调用的引用总数最多为64K(65536个).</p><h2 id="版本差异"><a href="#版本差异" class="headerlink" title="版本差异"></a>版本差异</h2><ul><li><p>Android 5.0 之前</p><p>使用的是Dalvik虚拟机,默认情况下Dalvik会限制每个APK只能使用一个classes.dex字节码文件.</p><p>为了绕过这一限制,可以使用<code>multidex</code>库,进行分dex.</p><p>在运行时,multidex会使用特殊的ClassLoader搜索对应方法的的所有dex文件,而不只是classes.dex.</p></li><li><p>Android 5.0 及更高版本</p><p>使用ART虚拟机,支持从APK加载多个Dex文件.</p><p>ART虚拟机在APP安装时会进行预编译,会扫描classesN.dex文件,并将它们编译成<code>.oat</code>文件,因此不需要使用multidex.</p></li></ul><p>一般把classes.dex,叫做primary dex,或者主要dex.</p><h2 id="指定主要dex中必须包含的类"><a href="#指定主要dex中必须包含的类" class="headerlink" title="指定主要dex中必须包含的类"></a>指定主要dex中必须包含的类</h2><pre class=" language-groovy"><code class="language-groovy">android <span class="token punctuation">{</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            multiDexKeepFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'multidex-config.txt'</span><span class="token punctuation">)</span>            <span class="token punctuation">...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>multidex-config.txt</code>中的格式如下:</p><pre class=" language-properties"><code class="language-properties">com/example/MyClass.classcom/example/MyOtherClass.class</code></pre><p>还有一个<code>multiDexKeepProguard</code>经常与上面的<code>multiDexKeepFile</code>搭配使用.</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们使用的基本上都是<code>MultiDex.install(context)</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">install</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断当前虚拟机是否已经支持了多个dex文件,比如如果是ART虚拟机,java.vm.version 的majorversion >=2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VM_MULTIDEX_CAPABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"VM has multidex support, MultiDex support library is disabled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ApplicationInfo applicationInfo <span class="token operator">=</span> <span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doInstallation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>applicationInfo<span class="token punctuation">.</span>sourceDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// base.apk</span>                <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>applicationInfo<span class="token punctuation">.</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// /data/data/packageName/</span>                CODE_CACHE_SECONDARY_FOLDER_NAME<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// "secondary-dexes"</span>                NO_KEY_PREFIX<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// ""</span>                <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>来看一下具体的安装过程:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doInstallation</span><span class="token punctuation">(</span>Context mainContext<span class="token punctuation">,</span> File sourceApk<span class="token punctuation">,</span> File dataDir<span class="token punctuation">,</span>            String secondaryFolderName<span class="token punctuation">,</span> String prefsKeyPrefix<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> reinstallOnPatchRecoverableException<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>                IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span>                InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span>                ClassNotFoundException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>installedApk<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首次执行肯定不包含</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>installedApk<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            installedApk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Android 5.0及以上版本,log提示不需要</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">></span> MAX_SUPPORTED_SDK_VERSION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"MultiDex is not guaranteed to work in SDK version "</span>                        <span class="token operator">+</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">+</span> <span class="token string">": SDK version higher than "</span>                        <span class="token operator">+</span> MAX_SUPPORTED_SDK_VERSION <span class="token operator">+</span> <span class="token string">" should be backed by "</span>                        <span class="token operator">+</span> <span class="token string">"runtime with built-in multidex capabilty but it's not the "</span>                        <span class="token operator">+</span> <span class="token string">"case here: java.vm.version=\""</span>                        <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.vm.version"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 可用用来加载Dex字节码的ClassLoader,multidex会修改它的pathList属性以添加额外的Dex文件</span>            <span class="token comment" spellcheck="true">// 这里返回的ClassLoder一定是BaseDexClassLoader或者它的子类,因为只有他们才可以加载Dex字节码</span>            ClassLoader loader <span class="token operator">=</span> <span class="token function">getDexClassloader</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 清理/data/data/packageName/secondary-dexes/下的文件</span>            <span class="token function">clearOldDexDir</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建并获取/data/data/packageName/code_cache/secondary-dexes/</span>            File dexDir <span class="token operator">=</span> <span class="token function">getDexDir</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">,</span> dataDir<span class="token punctuation">,</span> secondaryFolderName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 会创建一个Multidex.lock的空文件,用于文件锁,防止该操作与dexopt并行执行</span>            MultiDexExtractor extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiDexExtractor</span><span class="token punctuation">(</span>sourceApk<span class="token punctuation">,</span> dexDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 加载dex文件,把次要的dex每个都写入zip中</span>            List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> files <span class="token operator">=</span>                        extractor<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>mainContext<span class="token punctuation">,</span> prefsKeyPrefix<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关键,加载次要dex</span>            <span class="token function">installSecondaryDexes</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> dexDir<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里面其实就是解压APK,从APK中获取到Dex,并且把次要dex都打包成zip,后续处理:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">installSecondaryDexes</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> File dexDir<span class="token punctuation">,</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> files<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span>            InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span>            ClassNotFoundException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// >= Android 4.4</span>                V19<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">,</span> dexDir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Androd 4.0 &lt;= x &lt; Android 4.4</span>                V14<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Android 4.0以下</span>                V4<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>看一下Android 4.4以上的逻辑:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">install</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">File</span><span class="token operator">></span> additionalClassPathEntries<span class="token punctuation">,</span>                File optimizedDirectory<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>                        NoSuchFieldException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span>                        IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到BaseDexClassLoader子类的pathList Field </span>            <span class="token comment" spellcheck="true">// 这里会从当前classloader找,找不到就找父类的              </span>            Field pathListField <span class="token operator">=</span> <span class="token function">findField</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token string">"pathList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object dexPathList <span class="token operator">=</span> pathListField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>            ArrayList<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>IOException<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关键:将次要dex添加到dexElements中              </span>            <span class="token function">expandFieldArray</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> <span class="token string">"dexElements"</span><span class="token punctuation">,</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>File<span class="token operator">></span><span class="token punctuation">(</span>additionalClassPathEntries<span class="token punctuation">)</span><span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span>                    suppressedExceptions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">expandFieldArray</span><span class="token punctuation">(</span>Object instance<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> extraElements<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span>            IllegalAccessException <span class="token punctuation">{</span>        Field jlrField <span class="token operator">=</span> <span class="token function">findField</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> original <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> jlrField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> combined <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>                original<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> original<span class="token punctuation">.</span>length <span class="token operator">+</span> extraElements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> original<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>extraElements<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> combined<span class="token punctuation">,</span> original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> extraElements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        jlrField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> combined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用makeDexElements,将次要的dex添加到elmentents中</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>                Object dexPathList<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span>                ArrayList<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span>                        NoSuchMethodException <span class="token punctuation">{</span>            Method makeDexElements <span class="token operator">=</span>                    <span class="token function">findMethod</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> <span class="token string">"makeDexElements"</span><span class="token punctuation">,</span> ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> File<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                            ArrayList<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> makeDexElements<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>dexPathList<span class="token punctuation">,</span> files<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span>                    suppressedExceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">makeDexElements</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>File<span class="token operator">></span> files<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span>            List<span class="token operator">&lt;</span>IOException<span class="token operator">></span> suppressedExceptions<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isTrusted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Element<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">[</span>files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> elementsPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 加载Dex,构造DexFile对象</span>              DexFile dex <span class="token operator">=</span> null<span class="token punctuation">;</span>              dex <span class="token operator">=</span> <span class="token function">loadDexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 将dex添加到elemnts中</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>dex <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  elements<span class="token punctuation">[</span>elementsPos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>dex<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>dex <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> isTrusted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                dex<span class="token punctuation">.</span><span class="token function">setTrusted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>elementsPos <span class="token operator">!=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          elements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> elementsPos<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用Native方法打开Dex文件,构造DexFile对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DexFile <span class="token function">loadDexFile</span><span class="token punctuation">(</span>File file<span class="token punctuation">,</span> File optimizedDirectory<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">,</span>                                       Element<span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optimizedDirectory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DexFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            String optimizedPath <span class="token operator">=</span> <span class="token function">optimizedPathFor</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> optimizedDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> DexFile<span class="token punctuation">.</span><span class="token function">loadDex</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> optimizedPath<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要做的就是Hook <code>BaseDexClassLoader</code>,找到其中的pathList字段,并将dex封装到Element中,添加到dexPathList的elements中.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>multidex的关键其实就是利用反射机制,Hook <code>BaseDexClassLoader</code>及其子类中的<code>pathList</code>,将除了主要dex的其他dex都利用classloader加载到pathList中.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单个Dex文件,即Dalvik Executable,代码中可调用的引用总数最多为64K(65536个).&lt;/p&gt;
&lt;h2 id=&quot;版本差异&quot;&gt;&lt;a href=&quot;#版本差异&quot; class=&quot;headerlink&quot; title=&quot;版本差异&quot;&gt;&lt;/a&gt;版本差异&lt;/h2&gt;&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="MultiDex" scheme="https://www.jiangkang.tech/tags/MultiDex/"/>
    
  </entry>
  
  <entry>
    <title>Android APP启动流程分析</title>
    <link href="https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/08/14/android/app-qi-dong-liu-cheng-fen-xi/</id>
    <published>2020-08-14T05:30:03.000Z</published>
    <updated>2020-08-14T05:31:17.119Z</updated>
    
    <content type="html"><![CDATA[<p>之前也写过Application启动流程之类的文章,但是总感觉这个程度不够,再来总结下.</p><p>先把脑子里那一堆忘掉,想一想要启动一个Application需要干什么:</p><ul><li><p>需要知道app可执行文件的位置</p><p>即apk中的dex文件,或者经过dexopt优化过后的dex文件,在APK安装的时候信息已经被记录在了手机上.</p></li><li><p>创建app进程</p><p>Android是基于Linux的,创建进程的方式一般有两种,fork和exec,在Android中应用进程都是从zygote进程fork的.</p></li><li><p>进程创建了得执行一个main()入口方法,把应用跑起来</p><p>main()入口在<code>ActivityThread</code>中</p></li><li><p>Android还比较特殊,需要启动一个主界面,即Launch Activity</p><p>APK安装时已经把Activity的各种信息保存了,因此找到对应APP的Launch Activity即可</p></li></ul><p>再把流程走一遍吧!</p><h2 id="点击桌面上的App-Icon"><a href="#点击桌面上的App-Icon" class="headerlink" title="点击桌面上的App Icon"></a>点击桌面上的App Icon</h2><p>Launcher 应用中 点击APP Icon之后会调用:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 启动目标APP</span><span class="token function">startAppShortcutOrInfoActivity</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span>AppInfo<span class="token punctuation">)</span> tag<span class="token punctuation">,</span> launcher<span class="token punctuation">,</span>                    sourceContainer <span class="token operator">==</span> null <span class="token operator">?</span> CONTAINER_ALL_APPS<span class="token operator">:</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startAppShortcutOrInfoActivity</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> ItemInfo item<span class="token punctuation">,</span> Launcher launcher<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> String sourceContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent<span class="token punctuation">;</span>        intent <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        launcher<span class="token punctuation">.</span><span class="token function">startActivitySafely</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> item<span class="token punctuation">,</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Launcher中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startActivitySafely</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> Intent intent<span class="token punctuation">,</span> ItemInfo item<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> String sourceContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">startActivitySafely</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> item<span class="token punctuation">,</span> sourceContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> v <span class="token keyword">instanceof</span> <span class="token class-name">BubbleTextView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BubbleTextView btv <span class="token operator">=</span> <span class="token punctuation">(</span>BubbleTextView<span class="token punctuation">)</span> v<span class="token punctuation">;</span>            btv<span class="token punctuation">.</span><span class="token function">setStayPressed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addOnResumeCallback</span><span class="token punctuation">(</span>btv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最终还是会调用到<code>startActivity()</code></p><h2 id="Activity-startActivity"><a href="#Activity-startActivity" class="headerlink" title="Activity#startActivity()"></a>Activity#startActivity()</h2><pre class=" language-java"><code class="language-java">activity<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startActivityForResult</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequiresPermission</span> Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Bundle options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mParent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Instrumentation<span class="token punctuation">.</span>ActivityResult ar <span class="token operator">=</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">execStartActivity</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">,</span> mMainThread<span class="token punctuation">.</span><span class="token function">getApplicationThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mToken<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span>                    intent<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ar <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mMainThread<span class="token punctuation">.</span><span class="token function">sendActivityResult</span><span class="token punctuation">(</span>                    mToken<span class="token punctuation">,</span> mEmbeddedID<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> ar<span class="token punctuation">.</span><span class="token function">getResultCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ar<span class="token punctuation">.</span><span class="token function">getResultData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p>这里的<code>mMainThread</code>即是<code>ActivityThread</code>,不过不是目标应用的ActivityThread.</p><p>后面依次经历如下类的调用:</p><ol><li>Instrumentation#execStartActivity()</li><li>ActivityTaskManagerService#startActivityAsUser()</li><li>ActivityStartController#obtainStarter()</li><li>ActivityStarter#startActivity() -&gt; ActivityStarter#startActivityUnchecked()</li><li>RootActivityContainer#resumeFocusedStacksTopActivities()</li><li>ActivityStack#resumeTopActivityUncheckedLocked()  -&gt; ActivityStack#resumeTopActivityInnerLocked()</li><li>ActivityStackSupervisor#startSpecificActivityLocked()</li><li>目标app如果有线程正在运行,则ActivityStackSupervisor#realStartActivityLocked()</li><li>目标app如果没有线程在运行,则会发送一个Handler Message,调用ActivityManagerInternal#startProcess()</li></ol><h2 id="启动app进程"><a href="#启动app进程" class="headerlink" title="启动app进程"></a>启动app进程</h2><p>从<code>ActivityManagerInternal#startProcess()</code>方法开始看:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** Starts a given process. */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> String hostingType<span class="token punctuation">,</span> ComponentName hostingName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityManagerService</code>中有一个内部类<code>LocalService</code>就是继承的<code>ActivityManagerInternal</code>,因此看一下startProcess的实现方法:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> String hostingType<span class="token punctuation">,</span> ComponentName hostingName<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ActivityManagerService<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//传入了进程名字,目标进程的applicationInfo,activity的组件名</span>                    <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* intentFlags */</span><span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">HostingRecord</span><span class="token punctuation">(</span>hostingType<span class="token punctuation">,</span> hostingName<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* allowWhileBooting */</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* isolated */</span><span class="token punctuation">,</span>                            <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* keepIfLarge */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">final</span> ProcessRecord <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span>            ApplicationInfo info<span class="token punctuation">,</span> <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> <span class="token keyword">int</span> intentFlags<span class="token punctuation">,</span>            HostingRecord hostingRecord<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowWhileBooting<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> isolated<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepIfLarge<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的mProcessList专门处理app 进程相关的逻辑</span>        <span class="token keyword">return</span> mProcessList<span class="token punctuation">.</span><span class="token function">startProcessLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">,</span> knownToBeDead<span class="token punctuation">,</span> intentFlags<span class="token punctuation">,</span>                hostingRecord<span class="token punctuation">,</span> allowWhileBooting<span class="token punctuation">,</span> isolated<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">/* isolatedUid */</span><span class="token punctuation">,</span> keepIfLarge<span class="token punctuation">,</span>                null <span class="token comment" spellcheck="true">/* ABI override */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* entryPoint */</span><span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* entryPointArgs */</span><span class="token punctuation">,</span>                null <span class="token comment" spellcheck="true">/* crashHandler */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到<code>ProcessList</code>中看下:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> ProcessRecord <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo info<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> knownToBeDead<span class="token punctuation">,</span> <span class="token keyword">int</span> intentFlags<span class="token punctuation">,</span> HostingRecord hostingRecord<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> allowWhileBooting<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isolated<span class="token punctuation">,</span> <span class="token keyword">int</span> isolatedUid<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepIfLarge<span class="token punctuation">,</span>            String abiOverride<span class="token punctuation">,</span> String entryPoint<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> entryPointArgs<span class="token punctuation">,</span> Runnable crashHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">elapsedRealtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProcessRecord app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据进程名和uid,获取进程信息,ProcessList中有一个Map存储了processName,uid到ProcessRecord的映射</span>        <span class="token comment" spellcheck="true">// 获取的是正在运行的进程的信息,如果之前没运行过这里当然是null</span>        app <span class="token operator">=</span> <span class="token function">getProcessRecordLocked</span><span class="token punctuation">(</span>processName<span class="token punctuation">,</span> info<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> keepIfLarge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkSlow</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> <span class="token string">"startProcess: after getProcessRecord"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> app<span class="token punctuation">.</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProcessList<span class="token punctuation">.</span><span class="token function">killProcessGroup</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> app<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            mService<span class="token punctuation">.</span><span class="token function">handleAppDiedLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>app <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建新的ProcessRecord</span>            app <span class="token operator">=</span> <span class="token function">newProcessRecordLocked</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> processName<span class="token punctuation">,</span> isolated<span class="token punctuation">,</span> isolatedUid<span class="token punctuation">,</span> hostingRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            app<span class="token punctuation">.</span>crashHandler <span class="token operator">=</span> crashHandler<span class="token punctuation">;</span>            app<span class="token punctuation">.</span>isolatedEntryPoint <span class="token operator">=</span> entryPoint<span class="token punctuation">;</span>            app<span class="token punctuation">.</span>isolatedEntryPointArgs <span class="token operator">=</span> entryPointArgs<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If this is a new package in the process, add the package to the list</span>            app<span class="token punctuation">.</span><span class="token function">addPackage</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> info<span class="token punctuation">.</span>longVersionCode<span class="token punctuation">,</span> mService<span class="token punctuation">.</span>mProcessStats<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 关键:启动app进程</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> hostingRecord<span class="token punctuation">,</span> abiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> success <span class="token operator">?</span> app <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>ProcessRecord app<span class="token punctuation">,</span> HostingRecord hostingRecord<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> disableHiddenApiChecks<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mountExtStorageFull<span class="token punctuation">,</span>            String abiOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// abi</span>            String requiredAbi <span class="token operator">=</span> <span class="token punctuation">(</span>abiOverride <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> abiOverride <span class="token operator">:</span> app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredAbi <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                requiredAbi <span class="token operator">=</span> Build<span class="token punctuation">.</span>SUPPORTED_ABIS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 指令集</span>            String instructionSet <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instructionSet <span class="token operator">=</span> VMRuntime<span class="token punctuation">.</span><span class="token function">getInstructionSet</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 启动进程,进程的入口在ActivityThread.启动成功返回新进程的pid,否则抛出异常</span>            <span class="token keyword">final</span> String entryPoint <span class="token operator">=</span> <span class="token string">"android.app.ActivityThread"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实际启动</span>            <span class="token keyword">return</span> <span class="token function">startProcessLocked</span><span class="token punctuation">(</span>hostingRecord<span class="token punctuation">,</span> entryPoint<span class="token punctuation">,</span> app<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span>                    startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 进程启动失败,清理相关数据</span>            mService<span class="token punctuation">.</span><span class="token function">forceStopPackageLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>userId<span class="token punctuation">,</span> <span class="token string">"start failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里默认是<strong>异步</strong>的方式启动进程,即在一个单独的线程中启动进程:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// service是ActivityManagerService,handler是一个ServiceThread(HandlerThread)中的handler            </span>mService<span class="token punctuation">.</span>mProcStartHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 启动进程</span>       <span class="token keyword">final</span> Process<span class="token punctuation">.</span>ProcessStartResult startResult <span class="token operator">=</span> <span class="token function">startProcess</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>hostingRecord<span class="token punctuation">,</span>                       entryPoint<span class="token punctuation">,</span> app<span class="token punctuation">,</span> app<span class="token punctuation">.</span>startUid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span>              app<span class="token punctuation">.</span>seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> app<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mService<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">handleProcessStartedLocked</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> startResult<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">startProcess</span><span class="token punctuation">(</span>HostingRecord hostingRecord<span class="token punctuation">,</span> String entryPoint<span class="token punctuation">,</span>            ProcessRecord app<span class="token punctuation">,</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>            String seInfo<span class="token punctuation">,</span> String requiredAbi<span class="token punctuation">,</span> String instructionSet<span class="token punctuation">,</span> String invokeWith<span class="token punctuation">,</span>            <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 启动进程</span>            startResult <span class="token operator">=</span> Process<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>entryPoint<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>processName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> requiredAbi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span>                        app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>dataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> app<span class="token punctuation">.</span>info<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>PROC_START_SEQ_IDENT <span class="token operator">+</span> app<span class="token punctuation">.</span>startSeq<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其实这个方法里有一个判断,即regular_zygote,app_zygote,webview_zygote.其实这三个判断,在HostingRecord中可以简单的看出来区别:</p><ul><li>regular_zygote,一般是各种Activity的启动时候用的</li><li>app_zygote,一般是各种Service启动的时候用的</li><li>webview_zygote,当然是webview用的</li></ul><p>后面就进入了<code>Process</code>中了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ProcessStartResult <span class="token function">start</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> String processClass<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> String niceName<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>                                           <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String seInfo<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@NonNull</span> String abi<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String instructionSet<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String appDataDir<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String invokeWith<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String packageName<span class="token punctuation">,</span>                                           <span class="token annotation punctuation">@Nullable</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> zygoteArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// ZYGOTE_PROCESS是ZygoteProcess,processClass,即前面传入的ActivityThread,niceName是包名</span>        <span class="token keyword">return</span> ZYGOTE_PROCESS<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>processClass<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span>                    runtimeFlags<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> targetSdkVersion<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>                    abi<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">,</span> invokeWith<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">/*useUsapPool=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> zygoteArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">startViaZygote</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> String processClass<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> String niceName<span class="token punctuation">,</span>                                                      <span class="token keyword">final</span> <span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span>                                                      <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span>                                                      <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String seInfo<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@NonNull</span> String abi<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String instructionSet<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String appDataDir<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String invokeWith<span class="token punctuation">,</span>                                                      <span class="token keyword">boolean</span> startChildZygote<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String packageName<span class="token punctuation">,</span>                                                      <span class="token keyword">boolean</span> useUsapPool<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Nullable</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> extraArgs<span class="token punctuation">)</span>                                                      <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> argsForZygote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --runtime-args, --setuid=, --setgid=,</span>        <span class="token comment" spellcheck="true">// and --setgroups= must go first</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--runtime-args"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--setuid="</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--setgid="</span> <span class="token operator">+</span> gid<span class="token punctuation">)</span><span class="token punctuation">;</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--runtime-flags="</span> <span class="token operator">+</span> runtimeFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_READ<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_FULL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_INSTALLER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-installer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mountExternal <span class="token operator">==</span> Zygote<span class="token punctuation">.</span>MOUNT_EXTERNAL_LEGACY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--mount-external-legacy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--target-sdk-version="</span> <span class="token operator">+</span> targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --setgroups is a comma-separated list</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gids <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> gids<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"--setgroups="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> gids<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>gids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>niceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--nice-name="</span> <span class="token operator">+</span> niceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>seInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--seinfo="</span> <span class="token operator">+</span> seInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instructionSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--instruction-set="</span> <span class="token operator">+</span> instructionSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>appDataDir <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--app-data-dir="</span> <span class="token operator">+</span> appDataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--invoke-with"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invokeWith<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startChildZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--start-child-zygote"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"--package-name="</span> <span class="token operator">+</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 入口:"android.app.ActivityThread"</span>        argsForZygote<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>processClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extraArgs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>argsForZygote<span class="token punctuation">,</span> extraArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不使用系统图形驱动,则不会使用usap pool</span>            <span class="token keyword">return</span> <span class="token function">zygoteSendArgsAndGetResult</span><span class="token punctuation">(</span><span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">,</span>                                              useUsapPool<span class="token punctuation">,</span>                                              argsForZygote<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>USAP</code>就是unspecialized app process 的意思.</p><p>这里分两步:</p><ol><li><p>打开zygote 的socket 连接</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> ZygoteState <span class="token function">openZygoteSocketIfNeeded</span><span class="token punctuation">(</span>String abi<span class="token punctuation">)</span> <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 连接到64位的zygote socket</span>            <span class="token function">attemptConnectionToPrimaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> primaryZygoteState<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mZygoteSecondarySocketAddress <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打开32位的zygote socket</span>                <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>abi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> secondaryZygoteState<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"Error connecting to zygote"</span><span class="token punctuation">,</span> ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"Unsupported zygote ABI: "</span> <span class="token operator">+</span> abi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>对于Android而言,这里首先会尝试打开64位的zygote socket,如果失败才会尝试32位的zygote.然后返回一个连接状态ZygoteState.</p><p>不管是64位还是32位的zygote socket,过程都是一样的:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptConnectionToPrimaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryZygoteState <span class="token operator">==</span> null <span class="token operator">||</span> primaryZygoteState<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// mZygoteSocketAddress 即 名为"zygote"的LocalSocketAddress</span>            primaryZygoteState <span class="token operator">=</span>                    ZygoteState<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mZygoteSocketAddress<span class="token punctuation">,</span> mUsapPoolSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetApiBlacklistExemptions</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessLogSampleRate</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessStatslogSampleRate</span><span class="token punctuation">(</span>primaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attemptConnectionToSecondaryZygote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondaryZygoteState <span class="token operator">==</span> null <span class="token operator">||</span> secondaryZygoteState<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// "zygote_secondary"</span>            secondaryZygoteState <span class="token operator">=</span>                    ZygoteState<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mZygoteSecondarySocketAddress<span class="token punctuation">,</span>                            mUsapPoolSecondarySocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对一些API的调用做一些限制</span>            <span class="token function">maybeSetApiBlacklistExemptions</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessLogSampleRate</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maybeSetHiddenApiAccessStatslogSampleRate</span><span class="token punctuation">(</span>secondaryZygoteState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>具体的连接过程看下面:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">static</span> ZygoteState <span class="token function">connect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LocalSocketAddress zygoteSocketAddress<span class="token punctuation">,</span>                <span class="token annotation punctuation">@Nullable</span> LocalSocketAddress usapSocketAddress<span class="token punctuation">)</span>                <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 输入输出流</span>            DataInputStream zygoteInputStream<span class="token punctuation">;</span>            BufferedWriter zygoteOutputWriter<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// zygote使用的是LocalSocket</span>            <span class="token keyword">final</span> LocalSocket zygoteSessionSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接socket</span>                zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 绑定对应的输入输出流</span>                zygoteInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zygoteOutputWriter <span class="token operator">=</span>                        <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>                                <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                Zygote<span class="token punctuation">.</span>SOCKET_BUFFER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    zygoteSessionSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将输入输出流等信息封装到ZygoteState中</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteState</span><span class="token punctuation">(</span>zygoteSocketAddress<span class="token punctuation">,</span> usapSocketAddress<span class="token punctuation">,</span>                                   zygoteSessionSocket<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">,</span> zygoteOutputWriter<span class="token punctuation">,</span>                                   <span class="token function">getAbiList</span><span class="token punctuation">(</span>zygoteOutputWriter<span class="token punctuation">,</span> zygoteInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>到这里已经建立起了和zygote的local socket连接.</p></li><li><p>通过建立的local socket 连接发送命令并且返回结果</p><p>这里发送的命令都在前面组装的<code>argsForZygote</code>中,在这里其实就是使用zygote 启动(fork) 指定的进程的命令.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Process<span class="token punctuation">.</span>ProcessStartResult <span class="token function">attemptZygoteSendArgsAndGetResult</span><span class="token punctuation">(</span>            ZygoteState zygoteState<span class="token punctuation">,</span> String msgStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> ZygoteStartFailedEx <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> BufferedWriter zygoteWriter <span class="token operator">=</span> zygoteState<span class="token punctuation">.</span>mZygoteOutputWriter<span class="token punctuation">;</span>            <span class="token keyword">final</span> DataInputStream zygoteInputStream <span class="token operator">=</span> zygoteState<span class="token punctuation">.</span>mZygoteInputStream<span class="token punctuation">;</span>            zygoteWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msgStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            zygoteWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// fork结果</span>            Process<span class="token punctuation">.</span>ProcessStartResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Process<span class="token punctuation">.</span>ProcessStartResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// fork进程成功,返回进程的pid</span>            result<span class="token punctuation">.</span>pid <span class="token operator">=</span> zygoteInputStream<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>usingWrapper <span class="token operator">=</span> zygoteInputStream<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span><span class="token string">"fork() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zygoteState<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"IO Exception while communicating with Zygote - "</span>                    <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ZygoteStartFailedEx</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ol><p>经历了这些步骤之后,app 进程也就创建成功了,再来看下zygote具体是如何响应fork请求的.</p><h2 id="Zygote-fork-app进程"><a href="#Zygote-fork-app进程" class="headerlink" title="Zygote fork app进程"></a>Zygote fork app进程</h2><p>ZygoteServer和ZygoteConnection中会收到socket请求,并做对应的处理:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这个parsedArgs就是上面传入的各种启动参数       </span>pid <span class="token operator">=</span> Zygote<span class="token punctuation">.</span><span class="token function">forkAndSpecialize</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mUid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGid<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mGids<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mRuntimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mMountExternal<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mSeInfo<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">,</span> fdsToClose<span class="token punctuation">,</span> fdsToIgnore<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mStartChildZygote<span class="token punctuation">,</span>                parsedArgs<span class="token punctuation">.</span>mInstructionSet<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mAppDataDir<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到Zygote中看看:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forkAndSpecialize</span><span class="token punctuation">(</span><span class="token keyword">int</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> gid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gids<span class="token punctuation">,</span> <span class="token keyword">int</span> runtimeFlags<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rlimits<span class="token punctuation">,</span> <span class="token keyword">int</span> mountExternal<span class="token punctuation">,</span> String seInfo<span class="token punctuation">,</span> String niceName<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fdsToClose<span class="token punctuation">,</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fdsToIgnore<span class="token punctuation">,</span> <span class="token keyword">boolean</span> startChildZygote<span class="token punctuation">,</span> String instructionSet<span class="token punctuation">,</span> String appDataDir<span class="token punctuation">,</span>            <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">preFork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用native方法fork app进程,niceName是进程名</span>        <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">nativeForkAndSpecialize</span><span class="token punctuation">(</span>                uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtimeFlags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span> mountExternal<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> niceName<span class="token punctuation">,</span> fdsToClose<span class="token punctuation">,</span>                fdsToIgnore<span class="token punctuation">,</span> startChildZygote<span class="token punctuation">,</span> instructionSet<span class="token punctuation">,</span> appDataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回0,表示此时是子进程执行,即app进程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Zygote<span class="token punctuation">.</span><span class="token function">disableExecuteOnly</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ZygoteHooks<span class="token punctuation">.</span><span class="token function">postForkCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到<code>frameworks/base/core/jni/com_android_internal_os_Zygote.cpp</code>中看看:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// nice_name是进程名</span><span class="token keyword">static</span> jint <span class="token function">com_android_internal_os_Zygote_nativeForkAndSpecialize</span><span class="token punctuation">(</span>        JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jclass<span class="token punctuation">,</span> jint uid<span class="token punctuation">,</span> jint gid<span class="token punctuation">,</span> jintArray gids<span class="token punctuation">,</span>        jint runtime_flags<span class="token punctuation">,</span> jobjectArray rlimits<span class="token punctuation">,</span>        jint mount_external<span class="token punctuation">,</span> jstring se_info<span class="token punctuation">,</span> jstring nice_name<span class="token punctuation">,</span>        jintArray managed_fds_to_close<span class="token punctuation">,</span> jintArray managed_fds_to_ignore<span class="token punctuation">,</span> jboolean is_child_zygote<span class="token punctuation">,</span>        jstring instruction_set<span class="token punctuation">,</span> jstring app_data_dir<span class="token punctuation">,</span> jboolean is_top_app<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fork操作</span>    pid_t pid <span class="token operator">=</span> <span class="token function">ForkCommon</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fds_to_close<span class="token punctuation">,</span> fds_to_ignore<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 子进程,即app 进程执行下面的逻辑</span>    <span class="token comment" spellcheck="true">// 这里主要是设置线程名等逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">SpecializeCommon</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> gid<span class="token punctuation">,</span> gids<span class="token punctuation">,</span> runtime_flags<span class="token punctuation">,</span> rlimits<span class="token punctuation">,</span>                       capabilities<span class="token punctuation">,</span> capabilities<span class="token punctuation">,</span>                       mount_external<span class="token punctuation">,</span> se_info<span class="token punctuation">,</span> nice_name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                       is_child_zygote <span class="token operator">==</span> JNI_TRUE<span class="token punctuation">,</span> instruction_set<span class="token punctuation">,</span> app_data_dir<span class="token punctuation">,</span>                       is_top_app <span class="token operator">==</span> JNI_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进程fork之后,会执行下面的逻辑(ZygoteConnection.java中):</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Runnable <span class="token function">handleChildProc</span><span class="token punctuation">(</span>ZygoteArguments parsedArgs<span class="token punctuation">,</span> FileDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> descriptors<span class="token punctuation">,</span>            FileDescriptor pipeFd<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置进程名</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 最初传参没有带这个参数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            WrapperInit<span class="token punctuation">.</span><span class="token function">execApplication</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mInvokeWith<span class="token punctuation">,</span>                    parsedArgs<span class="token punctuation">.</span>mNiceName<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                    VMRuntime<span class="token punctuation">.</span><span class="token function">getCurrentInstructionSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    pipeFd<span class="token punctuation">,</span> parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"WrapperInit.execApplication unexpectedly returned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isZygote<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 普通app会走这个分支</span>                <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">zygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                        parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* classLoader */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ZygoteInit<span class="token punctuation">.</span><span class="token function">childZygoteInit</span><span class="token punctuation">(</span>parsedArgs<span class="token punctuation">.</span>mTargetSdkVersion<span class="token punctuation">,</span>                        parsedArgs<span class="token punctuation">.</span>mRemainingArgs<span class="token punctuation">,</span> null <span class="token comment" spellcheck="true">/* classLoader */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 再来看一下<code>ZygoteInit</code>:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runnable <span class="token function">zygoteInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RuntimeInit<span class="token punctuation">.</span><span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ZygoteInit<span class="token punctuation">.</span><span class="token function">nativeZygoteInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RuntimeInit<span class="token punctuation">.</span><span class="token function">applicationInit</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> 这个方法里干了很多重要的事情:</p><ul><li><p>设置异常处理的逻辑和一些崩溃日志的输出逻辑</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">commonInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 应用到VM中的所有线程,pre handler不可替换,default handler可以替换</span>        LoggingHandler loggingHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RuntimeHooks<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionPreHandler</span><span class="token punctuation">(</span>loggingHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 我们常见的异常处理</span>        Thread<span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KillApplicationHandler</span><span class="token punctuation">(</span>loggingHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoggingHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> mTriggered <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mApplicationObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Process<span class="token punctuation">.</span>SYSTEM_UID <span class="token operator">==</span> Process<span class="token punctuation">.</span><span class="token function">myUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">Clog_e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"*** FATAL EXCEPTION IN SYSTEM PROCESS: "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里就是我们最常见的崩溃信息</span>                StringBuilder message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// The "FATAL EXCEPTION" string is still used on Android even though</span>                <span class="token comment" spellcheck="true">// apps can set a custom UncaughtExceptionHandler that renders uncaught</span>                <span class="token comment" spellcheck="true">// exceptions non-fatal.</span>                message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"FATAL EXCEPTION: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> String processName <span class="token operator">=</span> ActivityThread<span class="token punctuation">.</span><span class="token function">currentProcessName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>processName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Process: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>processName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                message<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"PID: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Process<span class="token punctuation">.</span><span class="token function">myPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">Clog_e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>具体的异常捕获话题就不在这里写了,偏题了.</p></li><li><p>找到ActivityThread的入口方法,并反射调用</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">static</span> Runnable <span class="token function">applicationInit</span><span class="token punctuation">(</span><span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">,</span>            ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置APP内存使用上限和targetSdkVersion</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetHeapUtilization</span><span class="token punctuation">(</span><span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetSdkVersion</span><span class="token punctuation">(</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Arguments args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arguments</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到ActivityThread的main方法</span>        <span class="token keyword">return</span> <span class="token function">findStaticMain</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>startClass<span class="token punctuation">,</span> args<span class="token punctuation">.</span>startArgs<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ul><pre><code>  protected static Runnable findStaticMain(String className, String[] argv,          ClassLoader classLoader) {      Class&lt;?&gt; cl;      try {          // 反射获取到ActivityThread          cl = Class.forName(className, true, classLoader);      } catch (ClassNotFoundException ex) {          throw new RuntimeException(                  &quot;Missing class when invoking static main &quot; + className,                  ex);      }      Method m;      try {          // 获取到main方法          m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });      } catch (NoSuchMethodException ex) {          throw new RuntimeException(                  &quot;Missing static main on &quot; + className, ex);      } catch (SecurityException ex) {          throw new RuntimeException(                  &quot;Problem getting static main on &quot; + className, ex);      }      int modifiers = m.getModifiers();      if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {          throw new RuntimeException(                  &quot;Main method is not public and static on &quot; + className);      }      // 包装到一个Runnable中      return new MethodAndArgsCaller(m, argv);  }</code></pre><pre><code>  ```java      static class MethodAndArgsCaller implements Runnable {          /** method to call */          private final Method mMethod;          /** argument array */          private final String[] mArgs;          public MethodAndArgsCaller(Method method, String[] args) {              mMethod = method;              mArgs = args;          }          public void run() {              try {                  // 执行ActivityThread.main()                  mMethod.invoke(null, new Object[] { mArgs });              } catch (IllegalAccessException ex) {                  throw new RuntimeException(ex);              } catch (InvocationTargetException ex) {                  Throwable cause = ex.getCause();                  if (cause instanceof RuntimeException) {                      throw (RuntimeException) cause;                  } else if (cause instanceof Error) {                      throw (Error) cause;                  }                  throw new RuntimeException(ex);              }          }      }</code></pre><p>  到这里ActivityThread.main()就被成功执行了.</p><p>  那么实际上这个返回的Runnable是谁运行的,在什么线程里运行的呢?</p><p>  答案是在<code>ZygoteServer</code>的<code>runSelectLoop</code>方法中会再处理一下,最后交由ZygoteInit去执行.</p><h2 id="ActivityThread-main"><a href="#ActivityThread-main" class="headerlink" title="ActivityThread.main()"></a>ActivityThread.main()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//主线程 Looper</span>        Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关键方法,会将APP的Application对象与这个新的app进程联系起来</span>        thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainThreadHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sMainThreadHandler <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最为关键的调用就是attach方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// mgr就是ActivityManagerService</span><span class="token keyword">final</span> IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    mgr<span class="token punctuation">.</span><span class="token function">attachApplication</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后会调用到<code>ApplicationThread</code>中的<code>bindApplication()</code>方法:</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">bindApplication</span><span class="token punctuation">(</span>String processName<span class="token punctuation">,</span> ApplicationInfo appInfo<span class="token punctuation">,</span>                List<span class="token operator">&lt;</span>ProviderInfo<span class="token operator">></span> providers<span class="token punctuation">,</span> ComponentName instrumentationName<span class="token punctuation">,</span>                ProfilerInfo profilerInfo<span class="token punctuation">,</span> Bundle instrumentationArgs<span class="token punctuation">,</span>                IInstrumentationWatcher instrumentationWatcher<span class="token punctuation">,</span>                IUiAutomationConnection instrumentationUiConnection<span class="token punctuation">,</span> <span class="token keyword">int</span> debugMode<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> enableBinderTracking<span class="token punctuation">,</span> <span class="token keyword">boolean</span> trackAllocation<span class="token punctuation">,</span>                <span class="token keyword">boolean</span> isRestrictedBackupMode<span class="token punctuation">,</span> <span class="token keyword">boolean</span> persistent<span class="token punctuation">,</span> Configuration config<span class="token punctuation">,</span>                CompatibilityInfo compatInfo<span class="token punctuation">,</span> Map services<span class="token punctuation">,</span> Bundle coreSettings<span class="token punctuation">,</span>                String buildSerial<span class="token punctuation">,</span> AutofillOptions autofillOptions<span class="token punctuation">,</span>                ContentCaptureOptions contentCaptureOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将进程信息封装到AppBindData中,然后利用Handler传输</span>            AppBindData data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppBindData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span>processName <span class="token operator">=</span> processName<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>appInfo <span class="token operator">=</span> appInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>providers <span class="token operator">=</span> providers<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationName <span class="token operator">=</span> instrumentationName<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationArgs <span class="token operator">=</span> instrumentationArgs<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationWatcher <span class="token operator">=</span> instrumentationWatcher<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>instrumentationUiAutomationConnection <span class="token operator">=</span> instrumentationUiConnection<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>debugMode <span class="token operator">=</span> debugMode<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>enableBinderTracking <span class="token operator">=</span> enableBinderTracking<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>trackAllocation <span class="token operator">=</span> trackAllocation<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>restrictedBackupMode <span class="token operator">=</span> isRestrictedBackupMode<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>persistent <span class="token operator">=</span> persistent<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>compatInfo <span class="token operator">=</span> compatInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>initProfilerInfo <span class="token operator">=</span> profilerInfo<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>buildSerial <span class="token operator">=</span> buildSerial<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>autofillOptions <span class="token operator">=</span> autofillOptions<span class="token punctuation">;</span>            data<span class="token punctuation">.</span>contentCaptureOptions <span class="token operator">=</span> contentCaptureOptions<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// H是ApplicationThread中的一个Handler</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>BIND_APPLICATION<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这里会发送一个<code>BIND_APPLICATION</code>消息,Handler接收到之后会进行处理:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleBindApplication</span><span class="token punctuation">(</span>AppBindData data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置UI线程为敏感线程</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">registerSensitiveThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 告诉ART虚拟机进程名</span>        Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>processName<span class="token punctuation">)</span><span class="token punctuation">;</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">setProcessPackageName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传递数据目录给ART,用于缓存信息</span>        VMRuntime<span class="token punctuation">.</span><span class="token function">setProcessDataDirectory</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// data.info 是LoadedApk对象,即表示一个新APK的信息</span>        data<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token function">getPackageInfoNoCheck</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">,</span> data<span class="token punctuation">.</span>compatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        HardwareRenderer<span class="token punctuation">.</span><span class="token function">setPackageName</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建应用的 context</span>        <span class="token keyword">final</span> ContextImpl appContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 硬件加速</span>        <span class="token function">setupGraphicsSupport</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">basicInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Application对象</span>        Application app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里非常重要的是:传入的instrumentation对象为null</span>        app <span class="token operator">=</span> data<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>restrictedBackupMode<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        mInitialApplication <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不是backup模式的话,会安装ContentProvider</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>restrictedBackupMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>providers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">installContentProviders</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> data<span class="token punctuation">.</span>providers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Instrument 测试通常在这个时机启动测试线程,因此在这里onCreate</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>instrumentationArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Application的onCreate()方法</span>        mInstrumentation<span class="token punctuation">.</span><span class="token function">callApplicationOnCreate</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 预加载字体资源</span>        FontsContract<span class="token punctuation">.</span><span class="token function">setApplicationContextForResources</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ApplicationInfo info <span class="token operator">=</span>                        <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApplicationInfo</span><span class="token punctuation">(</span>                                data<span class="token punctuation">.</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                PackageManager<span class="token punctuation">.</span>GET_META_DATA <span class="token comment" spellcheck="true">/*flags*/</span><span class="token punctuation">,</span>                                UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">final</span> <span class="token keyword">int</span> preloadedFontsResource <span class="token operator">=</span> info<span class="token punctuation">.</span>metaData<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>                          ApplicationInfo<span class="token punctuation">.</span>METADATA_PRELOADED_FONTS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>preloadedFontsResource <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              data<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preloadFonts</span><span class="token punctuation">(</span>preloadedFontsResource<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个过程中做了很多事,但是主要就以下这些:</p><ul><li>告诉ART虚拟机一些信息,比如应用的包名,数据目录等</li><li>各种调试功能,Profile功能判断与设置</li><li>告诉虚拟机当前UI线程是敏感线程</li><li>硬件加速的支持</li><li>创建LoadedApk对象</li><li>创建Context对象</li><li><strong>在创建Application之前</strong>,创建Instrumentation,用于监视app与系统的交互</li><li><strong>创建Application对象</strong></li><li>安装ContentProvider</li><li>利用Instrumentation执行Application#onCreate()回调</li></ul><h2 id="Application对象的创建"><a href="#Application对象的创建" class="headerlink" title="Application对象的创建"></a>Application对象的创建</h2><p>上面已经说过,会调用<code>LoadedAPk#makeApplication()</code>方法去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Application <span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceDefaultAppClass<span class="token punctuation">,</span>            Instrumentation instrumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mApplication <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mApplication<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Application app <span class="token operator">=</span> null<span class="token punctuation">;</span>        String appClass <span class="token operator">=</span> mApplicationInfo<span class="token punctuation">.</span>className<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认的Application</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>forceDefaultAppClass <span class="token operator">||</span> <span class="token punctuation">(</span>appClass <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            appClass <span class="token operator">=</span> <span class="token string">"android.app.Application"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader cl <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mPackageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置线程的Context ClassLoader</span>                <span class="token function">initializeJavaContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建Context</span>            ContextImpl appContext <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>mActivityThread<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建Application对象</span>            app <span class="token operator">=</span> mActivityThread<span class="token punctuation">.</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">newApplication</span><span class="token punctuation">(</span>                    cl<span class="token punctuation">,</span> appClass<span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            appContext<span class="token punctuation">.</span><span class="token function">setOuterContext</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//...</span>        <span class="token punctuation">}</span>        mActivityThread<span class="token punctuation">.</span>mAllApplications<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        mApplication <span class="token operator">=</span> app<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Rewrite the R 'constants' for all library apks.</span>        SparseArray<span class="token operator">&lt;</span>String<span class="token operator">></span> packageIdentifiers <span class="token operator">=</span> <span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAssignedPackageIdentifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0x01</span> <span class="token operator">||</span> id <span class="token operator">==</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">rewriteRValues</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packageIdentifiers<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到其实还是调用的Instrumentation去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Application <span class="token function">newApplication</span><span class="token punctuation">(</span>ClassLoader cl<span class="token punctuation">,</span> String className<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span>             ClassNotFoundException <span class="token punctuation">{</span>        Application app <span class="token operator">=</span> <span class="token function">getFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">instantiateApplication</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>最后会进入到<code>AppComponentFactory</code>中利用ClassLoader去创建Application对象:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> Application <span class="token function">instantiateApplication</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> ClassLoader cl<span class="token punctuation">,</span>            <span class="token annotation punctuation">@NonNull</span> String className<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的ClassLoader就是LoadedApk的ClassLoader</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Application<span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>到这里Application对象就创建成功了,并且调用了Application的<code>attach(context)</code>方法.</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/* package */</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">attachBaseContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        mLoadedApk <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">getImpl</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>attach</code>方法子类是不可以重写的,但是<code>attachBaseContext</code>可以,这里可以看到Application还持有了LoadedApk对象.</p><h2 id="Application-onCreate-执行"><a href="#Application-onCreate-执行" class="headerlink" title="Application#onCreate()执行"></a>Application#onCreate()执行</h2><p>在application对象<code>attach(context)</code>之后,Instrumentation会中会调用<code>Application#onCreate()</code>方法:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callApplicationOnCreate</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其实在调用<code>Application#onCreate()</code>之前,可以在<code>Instrumentation</code>中插入一些钩子逻辑,这个在前面的代码中可以看到端倪:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><p><code>Instrumentation</code>的<code>onCreate()</code>是一个空方法,可以实现自己的<code>Instrumentation</code>以插入一些逻辑,以在应用代码执行前做一些特殊的处理.</p><p>到这里Application就已经创建完成,并且执行了onCreate了.剩下的就是其中Launcher Activity的流程了,这篇文章源码流程已经够多了,后面单独写一篇文章梳理下Activity的启动流程吧!</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Application其实也是通过ClassLoader加载的</li><li>zygote fork出了进程,但是并不代表执行了ActivityThread的main方法</li><li>zygote是java世界的进程,fork出 app进程之后,app进程也拥有一份拷贝数据</li><li>Instrumentation和LoadedApk在Application的启动过程中很重要,可以利用它做很多事情</li><li>全局的异常捕获与处理也是在这个阶段设置的</li><li>堆内存的使用上限也是这个过程设置的</li><li>Context的创建,主线程Looper等都是在这个过程中进行的</li><li>Debug模式,Profile模式的逻辑判断也是在这个过程进行的</li><li>zygote的通信机制:local socket + file descriptor</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前也写过Application启动流程之类的文章,但是总感觉这个程度不够,再来总结下.&lt;/p&gt;
&lt;p&gt;先把脑子里那一堆忘掉,想一想要启动一个Application需要干什么:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要知道app可执行文件的位置&lt;/p&gt;
&lt;p&gt;即apk中的dex
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="APP启动流程" scheme="https://www.jiangkang.tech/tags/APP%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>APK安装流程分析-普通APP的安装</title>
    <link href="https://www.jiangkang.tech/2020/08/11/android/apk-an-zhuang-liu-cheng-fen-xi-pu-tong-app-de-an-zhuang/"/>
    <id>https://www.jiangkang.tech/2020/08/11/android/apk-an-zhuang-liu-cheng-fen-xi-pu-tong-app-de-an-zhuang/</id>
    <published>2020-08-11T10:44:56.000Z</published>
    <updated>2020-08-11T10:46:26.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android系统的代码总是在不断迭代的,具体的类和方法本身并不重要,关键是了解流程与主要的路径</p><p>本文基于AOSP master分支 2020年8月,Android 11 已经处于beta版</p></blockquote><h2 id="三种安装方式"><a href="#三种安装方式" class="headerlink" title="三种安装方式"></a>三种安装方式</h2><ul><li>系统级app安装</li><li>普通app安装</li><li>adb安装</li></ul><p>这里看一下普通APP的安装.</p><p>在分析之前,想一下如果是我们来安装apk,需要怎么做:</p><ol><li><p>apk实际上是一个zip包,先解压,要不然只能测量下大小了,当然也可以不解压直接查看zip包的内容</p></li><li><p>系统重启之后我们依然要快速显示和启动app,那么肯定得存一份APP信息到手机上,那么存什么信息呢?</p><ul><li>可执行文件的位置,在Android里跑的是dex,或者dex处理过后的机器码,因此这里应该是dex或者oat文件的位置</li><li>应用有一些特殊的功能,比如可以用来打开文档,网页等,因此需要把这些信息注册到一个系统表里,可以快速查询,Android中应也有这么一个表</li></ul><p>而且最好是把apk的资源,可执行文件等内部数据放到一个文件夹下,这样卸载的时候可以直接删除目录.</p></li><li><p>zip包解压了,信息也存了,为了安全,应该把对应的可执行文件和资源文件复制到指定的路径,如果有so库,还要让程序知道去哪里找so文件</p></li><li><p>检查手机上之前是否已经安装了这个app,如果安装了,比较一下版本,签名,再确定怎么处理</p></li><li><p>删除apk包以节省空间</p></li></ol><h2 id="APK解压缩"><a href="#APK解压缩" class="headerlink" title="APK解压缩"></a>APK解压缩</h2><p>APK的解析在Java中的入口在<code>PackageParser</code>中,但是实际解压的操作在Native层,也就是<code>ApkAssets</code>中,<code>ApkAssets</code>中会调用libziparchive库去解压缩APK.</p><pre class=" language-cpp"><code class="language-cpp">int32_t <span class="token function">OpenArchive</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">::</span>android<span class="token operator">::</span>base<span class="token operator">::</span>utf8<span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_BINARY <span class="token operator">|</span> O_CLOEXEC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ALOGW</span><span class="token punctuation">(</span><span class="token string">"Unable to open '%s': %s"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> kIoError<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int32_t <span class="token function">OpenArchiveFd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">,</span>                      <span class="token keyword">bool</span> assume_ownership<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> assume_ownership<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> debug_file_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> int32_t <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>ZipArchive<span class="token operator">*</span> archive<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  int32_t result <span class="token operator">=</span> <span class="token function">MapCentralDirectory</span><span class="token punctuation">(</span>debug_file_name<span class="token punctuation">,</span> archive<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">!=</span> kSuccess <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token function">ParseZipArchive</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int32_t <span class="token function">OpenArchiveFd</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> debug_file_name<span class="token punctuation">,</span> ZipArchiveHandle<span class="token operator">*</span> handle<span class="token punctuation">,</span>                      <span class="token keyword">bool</span> assume_ownership<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ZipArchive<span class="token operator">*</span> archive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ZipArchive</span><span class="token punctuation">(</span><span class="token function">MappedZipFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">,</span> assume_ownership<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>handle <span class="token operator">=</span> archive<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">OpenArchiveInternal</span><span class="token punctuation">(</span>archive<span class="token punctuation">,</span> debug_file_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解压的具体的过程就不分析了,使用解压库就行,来看下Manifest.xml信息的提取.</p><p><code>ApkAssets.java</code>中有:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token annotation punctuation">@NonNull</span> XmlResourceParser <span class="token function">openXml</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> String fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Preconditions<span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"fileName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> nativeXmlPtr <span class="token operator">=</span> <span class="token function">nativeOpenXml</span><span class="token punctuation">(</span>mNativePtr<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">(</span>XmlBlock block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBlock</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> nativeXmlPtr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XmlResourceParser parser <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">newParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// If nativeOpenXml doesn't throw, it will always return a valid native pointer,</span>                <span class="token comment" spellcheck="true">// which makes newParser always return non-null. But let's be paranoid.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"block.newParser() returned a null parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> parser<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>frameworks/base/core/jni/android_content_res_ApkAssets.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">static</span> jlong <span class="token function">NativeOpenXml</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jclass <span class="token comment" spellcheck="true">/*clazz*/</span><span class="token punctuation">,</span> jlong ptr<span class="token punctuation">,</span> jstring file_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ScopedUtfChars <span class="token function">path_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ApkAssets<span class="token operator">*</span> apk_assets <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> ApkAssets<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这里就是打开Manifest文件的入口</span>  std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span> apk_assets<span class="token operator">-</span><span class="token operator">></span><span class="token function">Open</span><span class="token punctuation">(</span>path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                  Asset<span class="token operator">::</span>AccessMode<span class="token operator">::</span>ACCESS_RANDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"java/io/FileNotFoundException"</span><span class="token punctuation">,</span> path_utf8<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// DynamicRefTable is only needed when looking up resource references. Opening an XML file</span>  <span class="token comment" spellcheck="true">// directly from an ApkAssets has no notion of proper resource references.</span>  std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>ResXMLTree<span class="token operator">></span> xml_tree <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>ResXMLTree<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">nullptr</span> <span class="token comment" spellcheck="true">/*dynamicRefTable*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  status_t err <span class="token operator">=</span> xml_tree<span class="token operator">-</span><span class="token operator">></span><span class="token function">setTo</span><span class="token punctuation">(</span>asset<span class="token operator">-</span><span class="token operator">></span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> asset<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  asset<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> NO_ERROR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">jniThrowException</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"java/io/FileNotFoundException"</span><span class="token punctuation">,</span> <span class="token string">"Corrupt XML binary file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>jlong<span class="token operator">></span><span class="token punctuation">(</span>xml_tree<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>AppAssets.cpp</code>中有:</p><pre class=" language-cpp"><code class="language-cpp">std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> ApkAssets<span class="token operator">::</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token operator">::</span>string<span class="token operator">&amp;</span> path<span class="token punctuation">,</span> Asset<span class="token operator">::</span>AccessMode mode<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>  <span class="token function">CHECK</span><span class="token punctuation">(</span>zip_handle_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">::</span>ZipEntry entry<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// manifest 文件</span>  int32_t result <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">FindEntry</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断压缩方式,是否使用的是Deflate压缩算法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>method <span class="token operator">==</span> kCompressDeflated<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>FileMap<span class="token operator">></span> map <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>FileMap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>path_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">GetFileDescriptor</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>                     entry<span class="token punctuation">.</span>compressed_length<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*readOnly*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span>        Asset<span class="token operator">::</span><span class="token function">createFromCompressedMap</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>uncompressed_length<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to decompress '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"'."</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> asset<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Store压缩方法,即不压缩</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>FileMap<span class="token operator">></span> map <span class="token operator">=</span> util<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>FileMap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span>path_<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span><span class="token function">GetFileDescriptor</span><span class="token punctuation">(</span>zip_handle_<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span>offset<span class="token punctuation">,</span>                     entry<span class="token punctuation">.</span>uncompressed_length<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/*readOnly*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Asset<span class="token operator">></span> asset <span class="token operator">=</span> Asset<span class="token operator">::</span><span class="token function">createFromUncompressedMap</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>asset <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">LOG</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Failed to mmap file '"</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> <span class="token string">"' in APK '"</span> <span class="token operator">&lt;&lt;</span> path_ <span class="token operator">&lt;&lt;</span> <span class="token string">"'"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> asset<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Android中的资源主要是Deflate和Stored两种压缩方式,其中Stored实际并不压缩数据,只是转换成字节数据存储而已.</p><p>Manifest.xml使用了Deflate压缩算法进行压缩,因此这里需要对应的解压出来.</p><p>其他的几个步骤,在零零碎碎的源码中找吧.</p><h2 id="普通APP安装"><a href="#普通APP安装" class="headerlink" title="普通APP安装"></a>普通APP安装</h2><p>先看一个简单的下载并安装apk的例子:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span>intent<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>     flags <span class="token operator">+=</span> Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK     flags <span class="token operator">+=</span> Intent<span class="token punctuation">.</span>FLAG_GRANT_READ_URI_PERMISSION     type <span class="token operator">=</span> <span class="token string">"application/vnd.android.package-archive"</span>     <span class="token keyword">data</span> <span class="token operator">=</span> FileProvider<span class="token punctuation">.</span><span class="token function">getUriForFile</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"com.jiangkang.ktools"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">}</span>context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span></code></pre><p>这里使用<code>ACTION_VIEW</code>,最终会调用到PacakgeInstaller APP中.</p><p>Android 10的PacakgeInstaller源码在framworks/base/packages/PackageInstaller下,看一下它的Manifest.xml来确定下谁是入口:</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.InstallStart<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:style/Theme.Translucent.NoTitleBar<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>excludeFromRecents</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/vnd.android.package-archive<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.INSTALL_PACKAGE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>package<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.content.pm.action.CONFIRM_INSTALL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><p>可以看到PackageInstaller支持的action以及协议,即content协议和package协议.</p><p>进入了<code>InstallStart</code>之后,根据状态的不同可能会经过<code>InstallStaging</code>等页面后进入到<code>PacakgeInstallerActivity</code>,然后就是不同的安装进度了,<code>InstallInstalling</code>,<code>InstallFailed</code>,<code>InstallSuccess</code>:</p><p>来看一下关键的对象:</p><pre class=" language-java"><code class="language-java">PackageManager mPm <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>PackageInstaller mInstaller <span class="token operator">=</span> <span class="token operator">=</span> mPm<span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> PackageInstaller<span class="token punctuation">.</span>SessionInfo info <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>packageUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>resolvedBaseCodePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后就是开始安装APP了:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startInstall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Start subactivity to actually install the application</span>        Intent newIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">,</span>                mPkgInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// apk file uri</span>        newIntent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 安装过程处理 Activity</span>        newIntent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InstallInstalling<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String installerPackageName <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">,</span> mOriginatingURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mReferrerURI <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">,</span> mReferrerURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mOriginatingUid <span class="token operator">!=</span> PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>UID_UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span> mOriginatingUid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>installerPackageName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">,</span>                    installerPackageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBooleanExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_RETURN_RESULT<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newIntent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_FORWARD_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localLOGV<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"downloaded app uri="</span><span class="token operator">+</span>mPackageURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>newIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>来看下InstallInstalling中的处理逻辑:</p><pre class=" language-java"><code class="language-java">ApplicationInfo appInfo <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>PackageUtil<span class="token punctuation">.</span>INTENT_ATTR_APPLICATION_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>mPackageURI <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 使用pacakge协议,即package:com.xxx,安装手机上已有的APP</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">installExistingPackage</span><span class="token punctuation">(</span>appInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">launchSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManager<span class="token punctuation">.</span>NameNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 安装APK文件</span>  <span class="token comment" spellcheck="true">// 将安装信息封装到SessionParams中</span>PackageInstaller<span class="token punctuation">.</span>SessionParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageInstaller<span class="token punctuation">.</span>SessionParams</span><span class="token punctuation">(</span>                        PackageInstaller<span class="token punctuation">.</span>SessionParams<span class="token punctuation">.</span>MODE_FULL_INSTALL<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallAsInstantApp</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setReferrerUri</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_REFERRER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setOriginatingUri</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getParcelableExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_URI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setOriginatingUid</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>EXTRA_ORIGINATING_UID<span class="token punctuation">,</span>                        UID_UNKNOWN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallerPackageName</span><span class="token punctuation">(</span><span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>                        Intent<span class="token punctuation">.</span>EXTRA_INSTALLER_PACKAGE_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallReason</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_REASON_USER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// apk文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解析APK文件,获取APP信息</span>PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setAppPackageName</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setInstallLocation</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>installLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>params<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>PackageHelper<span class="token punctuation">.</span><span class="token function">calculateInstalledSize</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>abiOverride<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mInstallId <span class="token operator">=</span> InstallEventReceiver                            <span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventResultPersister<span class="token punctuation">.</span>GENERATE_NEW_ID<span class="token punctuation">,</span>                                    <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>launchFinishBasedOnResult<span class="token punctuation">)</span><span class="token punctuation">;</span>mSessionId <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将信息保存到SessionParams中,并返回一个sessionId,后面会用到这个sessionid,在onResume的时候会启动一个后台任务去读取APK文件:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InstallingAsyncTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span>            PackageInstaller<span class="token punctuation">.</span>Session<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isDone<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> PackageInstaller<span class="token punctuation">.</span>Session <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根据sessionID获取到之前存储的session</span>                session <span class="token operator">=</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            session<span class="token punctuation">.</span><span class="token function">setStagingProgress</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 读取APK文件</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mPackageURI<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> sizeBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">(</span>OutputStream out <span class="token operator">=</span> session                            <span class="token punctuation">.</span><span class="token function">openWrite</span><span class="token punctuation">(</span><span class="token string">"PackageInstaller"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> numRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>numRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">fsync</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numRead<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">float</span> fraction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> numRead <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> sizeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                                session<span class="token punctuation">.</span><span class="token function">addProgress</span><span class="token punctuation">(</span>fraction<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> session<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> SecurityException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>LOG_TAG<span class="token punctuation">,</span> <span class="token string">"Could not write package"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>PackageInstaller<span class="token punctuation">.</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// apk文件读取完毕</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Intent broadcastIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>BROADCAST_ACTION<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_RECEIVER_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">setPackage</span><span class="token punctuation">(</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                broadcastIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>EventResultPersister<span class="token punctuation">.</span>EXTRA_ID<span class="token punctuation">,</span> mInstallId<span class="token punctuation">)</span><span class="token punctuation">;</span>                PendingIntent pendingIntent <span class="token operator">=</span> PendingIntent<span class="token punctuation">.</span><span class="token function">getBroadcast</span><span class="token punctuation">(</span>                        InstallInstalling<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                        mInstallId<span class="token punctuation">,</span>                        broadcastIntent<span class="token punctuation">,</span>                        PendingIntent<span class="token punctuation">.</span>FLAG_UPDATE_CURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//  此处关键</span>                session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>pendingIntent<span class="token punctuation">.</span><span class="token function">getIntentSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mCancelButton<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFinishOnTouchOutside</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageInstaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">abandonSession</span><span class="token punctuation">(</span>mSessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">launchFailure</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_APK<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要是读取APK文件到Session中,并更新安装进度.读取完毕之后发送一个广播.</p><p>此处的关键是就是<code>session.commit()</code>方法.</p><p>这里会调用PackageManagerService中.首先进入的是Copy阶段:</p><h3 id="复制APK"><a href="#复制APK" class="headerlink" title="复制APK"></a>复制APK</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">installStage</span><span class="token punctuation">(</span>ActiveInstallSession activeInstallSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// COPY 阶段</span>        <span class="token keyword">final</span> Message msg <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span>INIT_COPY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> InstallParams params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstallParams</span><span class="token punctuation">(</span>activeInstallSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> params<span class="token punctuation">;</span>        mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> INIT_COPY<span class="token operator">:</span> <span class="token punctuation">{</span>                    HandlerParams params <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerParams<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        params<span class="token punctuation">.</span><span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个copy阶段会进行一些判断,比如存储空间是否足够,如果不够会试图清理一下缓存,如果之前已经存在了APK,则直接覆盖,但是如果存在APK验证器,则必须在copy之前进行验证,只有验证通过之后才可以开始复制APK.</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mVerificationCompleted <span class="token operator">&amp;&amp;</span> mEnableRollbackCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_DRY_RUN<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String packageName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        PackageLite packageInfo <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">PackageParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        packageName <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Can't parse package at "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        observer<span class="token punctuation">.</span><span class="token function">onPackageInstalled</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> mRet<span class="token punctuation">,</span> <span class="token string">"Dry run"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Observer no longer exists."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mRet <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 复制APK</span>                    mRet <span class="token operator">=</span> mArgs<span class="token punctuation">.</span><span class="token function">copyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 复制完成之后进入下一阶段</span>                <span class="token function">processPendingInstall</span><span class="token punctuation">(</span>mArgs<span class="token punctuation">,</span> mRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">copyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"copyApk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doCopyApk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span>staged<span class="token punctuation">)</span> <span class="token punctuation">{</span>                codeFile <span class="token operator">=</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">;</span>                resourceFile <span class="token operator">=</span> origin<span class="token punctuation">.</span>file<span class="token punctuation">;</span>                <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 创建要复制的文件路径</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">boolean</span> isEphemeral <span class="token operator">=</span> <span class="token punctuation">(</span>installFlags <span class="token operator">&amp;</span> PackageManager<span class="token punctuation">.</span>INSTALL_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">final</span> File tempDir <span class="token operator">=</span>                        mInstallerService<span class="token punctuation">.</span><span class="token function">allocateStageDirLegacy</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> isEphemeral<span class="token punctuation">)</span><span class="token punctuation">;</span>                codeFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>                resourceFile <span class="token operator">=</span> tempDir<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to create copy file: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 实际复制操作</span>            <span class="token keyword">int</span> ret <span class="token operator">=</span> PackageManagerServiceUtils<span class="token punctuation">.</span><span class="token function">copyPackage</span><span class="token punctuation">(</span>                    origin<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to copy package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// so文件</span>            <span class="token keyword">final</span> File libraryRoot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>codeFile<span class="token punctuation">,</span> LIB_DIR_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>            NativeLibraryHelper<span class="token punctuation">.</span>Handle handle <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handle <span class="token operator">=</span> NativeLibraryHelper<span class="token punctuation">.</span>Handle<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>codeFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> NativeLibraryHelper<span class="token punctuation">.</span><span class="token function">copyNativeBinariesWithOverride</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> libraryRoot<span class="token punctuation">,</span>                        abiOverride<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Copying native libraries failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                ret <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INTERNAL_ERROR<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>APK会被复制到/data/app下:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> File <span class="token function">getDataAppDirectory</span><span class="token punctuation">(</span>String volumeUuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getDataDirectory</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实际的copy过程如下,使用了FileDescriptor:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">copyPackage</span><span class="token punctuation">(</span>String packagePath<span class="token punctuation">,</span> File targetDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>packagePath <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INVALID_URI<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> File packageFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析APK文件</span>            <span class="token comment" spellcheck="true">// 1. 解析Manifest文件,得到各种信息如版本号等</span>            <span class="token comment" spellcheck="true">// 2. 收集签名信息</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>PackageLite pkg <span class="token operator">=</span> PackageParser<span class="token punctuation">.</span><span class="token function">parsePackageLite</span><span class="token punctuation">(</span>packageFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 复制到指定位置,并重命名为base.apk,一般为/data/app/packageName-xxx/base.apk</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> targetDir<span class="token punctuation">,</span> <span class="token string">"base.apk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">copyFile</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> targetDir<span class="token punctuation">,</span>                            <span class="token string">"split_"</span> <span class="token operator">+</span> pkg<span class="token punctuation">.</span>splitNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".apk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageParserException</span> <span class="token operator">|</span> IOException <span class="token operator">|</span> ErrnoException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to copy package at "</span> <span class="token operator">+</span> packagePath <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_INSUFFICIENT_STORAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>String sourcePath<span class="token punctuation">,</span> File targetDir<span class="token punctuation">,</span> String targetName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ErrnoException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>FileUtils<span class="token punctuation">.</span><span class="token function">isValidExtFilename</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid filename: "</span> <span class="token operator">+</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Slog<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Copying "</span> <span class="token operator">+</span> sourcePath <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> File targetFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetDir<span class="token punctuation">,</span> targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> FileDescriptor targetFd <span class="token operator">=</span> Os<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Os<span class="token punctuation">.</span><span class="token function">chmod</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream source <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetFd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            IoUtils<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>复制之前,会使用<code>PacakgeParser</code>解析APK中的mannifest文件,得到一些应用信息,并且还会获取签名信息.</p><p>然后就是复制apk文件,并且复制APK中的so文件到指定的路径.</p><p>复制完成之后,进入下一阶段<code>processPendingInstall(mArgs, mRet);</code></p><h2 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processPendingInstall</span><span class="token punctuation">(</span><span class="token keyword">final</span> InstallArgs args<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> currentStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>mMultiPackageInstallParams <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            args<span class="token punctuation">.</span>mMultiPackageInstallParams<span class="token punctuation">.</span><span class="token function">tryProcessInstallRequest</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            PackageInstalledInfo res <span class="token operator">=</span> <span class="token function">createPackageInstalledInfo</span><span class="token punctuation">(</span>currentStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">processInstallRequestsAsync</span><span class="token punctuation">(</span>                    res<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">,</span>                    Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InstallRequest</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>对于包含split APP的安装过程暂时不分析,这里指分析单个完整APK的安装流程.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processInstallRequestsAsync</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">,</span>            List<span class="token operator">&lt;</span>InstallRequest<span class="token operator">></span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">doPreInstall</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mInstallLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">installPackagesTracedLI</span><span class="token punctuation">(</span>installRequests<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>args<span class="token punctuation">.</span><span class="token function">doPostInstall</span><span class="token punctuation">(</span>                            request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> installRequests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">restoreAndPostInstall</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">PostInstallData</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>实际安装步骤在<code>installPackagesLI(requests)</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">installPackagesLI</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>InstallRequest<span class="token operator">></span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ScanResult<span class="token operator">></span> preparedScans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> InstallArgs<span class="token operator">></span> installArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PackageInstalledInfo<span class="token operator">></span> installResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PrepareResult<span class="token operator">></span> prepareResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> VersionInfo<span class="token operator">></span> versionInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PackageSetting<span class="token operator">></span> lastStaticSharedLibSettings <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span> createdAppId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"installPackagesLI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO(b/109941548): remove this once we've pulled everything from it and into</span>                <span class="token comment" spellcheck="true">//                    scan, reconcile or commit.</span>                <span class="token keyword">final</span> PrepareResult prepareResult<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"preparePackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    prepareResult <span class="token operator">=</span> <span class="token function">preparePackageLI</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrepareFailure</span> prepareFailure<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>prepareFailure<span class="token punctuation">.</span>error<span class="token punctuation">,</span>                            prepareFailure<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>origPackage <span class="token operator">=</span> prepareFailure<span class="token punctuation">.</span>conflictingPackage<span class="token punctuation">;</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>origPermission <span class="token operator">=</span> prepareFailure<span class="token punctuation">.</span>conflictingPermission<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setReturnCode</span><span class="token punctuation">(</span>PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>installerPackageName <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>installerPackageName<span class="token punctuation">;</span>                <span class="token keyword">final</span> String packageName <span class="token operator">=</span> prepareResult<span class="token punctuation">.</span>packageToScan<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>                prepareResults<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> prepareResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                installResults<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> request<span class="token punctuation">.</span>installResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                installArgs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> List<span class="token operator">&lt;</span>ScanResult<span class="token operator">></span> scanResults <span class="token operator">=</span> <span class="token function">scanPackageTracedLI</span><span class="token punctuation">(</span>                            prepareResult<span class="token punctuation">.</span>packageToScan<span class="token punctuation">,</span> prepareResult<span class="token punctuation">.</span>parseFlags<span class="token punctuation">,</span>                            prepareResult<span class="token punctuation">.</span>scanFlags<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>ScanResult result <span class="token operator">:</span> scanResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> preparedScans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>                                    PackageManager<span class="token punctuation">.</span>INSTALL_FAILED_DUPLICATE_PACKAGE<span class="token punctuation">,</span>                                    <span class="token string">"Duplicate package "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName                                            <span class="token operator">+</span> <span class="token string">" in multi-package install request."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        createdAppId<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token function">optimisticallyRegisterAppId</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        versionInfos<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                <span class="token function">getSettingsVersionForPackage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>staticSharedLibraryInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> PackageSetting sharedLibLatestVersionSetting <span class="token operator">=</span>                                    <span class="token function">getSharedLibLatestVersionSetting</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedLibLatestVersionSetting <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                lastStaticSharedLibSettings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                                        sharedLibLatestVersionSetting<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PackageManagerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Scanning Failed."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ReconcileRequest reconcileRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReconcileRequest</span><span class="token punctuation">(</span>preparedScans<span class="token punctuation">,</span> installArgs<span class="token punctuation">,</span>                    installResults<span class="token punctuation">,</span>                    prepareResults<span class="token punctuation">,</span>                    mSharedLibraries<span class="token punctuation">,</span>                    Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span><span class="token punctuation">,</span> versionInfos<span class="token punctuation">,</span>                    lastStaticSharedLibSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>            CommitRequest commitRequest <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ReconciledPackage<span class="token operator">></span> reconciledPackages<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"reconcilePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    reconciledPackages <span class="token operator">=</span> <span class="token function">reconcilePackagesLocked</span><span class="token punctuation">(</span>                            reconcileRequest<span class="token punctuation">,</span> mSettings<span class="token punctuation">.</span>mKeySetManagerService<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReconcileFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span><span class="token string">"Reconciliation failed..."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"commitPackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    commitRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommitRequest</span><span class="token punctuation">(</span>reconciledPackages<span class="token punctuation">,</span>                            sUserManager<span class="token punctuation">.</span><span class="token function">getUserIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">commitPackagesLocked</span><span class="token punctuation">(</span>commitRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                    success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>PrepareResult result <span class="token operator">:</span> prepareResults<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>freezer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            result<span class="token punctuation">.</span>freezer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">executePostCommitSteps</span><span class="token punctuation">(</span>commitRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>ScanResult result <span class="token operator">:</span> preparedScans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>createdAppId<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>request<span class="token punctuation">.</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">cleanUpAppIdCreation</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// TODO(patb): create a more descriptive reason than unknown in future release</span>                <span class="token comment" spellcheck="true">// mark all non-failure installs as UNKNOWN so we do not treat them as success</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>InstallRequest request <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode <span class="token operator">==</span> PackageManager<span class="token punctuation">.</span>INSTALL_SUCCEEDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        request<span class="token punctuation">.</span>installResult<span class="token punctuation">.</span>returnCode <span class="token operator">=</span> PackageManager<span class="token punctuation">.</span>INSTALL_UNKNOWN<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PrepareResult result <span class="token operator">:</span> prepareResults<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>freezer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span>freezer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里分为4个步骤:</p><ol><li><p>prepare</p><p>使用PackageParser解析APK,获取各种信息,检查是否有静态共享库,有的话放在内部存储中.决定安装方式(更新,还是新安装)之类的逻辑.</p></li><li><p>scan</p><p>扫描APK,更新共享库和Settings信息</p></li><li><p>reconcile</p><p>新旧包以及签名相关的逻辑</p></li><li><p>commit</p><p>更新设置</p></li></ol><p>其实都是对APK文件进行一系列的检查验证,以确保最后可以安装成功.然后就是真实的安装了:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executePostCommitSteps</span><span class="token punctuation">(</span>CommitRequest commitRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ReconciledPackage reconciledPkg <span class="token operator">:</span> commitRequest<span class="token punctuation">.</span>reconciledPackages<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> instantApp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>scanResult<span class="token punctuation">.</span>request<span class="token punctuation">.</span>scanFlags                            <span class="token operator">&amp;</span> PackageManagerService<span class="token punctuation">.</span>SCAN_AS_INSTANT_APP<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> PackageParser<span class="token punctuation">.</span>Package pkg <span class="token operator">=</span> reconciledPkg<span class="token punctuation">.</span>pkgSetting<span class="token punctuation">.</span>pkg<span class="token punctuation">;</span>            <span class="token keyword">final</span> String packageName <span class="token operator">=</span> pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">;</span>            <span class="token function">prepareAppDataAfterInstallLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>prepareResult<span class="token punctuation">.</span>clearCodeCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearAppDataLIF</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span> UserHandle<span class="token punctuation">.</span>USER_ALL<span class="token punctuation">,</span> FLAG_STORAGE_DE <span class="token operator">|</span> FLAG_STORAGE_CE                        <span class="token operator">|</span> FLAG_STORAGE_EXTERNAL <span class="token operator">|</span> Installer<span class="token punctuation">.</span>FLAG_CLEAR_CODE_CACHE_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>prepareResult<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mDexManager<span class="token punctuation">.</span><span class="token function">notifyPackageUpdated</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span>                        pkg<span class="token punctuation">.</span>baseCodePath<span class="token punctuation">,</span> pkg<span class="token punctuation">.</span>splitCodePaths<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Prepare the application profiles for the new code paths.</span>            <span class="token comment" spellcheck="true">// This needs to be done before invoking dexopt so that any install-time profile</span>            <span class="token comment" spellcheck="true">// can be used for optimizations.</span>            mArtManagerService<span class="token punctuation">.</span><span class="token function">prepareAppProfiles</span><span class="token punctuation">(</span>                    pkg<span class="token punctuation">,</span>                    <span class="token function">resolveUserIds</span><span class="token punctuation">(</span>reconciledPkg<span class="token punctuation">.</span>installArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">/* updateReferenceProfileContent= */</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check whether we need to dexopt the app.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// NOTE: it is IMPORTANT to call dexopt:</span>            <span class="token comment" spellcheck="true">//   - after doRename which will sync the package data from PackageParser.Package and</span>            <span class="token comment" spellcheck="true">//     its corresponding ApplicationInfo.</span>            <span class="token comment" spellcheck="true">//   - after installNewPackageLIF or replacePackageLIF which will update result with the</span>            <span class="token comment" spellcheck="true">//     uid of the application (pkg.applicationInfo.uid).</span>            <span class="token comment" spellcheck="true">//     This update happens in place!</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// We only need to dexopt if the package meets ALL of the following conditions:</span>            <span class="token comment" spellcheck="true">//   1) it is not an instant app or if it is then dexopt is enabled via gservices.</span>            <span class="token comment" spellcheck="true">//   2) it is not debuggable.</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// Note that we do not dexopt instant apps by default. dexopt can take some time to</span>            <span class="token comment" spellcheck="true">// complete, so we skip this step during installation. Instead, we'll take extra time</span>            <span class="token comment" spellcheck="true">// the first time the instant app starts. It's preferred to do it this way to provide</span>            <span class="token comment" spellcheck="true">// continuous progress to the useur instead of mysteriously blocking somewhere in the</span>            <span class="token comment" spellcheck="true">// middle of running an instant app. The default behaviour can be overridden</span>            <span class="token comment" spellcheck="true">// via gservices.</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> performDexopt <span class="token operator">=</span>                    <span class="token punctuation">(</span><span class="token operator">!</span>instantApp <span class="token operator">||</span> Global<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>mContext<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Global<span class="token punctuation">.</span>INSTANT_APP_DEXOPT_ENABLED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> ApplicationInfo<span class="token punctuation">.</span>FLAG_DEBUGGABLE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>performDexopt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Compile the layout resources.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>SystemProperties<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>PRECOMPILE_LAYOUTS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"compileLayouts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mViewCompiler<span class="token punctuation">.</span><span class="token function">compileLayouts</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">,</span> <span class="token string">"dexopt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Do not run PackageDexOptimizer through the local performDexOpt</span>                <span class="token comment" spellcheck="true">// method because `pkg` may not be in `mPackages` yet.</span>                <span class="token comment" spellcheck="true">//</span>                <span class="token comment" spellcheck="true">// Also, don't fail application installs if the dexopt step fails.</span>                DexoptOptions dexoptOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DexoptOptions</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span>                        REASON_INSTALL<span class="token punctuation">,</span>                        DexoptOptions<span class="token punctuation">.</span>DEXOPT_BOOT_COMPLETE                                <span class="token operator">|</span> DexoptOptions<span class="token punctuation">.</span>DEXOPT_INSTALL_WITH_DEX_METADATA_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>                mPackageDexOptimizer<span class="token punctuation">.</span><span class="token function">performDexOpt</span><span class="token punctuation">(</span>pkg<span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* instructionSets */</span><span class="token punctuation">,</span>                        <span class="token function">getOrCreateCompilerPackageStats</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span>                        mDexManager<span class="token punctuation">.</span><span class="token function">getPackageUseInfoOrDefault</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">,</span>                        dexoptOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>                Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>TRACE_TAG_PACKAGE_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Notify BackgroundDexOptService that the package has been changed.</span>            <span class="token comment" spellcheck="true">// If this is an update of a package which used to fail to compile,</span>            <span class="token comment" spellcheck="true">// BackgroundDexOptService will remove it from its blacklist.</span>            <span class="token comment" spellcheck="true">// TODO: Layering violation</span>            BackgroundDexOptService<span class="token punctuation">.</span><span class="token function">notifyPackageChanged</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里主要分为两部:</p><ol><li>调用Installer创建APP数据</li><li>如果so库是32为,创建symlink,64位的so库不需要</li></ol><pre class=" language-java"><code class="language-java">ceDataInode <span class="token operator">=</span> mInstaller<span class="token punctuation">.</span><span class="token function">createAppData</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>                    appId<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span> app<span class="token punctuation">.</span>targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>primaryCpuAbi <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>VMRuntime<span class="token punctuation">.</span><span class="token function">is64BitAbi</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>primaryCpuAbi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> String nativeLibPath <span class="token operator">=</span> app<span class="token punctuation">.</span>nativeLibraryDir<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    mInstaller<span class="token punctuation">.</span><span class="token function">linkNativeLibraryDirectory</span><span class="token punctuation">(</span>volumeUuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span>                            nativeLibPath<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstallerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to link native for "</span> <span class="token operator">+</span> packageName <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                    </code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">createAppData</span><span class="token punctuation">(</span>String uuid<span class="token punctuation">,</span> String packageName<span class="token punctuation">,</span> <span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> appId<span class="token punctuation">,</span>            String seInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSdkVersion<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstallerException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkBeforeRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mInstalld<span class="token punctuation">.</span><span class="token function">createAppData</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> appId<span class="token punctuation">,</span> seInfo<span class="token punctuation">,</span>                    targetSdkVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> InstallerException<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><code>Installer</code>中的操作基本上都是委托给守护进程<code>installd</code>去完成的.</p><p>Installer中通过Binder机制获取到intalld服务,真实的执行逻辑在native层:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        IBinder binder <span class="token operator">=</span> ServiceManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">"installd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                binder<span class="token punctuation">.</span><span class="token function">linkToDeath</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeathRecipient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binderDied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installd died; reconnecting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                binder <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstalld <span class="token operator">=</span> IInstalld<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>binder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">invalidateMounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstallerException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"installd not found; trying again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BackgroundThread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> DateUtils<span class="token punctuation">.</span>SECOND_IN_MILLIS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>应用发出Intent,要求应用内安装APK;</li><li>PackageInstaller APP 中的<code>InstallStart</code>Activity接收到Intent,解析数据;</li><li>转到PackageInstallerActivity展示界面,用户确认之后开始进入安装过程;</li><li>请求PackageManagerService去完成安装,这里会复制APK到指定目录中,并进行签名验证</li><li>通过binder机制请求<code>installd</code>守护进程去完成安装过程.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Android系统的代码总是在不断迭代的,具体的类和方法本身并不重要,关键是了解流程与主要的路径&lt;/p&gt;
&lt;p&gt;本文基于AOSP master分支 2020年8月,Android 11 已经处于beta版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="APK安装流程" scheme="https://www.jiangkang.tech/tags/APK%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java线程池源码分析</title>
    <link href="https://www.jiangkang.tech/2020/07/29/android/java-xian-cheng-chi-yuan-ma-fen-xi/"/>
    <id>https://www.jiangkang.tech/2020/07/29/android/java-xian-cheng-chi-yuan-ma-fen-xi/</id>
    <published>2020-07-29T15:01:40.000Z</published>
    <updated>2020-07-29T15:02:35.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="几种预定义的线程池"><a href="#几种预定义的线程池" class="headerlink" title="几种预定义的线程池"></a>几种预定义的线程池</h3><ul><li><p><code>newFixedThreadPool</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><code>newSingleThreadExecutor</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><code>newCachedThreadPool</code></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里使用的<code>SynchronousQueue</code>并不存储任务,因此这个线程池如果来了任务直接交给线程去执行,如果没有空闲的线程就创建,否则复用.</p></li></ul><h3 id="submit-vs-execute"><a href="#submit-vs-execute" class="headerlink" title="submit vs execute"></a>submit vs execute</h3><p>有两种提交任务的方式:</p><ul><li><p>execute(Runnable r)</p><p>不返回结果</p></li><li><p>submit(Runnbale r)</p><p>有一个Future的返回结果.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ftask<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到,使用submit()提交Runnable,会使用一个<code>RUnnableFuture</code>包装Runnable,以返回任务结果.</p></li></ul><h2 id="ThreadPoolExecutor中线程池的几种状态"><a href="#ThreadPoolExecutor中线程池的几种状态" class="headerlink" title="ThreadPoolExecutor中线程池的几种状态"></a>ThreadPoolExecutor中线程池的几种状态</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span></code></pre><p>翻译成二进制即:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">CAPACITY</span><span class="token punctuation">:</span>  <span class="token attr-value">00011111111111111111111111111111</span><span class="token attr-name">RUNNING</span><span class="token punctuation">:</span>   <span class="token attr-value">11100000000000000000000000000000</span><span class="token attr-name">SHUTDOWN</span><span class="token punctuation">:</span>  <span class="token attr-value">00000000000000000000000000000000</span><span class="token attr-name">STOP</span><span class="token punctuation">:</span>      <span class="token attr-value">00100000000000000000000000000000</span><span class="token attr-name">TIDYING</span><span class="token punctuation">:</span>   <span class="token attr-value">01000000000000000000000000000000</span><span class="token attr-name">TERMINATED</span><span class="token punctuation">:</span><span class="token attr-value">01100000000000000000000000000000</span></code></pre><p>线程池的控制状态存放在一个AtomicInteger中,一共32位:</p><ul><li><p>高3位表示5种运行状态,即runState</p><p>为什么用3位表示?其实这里就是个简单的状态机而已,2位最多表示4种状态,3位最多表示8种状态,因此这里选择3位来表示.</p></li><li><p>低29位表示有效线程数,即workerCount</p></li></ul><h3 id="线程池的5种状态"><a href="#线程池的5种状态" class="headerlink" title="线程池的5种状态"></a>线程池的5种状态</h3><ul><li><p>Running</p><p>可以接受新任务和处理队列中的任务</p></li><li><p>Shutdown</p><p>不接受新任务,但是可以处理队列中的任务</p></li><li><p>Stop</p><p>不接受新任务,也不处理队列中的任务,并且中断正在处理的任务</p></li><li><p>Tidying</p><p>所有的任务已经终止了.workerCount = 0,过渡到这个状态的线程将会调用<code>terminated()</code>方法</p></li><li><p>Terminated</p><p><code>terminated()</code>已经执行完毕</p></li></ul><p><img src="https://oss.jiangkang.tech/jk/thread_pool_state.png" alt="线程池状态转换"></p><p>再来看一下这些位操作:</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 打包和拆包,ctlOf是打包,runStateOf是获取runState,workerCountOf是获取workerCount</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">runStateLessThan</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">&lt;</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">>=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5种状态,只有Running是小于0的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">&lt;</span> SHUTDOWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>        <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * This class will never be serialized, but we provide a         * serialVersionUID to suppress a javac warning.         */</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6138294804551838833L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Thread this worker is running in.  Null if factory fails. */</span>        <span class="token keyword">final</span> Thread thread<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Initial task to run.  Possibly null. */</span>        Runnable firstTask<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** Per-thread task counter */</span>        <span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Creates with given first task and thread from ThreadFactory.         * @param firstTask the first task (null if none)         */</span>        <span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** Delegates main run loop to outer runWorker  */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Lock methods</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// The value 0 represents the unlocked state.</span>        <span class="token comment" spellcheck="true">// The value 1 represents the locked state.</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Worker本身也是Runnable,run的时候实际上运行的也是任务,而且Worker持有了Thread和Runnable,并且为线程增加了中断控制的能力.</p><p>从代码上可以看出,Worker是复用的,不同的任务(Runnable)可能会添加到同一个Worker中,换句话说一个Worker对应一个线程,一个线程可能会运行多个任务.</p><h2 id="execute-Runnable-r-执行过程"><a href="#execute-Runnable-r-执行过程" class="headerlink" title="execute(Runnable r)执行过程"></a>execute(Runnable r)执行过程</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程状态,多线程环境的复杂性导致丑陋的代码</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程数小于corePoolSize </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 线程池处于runnable状态,并且任务入队成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再检查下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retry<span class="token operator">:</span>        <span class="token comment" spellcheck="true">// 一些没法添加任务的场景</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>            <span class="token comment" spellcheck="true">// 不是Running状态 &amp;&amp; (不处于Shutdown状态 or 队列为空)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>                   firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                   <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 线程数达到极限,或者核心模式下,线程数大于等于corePoolSize,或者非核心模式下,线程数大于等于maxiumPoolSize</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                    wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span> retry<span class="token punctuation">;</span>                c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                    <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>                mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                    <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                    <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                        <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加worker</span>                        <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                            largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                        workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// worker添加之后,启动线程</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>                <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>基本上都是一些状态判断,然后试图添加worker.</p><p>状态何时会启动线程,执行任务.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看看注释说明得了,把机制弄清楚.</p><p>代码写的真的是一言难尽.if else太多,各种稀奇古怪的判断看起来真的没什么意思.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;几种预定义的线程池&quot;&gt;&lt;a href=&quot;#几种预定义的线程池&quot; class=&quot;headerlink&quot; title=&quot;几种预定义的线程池&quot;&gt;&lt;/a&gt;几种预定义的线程池&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;newFixedThreadPool&lt;/code&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="线程池" scheme="https://www.jiangkang.tech/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>ThreadPoolExecutor</title>
    <link href="https://www.jiangkang.tech/2020/07/29/android/threadpoolexecutor/"/>
    <id>https://www.jiangkang.tech/2020/07/29/android/threadpoolexecutor/</id>
    <published>2020-07-28T16:00:20.000Z</published>
    <updated>2020-07-28T16:01:23.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span></code></pre><h3 id="corePoolSize-maxiumPoolSize"><a href="#corePoolSize-maxiumPoolSize" class="headerlink" title="corePoolSize/maxiumPoolSize"></a>corePoolSize/maxiumPoolSize</h3><ul><li><p>运行的线程数 &lt; corePoolSize</p><p>创建新线程,不管其他线程是否处于Idle状态</p></li><li><p>corePoolSize &lt; 运行的线程数 &lt; maxiumPoolSize</p><p>只有当队列满的时候,才会创建新线程</p></li><li><p>corePoolSize = maxiumPoolSize</p><p>固定大小的线程池</p></li><li><p>maxiumPoolSize = Integer.MAX_VALUE</p><p>容纳任意数量的并发任务</p></li></ul><h3 id="keepAliveTime-unit"><a href="#keepAliveTime-unit" class="headerlink" title="keepAliveTime/unit"></a>keepAliveTime/unit</h3><p>如果线程池当前线程数超过corePoolSize,多余的线程如果在IDLE状态下超过keepAliveTime就会被终止.</p><p>使用Long.MAX_VALUE TimeUnit＃NANOSECONDS作为keepAliveTime,可以阻止空闲线程在关闭前被终止.</p><p>默认情况下,keepAliveTime策略应用在线程数超过corePoolSize的情况.但是使用<a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)" target="_blank" rel="noopener">allowCoreThreadTimeOut(boolean)</a>方法,只要keepAliveTime大于0,也可以应用到核心线程.</p><h3 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h3><p>任何<code>BlockingQueue</code>的实现都可以用来传递和持有提交的任务.</p><ul><li><p>运行线程数 &lt; corePoolSize时</p><p>Executor倾向于创建新线程而不是将任务入队</p></li><li><p>运行线程数 &gt;= corePoolSize时</p><p>Executor倾向于将任务入队,而不是创建新线程</p></li><li><p>任务请求不能入队(比如队列已满)</p><p>如果运行线程数不超过maxiumPoolSize,则创建新线程,否则,被拒绝</p></li></ul><p>常见的三种队列对应三种入队策略:</p><ul><li><p>直接转移,队列不缓存任务</p><p>这里可以使用<code>SynchronousQueue</code>,这个队列是没有内部缓存的,也就是说来一个任务马上就会转移出去,可能是复用线程,创建线程,或者直接被拒绝.通常为了防止任务频繁被拒绝,可以将maxiumPoolSize设置为无限大,即Integer.MAX_VALUE.</p><p><code>Executors#newCachedThreadPool()</code>就属于这种策略.</p></li><li><p>无界队列</p><p>比如使用<code>LinkedBlockingQueue</code>,当corePoolSize个线程都在忙时,新任务只能在队列里等待.因此,线程数不会超过corePoolSize,<strong>设置的maxiumPoolSize没有任何作用.</strong>适合于那种任务之间没有任何依赖的场景.不过当任务处理时间比较久时,会导致队列增长过快.</p></li><li><p>有界队列</p><p>比如使用<code>ArrayBlockingQueue</code>,当设置了有限的maxiumPoolSize时可以防止系统资源被耗尽,但是相对更难控制.往往都需要在队列大小与最大线程数之间进行折衷.</p><p>如果使用了大的队列,少的线程数可以节约CPU,系统资源,和线程上下文切换的开销,但是会导致任务吞吐量变低,如果任务频繁的被阻塞,系统有时候也会多调度一些进程(会超过你设置的限制);</p><p>如果使用了小队列,多线程数,会使CPU更加忙碌,但是可能导致过载,反而降低吞吐量.</p></li></ul><p>我们可以使用<code>getQueue()</code>方法获取当前队列,不过<strong>只建议在debug和监控的时候使用这个方法.</strong></p><p>如果想取消排队任务,可以使用<code>remove(Runnable r)</code>或者<code>purge()</code>方法.</p><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><p>  即<code>RejectedExecutionHandler</code>,当Executor关闭时,或者使用有界队列,并且线程数达到了maxiumPoolSize,新任务会被拒绝.</p><p>目前有4种预定义的拒绝策略:</p><ul><li><p>直接抛异常</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AbortPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token function">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                                <span class="token string">" rejected from "</span> <span class="token operator">+</span>                                                e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre></li><li><p>如果线程池没有关闭,直接调用Runnable的run方法继续执行(在调用者线程)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CallerRunsPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Executes task r in the caller's thread, unless the executor         * has been shut down, in which case the task is discarded.         *         * @param r the runnable task requested to be executed         * @param e the executor attempting to execute this task         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>直接丢弃任务,不执行</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li><li><p>丢掉队列中最久的任务,添加新任务</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardOldestPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> ThreadPoolExecutor e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在实际应用过程中,我们一般都会自定义拒绝策略,做一些特殊处理.</p></li></ul><h3 id="Hook方法"><a href="#Hook方法" class="headerlink" title="Hook方法"></a>Hook方法</h3><p><code>ThreadPoolExecutor</code>中有两个protected的方法:</p><ul><li>beforeExecute(Thread t, Runnable r)</li><li>afterExecute(Thread t, Runnable r)</li></ul><p>这两个方法分别在任务执行前后被调用.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ThreadPoolExecutor&quot;&gt;&lt;a href=&quot;#ThreadPoolExecutor&quot; class=&quot;headerlink&quot; title=&quot;ThreadPoolExecutor&quot;&gt;&lt;/a&gt;ThreadPoolExecutor&lt;/h2&gt;&lt;pre clas
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="线程池" scheme="https://www.jiangkang.tech/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>git不常见操作</title>
    <link href="https://www.jiangkang.tech/2020/07/27/ji-chu/git-bu-chang-jian-cao-zuo/"/>
    <id>https://www.jiangkang.tech/2020/07/27/ji-chu/git-bu-chang-jian-cao-zuo/</id>
    <published>2020-07-27T15:26:39.000Z</published>
    <updated>2020-07-27T15:27:49.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="删除所有commit记录"><a href="#删除所有commit记录" class="headerlink" title="删除所有commit记录"></a>删除所有commit记录</h2><pre class=" language-shell"><code class="language-shell">git checkout --orphan local_branchgit add -Agit commit -am "reset commits"git branch -D master git branch -m mastergit push -f origin master</code></pre><h2 id="Git-refusing-to-merge-unrelated-histories"><a href="#Git-refusing-to-merge-unrelated-histories" class="headerlink" title="Git refusing to merge unrelated histories"></a>Git refusing to merge unrelated histories</h2><p>git pull的时候提示这个错误,可以通过下面的方式解决:</p><pre class=" language-shell"><code class="language-shell">git pull origin master --allow-unrelated-histories</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;删除所有commit记录&quot;&gt;&lt;a href=&quot;#删除所有commit记录&quot; class=&quot;headerlink&quot; title=&quot;删除所有commit记录&quot;&gt;&lt;/a&gt;删除所有commit记录&lt;/h2&gt;&lt;pre class=&quot; language-shell&quot;&gt;&lt;cod
      
    
    </summary>
    
    
      <category term="基础" scheme="https://www.jiangkang.tech/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="git" scheme="https://www.jiangkang.tech/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://www.jiangkang.tech/2020/07/26/android/java-fan-she/"/>
    <id>https://www.jiangkang.tech/2020/07/26/android/java-fan-she/</id>
    <published>2020-07-26T14:57:10.000Z</published>
    <updated>2020-07-26T14:58:24.283Z</updated>
    
    <content type="html"><![CDATA[<p>关于反射原理性的知识可以看看类加载流程，对象实例化流程相关的文章，这里说一下反射的常用使用方法。</p><h2 id="获取Class"><a href="#获取Class" class="headerlink" title="获取Class"></a>获取Class</h2><ul><li><p>Class.forName</p></li><li><p>ClassA.class</p></li><li><p>classA.getClass</p></li></ul><h3 id="Class常见方法"><a href="#Class常见方法" class="headerlink" title="Class常见方法"></a>Class常见方法</h3><ul><li><p>isPrimitive()</p><p>是否为基础类型,如int,long,byte,boolean,char,short,double等</p></li><li><p>getFiled()</p><p>返回所有<strong>public</strong>成员变量的field对象,包括从父类继承的field对象</p></li><li><p>getDeclaredField()</p><p>返回当前<strong>类本身所有的field</strong>,包括private的field,但是不包括从父类继承的</p></li><li><p>getMethods()/getMethod()/getDeclaredField()</p><p>与上面的Field相同</p><p>getMethods()返回类的所有public方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Method <span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span></code></pre><p>后面传的是参数的类型</p></li><li><p>getConstructors()/ getConstructor(Class&lt;?&gt;… parameterTypes)/getDeclaredConstructors()/getDeclaredConstructor()</p><p>获取构造方法</p></li></ul><h2 id="Field常用方法"><a href="#Field常用方法" class="headerlink" title="Field常用方法"></a>Field常用方法</h2><ul><li><p><strong>get(Object obj)</strong></p><p>获取Filed的值,如果不是静态字段,需要传入类的对象,如果是静态字段,传入null或者任何对象都可以.</p></li><li><p><strong>set(Object obj, Object value)</strong></p><p>将Object的这个Filed的值设置成value</p></li><li><p>setAccessible(true)</p><p>修改之前设置Field可以被访问</p></li><li><p>getType()</p><p>返回Filed 的类型class,如果属性是泛型,这个方法只能获取到接口类型,即HashMap&lt;K,V&gt;,只能获取到HashMap</p></li><li><p>getGenericType()</p><p>返回属性声明的Type对象,如果是泛型,可以获取到具体的参数类型,不如HashMap&lt;K,V&gt;</p></li><li><p>getName()</p><p>获取Field声明的时候的名字</p></li><li><p>getAnnotations()/getDeclearedAnnotation()/getAnnotation()</p><p>获取这个Field上的注解</p></li><li><p>getModifiers()</p><p>获取Filed上的修饰符,返回的是一个int,需要使用<code>Modifier</code>类才能知道具体的修饰符是什么(public,private,static,final等)</p></li><li><p>isEnumConstant()</p><p>判断这个Field是否为枚举类型</p></li><li><p>isSynthetic()</p><p>判断这个Filed是否为复合类型,即是否为编译期自动生成的Field</p></li></ul><h2 id="Method常用方法"><a href="#Method常用方法" class="headerlink" title="Method常用方法"></a>Method常用方法</h2><ul><li><p>invoke(Object obj, Object… args)</p><p>执行该Method,obj是对象(如果是静态方法可以直接传null),args是入参,这个方法返回值总是对象,如果是基本类型,则返回包装类型,比如int返回Integer.</p></li></ul><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><ul><li><p>newInstance(Object … initargs)</p><p>通过构造方法创建对象,传入的参数是构造方法的参数.</p><p><code>Class.newInstance()</code>也可以用来创建对象,它获取的是类的默认构造方法(无参),并存在缓存机制保存实例对象.</p></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>反射包中也有一个Array.</p><ul><li><p>创建数组</p><p>newInstance()</p></li><li><p>setXX</p></li><li><p>getXX</p></li><li><p>getLength()</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于反射原理性的知识可以看看类加载流程，对象实例化流程相关的文章，这里说一下反射的常用使用方法。&lt;/p&gt;
&lt;h2 id=&quot;获取Class&quot;&gt;&lt;a href=&quot;#获取Class&quot; class=&quot;headerlink&quot; title=&quot;获取Class&quot;&gt;&lt;/a&gt;获取Class&lt;/
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="反射" scheme="https://www.jiangkang.tech/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Hook点击事件</title>
    <link href="https://www.jiangkang.tech/2020/07/25/android/hook-dian-ji-shi-jian/"/>
    <id>https://www.jiangkang.tech/2020/07/25/android/hook-dian-ji-shi-jian/</id>
    <published>2020-07-25T14:57:43.000Z</published>
    <updated>2020-07-25T14:58:53.613Z</updated>
    
    <content type="html"><![CDATA[<p>Hook的本质就是就是利用Java反射机制,将源码中一些类的对象替换自己实现的对象,以实现一些特殊的操作.</p><p>基本上所有Hook的入门都会从Hook一个View的点击事件开始.</p><p>Hook之前,一般都得先看看源码,以找到如何反射,如何替换比较合适.</p><h2 id="view-setOnClickListener"><a href="#view-setOnClickListener" class="headerlink" title="view.setOnClickListener()"></a>view.setOnClickListener()</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> OnClickListener l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isClickable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setClickable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">getListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mOnClickListener <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListenerInfo <span class="token function">getListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mListenerInfo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mListenerInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mListenerInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mListenerInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>ListenerInfo</code>是<code>View</code>的一个内部类.</p><p>如果我们想在点击View的时候进行一些特殊的操作,其实只要将mOnClickListener替换成我们自己的OnClickListener就行了,</p><h2 id="拿到-getListenerInfo-方法"><a href="#拿到-getListenerInfo-方法" class="headerlink" title="拿到 getListenerInfo()方法"></a>拿到 <code>getListenerInfo()</code>方法</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> getListenerInfoMethod <span class="token operator">=</span> View<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getListenerInfo"</span><span class="token punctuation">)</span>getListenerInfoMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="执行getListenerInfo-方法-获取View对应的ListenerInfo对象"><a href="#执行getListenerInfo-方法-获取View对应的ListenerInfo对象" class="headerlink" title="执行getListenerInfo()方法,获取View对应的ListenerInfo对象"></a>执行<code>getListenerInfo()</code>方法,获取<code>View</code>对应的<code>ListenerInfo</code>对象</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> listenerInfo <span class="token operator">=</span> getListenerInfoMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></code></pre><h2 id="拿到ListenerInfo中的mOnClickListener-Field"><a href="#拿到ListenerInfo中的mOnClickListener-Field" class="headerlink" title="拿到ListenerInfo中的mOnClickListener Field"></a>拿到<code>ListenerInfo</code>中的<code>mOnClickListener</code> Field</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> listenerInfoClz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.view.View\<span class="token interpolation variable">$ListenerInfo</span>"</span><span class="token punctuation">)</span><span class="token keyword">val</span> mOnClickListener <span class="token operator">=</span> listenerInfoClz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mOnClickListener"</span><span class="token punctuation">)</span>mOnClickListener<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="拿到业务传入的OnClickListener对象"><a href="#拿到业务传入的OnClickListener对象" class="headerlink" title="拿到业务传入的OnClickListener对象"></a>拿到业务传入的OnClickListener对象</h2><p>由于我们一般不会去显式的修改业务逻辑,所以需要保存一个原始的OnClickListener对象,以保证业务的正常执行.</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> originOnClickListener <span class="token operator">=</span> mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token keyword">as</span> View<span class="token punctuation">.</span>OnClickListener</code></pre><h2 id="设置一个新的OnClickListener对象-并持有之前的原始OnClickListener对象"><a href="#设置一个新的OnClickListener对象-并持有之前的原始OnClickListener对象" class="headerlink" title="设置一个新的OnClickListener对象,并持有之前的原始OnClickListener对象"></a>设置一个新的OnClickListener对象,并持有之前的原始OnClickListener对象</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 新的listener</span><span class="token keyword">val</span> hookedOnClickListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener <span class="token operator">=</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span>originOnClickListener<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 赋值新的listener</span>mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token operator">=</span> hookedOnClickListener</code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> originListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> View<span class="token punctuation">.</span><span class="token function">OnClickListener</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//点击之前</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onClick: before"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 执行原始的点击逻辑</span>        originListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//点击之后</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onClick: after"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"hook"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到这里基本就OK了,但是观察上面代码,其实需要传入一个View对象,并且需要获取View的原始点击事件,因此hook操作要放到设置点击事件之后,实用性并不是很高.</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> HackActivity <span class="token operator">:</span> <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_hack<span class="token punctuation">)</span>        packageManager<span class="token punctuation">.</span><span class="token function">getInstalledPackages</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        btn_hook_OnClick<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            ToastUtils<span class="token punctuation">.</span><span class="token function">showShortToast</span><span class="token punctuation">(</span><span class="token string">"点击了Button"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">hookOnClickListener</span><span class="token punctuation">(</span>btn_hook_OnClick<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">hookOnClickListener</span><span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//getListenerInfo()</span>            <span class="token keyword">val</span> getListenerInfoMethod <span class="token operator">=</span> View<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getListenerInfo"</span><span class="token punctuation">)</span>            getListenerInfoMethod<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">// 调用getListenerInfo()方法，得到ListenerInfo对象</span>            <span class="token keyword">val</span> listenerInfo <span class="token operator">=</span> getListenerInfoMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//得到View的mOnClickListener Field</span>            <span class="token keyword">val</span> listenerInfoClz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"android.view.View\<span class="token interpolation variable">$ListenerInfo</span>"</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> mOnClickListener <span class="token operator">=</span> listenerInfoClz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"mOnClickListener"</span><span class="token punctuation">)</span>            mOnClickListener<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">// 获取到原来的listener值</span>            <span class="token keyword">val</span> originOnClickListener <span class="token operator">=</span> mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token keyword">as</span> View<span class="token punctuation">.</span>OnClickListener            <span class="token comment" spellcheck="true">// 新的listener</span>            <span class="token keyword">val</span> hookedOnClickListener<span class="token operator">:</span> View<span class="token punctuation">.</span>OnClickListener <span class="token operator">=</span> <span class="token function">HookOnClickListener</span><span class="token punctuation">(</span>originOnClickListener<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 赋值新的listener</span>            mOnClickListener<span class="token punctuation">[</span>listenerInfo<span class="token punctuation">]</span> <span class="token operator">=</span> hookedOnClickListener        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/jiangkang/KTools" target="_blank" rel="noopener">https://github.com/jiangkang/KTools</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hook的本质就是就是利用Java反射机制,将源码中一些类的对象替换自己实现的对象,以实现一些特殊的操作.&lt;/p&gt;
&lt;p&gt;基本上所有Hook的入门都会从Hook一个View的点击事件开始.&lt;/p&gt;
&lt;p&gt;Hook之前,一般都得先看看源码,以找到如何反射,如何替换比较合适.&lt;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="Hook" scheme="https://www.jiangkang.tech/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>WLAN基础知识</title>
    <link href="https://www.jiangkang.tech/2020/07/25/ji-chu/wlan-ji-chu-zhi-shi/"/>
    <id>https://www.jiangkang.tech/2020/07/25/ji-chu/wlan-ji-chu-zhi-shi/</id>
    <published>2020-07-24T16:09:37.000Z</published>
    <updated>2020-07-24T16:14:20.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/WLAN.png" alt="WLAN"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/WLAN.png&quot; alt=&quot;WLAN&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="基础" scheme="https://www.jiangkang.tech/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="WLAN" scheme="https://www.jiangkang.tech/tags/WLAN/"/>
    
  </entry>
  
  <entry>
    <title>MacOS上使用Wireshark抓包802.11</title>
    <link href="https://www.jiangkang.tech/2020/07/24/ji-chu/macos-shang-shi-yong-wireshark-zhua-bao-802-11/"/>
    <id>https://www.jiangkang.tech/2020/07/24/ji-chu/macos-shang-shi-yong-wireshark-zhua-bao-802-11/</id>
    <published>2020-07-24T11:57:34.000Z</published>
    <updated>2020-07-24T11:58:57.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/wlan_wireshark.png" alt="操作界面"></p><p><img src="https://oss.jiangkang.tech/jk/image-20200724192240420.png" alt="image-20200724192240420"></p><ol><li>工具栏 点击 Capture</li><li>点击 Options (如果没Stop,点击下Stop)</li><li>找到WI-FI,然后按照上面两张图进行设置</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/wlan_wireshark.png&quot; alt=&quot;操作界面&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/image-202007241922
      
    
    </summary>
    
    
      <category term="基础" scheme="https://www.jiangkang.tech/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="802.11" scheme="https://www.jiangkang.tech/tags/802-11/"/>
    
  </entry>
  
  <entry>
    <title>移动端设备标识符</title>
    <link href="https://www.jiangkang.tech/2020/07/23/ji-chu/yi-dong-duan-she-bei-biao-shi-fu/"/>
    <id>https://www.jiangkang.tech/2020/07/23/ji-chu/yi-dong-duan-she-bei-biao-shi-fu/</id>
    <published>2020-07-23T14:49:31.000Z</published>
    <updated>2020-07-23T14:58:10.079Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/uid.png" alt="设备标识符"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/uid.png&quot; alt=&quot;设备标识符&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="基础" scheme="https://www.jiangkang.tech/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="设备标识符" scheme="https://www.jiangkang.tech/tags/%E8%AE%BE%E5%A4%87%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-区分Debug,Release,Profile模式</title>
    <link href="https://www.jiangkang.tech/2020/07/18/flutter/flutter-qu-fen-debug-release-profile-mo-shi/"/>
    <id>https://www.jiangkang.tech/2020/07/18/flutter/flutter-qu-fen-debug-release-profile-mo-shi/</id>
    <published>2020-07-18T15:43:13.000Z</published>
    <updated>2020-07-19T09:26:01.890Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter中如果需要在Debug模式下输出一些信息,或者做一些特殊的逻辑,但是Release模式下又不需要的话,就需要可以判断当前的APK或者ipa是否为debug模式.这里有两种方式可以用来判断:</p><h2 id="使用dart-vm-product属性"><a href="#使用dart-vm-product属性" class="headerlink" title="使用dart.vm.product属性"></a>使用<code>dart.vm.product</code>属性</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 是否为Release模式</span><span class="token keyword">const</span> bool isReleaseMode <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.product"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果<code>dart.vm.product</code>属性值为true,则为Release模式,否则不是Release模式.</p><p><strong>但是这种方式不能用来区分Debug和Profile模式.</strong></p><h2 id="使用断言"><a href="#使用断言" class="headerlink" title="使用断言"></a>使用断言</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 判断是否为Debug模式</span>bool <span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  bool inDebug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>inDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> inDebug<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Debug模式下,是可以使用断言功能的,但是Profile和Release包下,断言被禁用了,因此可以用来判断是否为Debug模式.</p><p><strong>但是不能用于区分Profile模式和Release模式.</strong></p><p>既然上面两种方法都没法区分profile模式,因此大概看了下源码:</p><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// List the preconfigured build options for a given build mode.</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">buildModeOptions</span><span class="token punctuation">(</span>BuildMode mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>debug<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=false'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=false'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions,local-var-info,debugger-stops,instance-field-initializers,keep-unreachable-code,avoid-closure-call-instructions'</span><span class="token punctuation">,</span>        <span class="token string">'--enable-asserts'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>profile<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=true'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=false'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> BuildMode<span class="token punctuation">.</span>release<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token string">'-Ddart.vm.profile=false'</span><span class="token punctuation">,</span>        <span class="token string">'-Ddart.vm.product=true'</span><span class="token punctuation">,</span>        <span class="token string">'--bytecode-options=source-positions'</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string">'Unknown BuildMode: $mode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的代码可以看出来,我们可以使用<code>dart.vm.profile</code>来判断是否为profile模式.因此得出下面完整的判断方案:</p><h2 id="完整的方案"><a href="#完整的方案" class="headerlink" title="完整的方案"></a>完整的方案</h2><pre class=" language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">/// 判断是否为Debug模式</span>bool <span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  bool inDebug <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span><span class="token punctuation">(</span>inDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> inDebug<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// 判断编译模式</span>String <span class="token function">getCompileMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> bool isProfile <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.profile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> bool isReleaseMode <span class="token operator">=</span> <span class="token keyword">const</span> bool<span class="token punctuation">.</span><span class="token function">fromEnvironment</span><span class="token punctuation">(</span><span class="token string">"dart.vm.product"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"debug"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"profile"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isReleaseMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"release"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Unknown type"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flutter中如果需要在Debug模式下输出一些信息,或者做一些特殊的逻辑,但是Release模式下又不需要的话,就需要可以判断当前的APK或者ipa是否为debug模式.这里有两种方式可以用来判断:&lt;/p&gt;
&lt;h2 id=&quot;使用dart-vm-product属性&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="编译模式" scheme="https://www.jiangkang.tech/tags/%E7%BC%96%E8%AF%91%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-路由跳转</title>
    <link href="https://www.jiangkang.tech/2020/07/12/flutter/flutter-lu-you-tiao-zhuan/"/>
    <id>https://www.jiangkang.tech/2020/07/12/flutter/flutter-lu-you-tiao-zhuan/</id>
    <published>2020-07-12T15:01:05.000Z</published>
    <updated>2020-07-19T09:37:04.274Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://oss.jiangkang.tech/jk/20200719173617.png" alt="路由跳转"></p><p>前端页面开发中,路由的概念并不陌生,比如Android中经常会封装一些路由框架,通过一个name跳转指定的Acitivity以进行一定程度的解耦.</p><p>在Flutter中同样也有路由的概念,但是由于Dart语言比较古老落后,Flutter的路由跳转在一定程度上比较丑陋.</p><p>在Flutter中,我们一般使用<code>Navigator</code>进行路由跳转.</p><h2 id="最简单的跳转方法"><a href="#最简单的跳转方法" class="headerlink" title="最简单的跳转方法"></a>最简单的跳转方法</h2><pre class=" language-dart"><code class="language-dart">    Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用一个封装好的<code>MaterialPageRouter</code>作为<code>Router</code>的实现.</p><p>当要返回时,可以用<code>pop</code>:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>或者:</p><pre class=" language-dart"><code class="language-dart"> Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="使用路由名字进行跳转"><a href="#使用路由名字进行跳转" class="headerlink" title="使用路由名字进行跳转"></a>使用路由名字进行跳转</h2><p>当项目中的页面比较多的时候,如果再用上面的方法进行跳转,到后面就很难维护了,不利于拓展,因为我们必须引用到指定的页面Widget.</p><p>很容易想到,Flutter的Navigator提供了一个方法,使用一个routerName就可以跳转到指定的页面Widget,而不需要直接依赖页面Widget,这就需要建立一个name到页面的映射了,我们一般在APP的入口处进行设置:</p><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// Start the app with the "/" named route. In this case, the app starts</span>  <span class="token comment" spellcheck="true">// on the FirstScreen widget.</span>  initialRoute<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// When navigating to the "/" route, build the FirstScreen widget.</span>    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">FirstScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// When navigating to the "/second" route, build the SecondScreen widget.</span>    <span class="token string">'/second'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">SecondScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当需要跳转的时候,执行下面的方法:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">'/second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当需要返回的时候,执行下面的方法:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="传参跳转"><a href="#传参跳转" class="headerlink" title="传参跳转"></a>传参跳转</h2><p>页面直接的跳转不免会遇到需要传递参数的情形,如果是直接跳转,直接在页面的构造方法中传入参数即可.</p><p>传递的参数是一个Object,可以是你自己定义的类实例,也可以是数字,字符串等:</p><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于不带名字的路由跳转,可以通过RouteSettings进行传参:</p><pre class=" language-dart"><code class="language-dart">        Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>          context<span class="token punctuation">,</span>          <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">DetailScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 传参args</span>            settings<span class="token punctuation">:</span> <span class="token function">RouteSettings</span><span class="token punctuation">(</span>              arguments<span class="token punctuation">:</span> args<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么如何在页面中获取到传入的参数呢?</p><p>答案是需要使用<code>ModalRoute.of(context)</code>:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> Object args <span class="token operator">=</span> ModalRoute<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments</code></pre><p>其中args可以是任何你定义的类,假设这里要传入的是一个Dog对象:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  String name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>  <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那些的时候就可以是:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> Dog dog <span class="token operator">=</span> ModalRoute<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>String name <span class="token operator">=</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">;</span>int age <span class="token operator">=</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">;</span></code></pre><p>除了在页面Widget中解析参数以外,还可以在<code>MaterialApp#onGenerateRoute()</code>中:</p><h3 id="使用MaterialApp-onGenerateRoute"><a href="#使用MaterialApp-onGenerateRoute" class="headerlink" title="使用MaterialApp#onGenerateRoute()"></a>使用MaterialApp#onGenerateRoute()</h3><pre class=" language-dart"><code class="language-dart"><span class="token function">MaterialApp</span><span class="token punctuation">(</span>  onGenerateRoute<span class="token punctuation">:</span> <span class="token punctuation">(</span>settings<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>settings<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"/dog"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> Dog dog <span class="token operator">=</span> settings<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">DogPage</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span>            age<span class="token punctuation">:</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实不管是在页面中解析参数,还是在onGenerateRoute中解析参数,我们需要都只是一个RouteSettings对象,这个对象中持有了路由名字和传递的参数,因此可以通过它将两者联系起来:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">RouteSettings</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token function">RouteSettings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token keyword">final</span> Object arguments<span class="token punctuation">;</span>  <span class="token metadata symbol">@override</span>  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'${objectRuntimeType(this, '</span>RouteSettings<span class="token string">')}("$name", $arguments)'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="返回路由结果"><a href="#返回路由结果" class="headerlink" title="返回路由结果"></a>返回路由结果</h2><p>在Android中跳转Activity,在返回到当前页的时候需要从页面带回来一些数据,Android中是通过<code>onActivityForResult</code>实现的,在Flutter中则是通过异步函数调用实现的.在跳转的时候保存一个Future对象的结果即可:</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    context<span class="token punctuation">,</span>    <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">SelectionScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么在页面退出/返回的时候任何传递结果呢?</p><p>答案是<code>pop</code>方法中可以携带一个结果对象,类型可以自定义:</p><pre class=" language-dart"><code class="language-dart"> Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://oss.jiangkang.tech/jk/20200719173617.png&quot; alt=&quot;路由跳转&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端页面开发中,路由的概念并不陌生,比如Android中经常会封装一些路由框架,通过一个name跳转指定的Aciti
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="路由" scheme="https://www.jiangkang.tech/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-转场动画(页面跳转动画)</title>
    <link href="https://www.jiangkang.tech/2020/07/12/flutter/flutter-zhuan-chang-dong-hua/"/>
    <id>https://www.jiangkang.tech/2020/07/12/flutter/flutter-zhuan-chang-dong-hua/</id>
    <published>2020-07-12T10:30:34.000Z</published>
    <updated>2020-07-19T09:46:30.648Z</updated>
    
    <content type="html"><![CDATA[<p>在Android中专场动画比较常见,就是从一个Activity/Fragment跳转到另一个Activity/Fragment之间的过渡状态.Flutter也提供了对转场动画的支持.</p><h2 id="路由跳转的一般方式"><a href="#路由跳转的一般方式" class="headerlink" title="路由跳转的一般方式"></a>路由跳转的一般方式</h2><pre class=" language-dart"><code class="language-dart">Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> targetPage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以使用<code>PageRouteBuilder</code>:</p><pre class=" language-dart"><code class="language-dart">    <span class="token keyword">final</span> router <span class="token operator">=</span> <span class="token function">PageRouteBuilder</span><span class="token punctuation">(</span>      pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>          Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      transitionsBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>          Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">,</span> Widget child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// child是pageBuilder中返回的，一般在这里处理转场动画</span>        <span class="token keyword">return</span> child<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>pageBuilder中return的page会作为transionBuilder中的child参数传入,而且pageBuilder仅在router被创建时调用一次.</p><p>至于<code>animation</code>,<code>secondaryAnimation</code>参数,就是在push router的时候从0变化到1,pop的时候从1变化到0.</p><p>下面看下如何控制页面进入/退出的方向;</p><h2 id="控制页面进入-退出的方向"><a href="#控制页面进入-退出的方向" class="headerlink" title="控制页面进入/退出的方向"></a>控制页面进入/退出的方向</h2><pre class=" language-dart"><code class="language-dart">  Route <span class="token function">_createPageRouter</span><span class="token punctuation">(</span>SlideDirection slideDirection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">PageRouteBuilder</span><span class="token punctuation">(</span>pageBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span>        Animation animation<span class="token punctuation">,</span> Animation secondaryAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">ImageDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> transitionsBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">,</span> Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> animation<span class="token punctuation">,</span>        Animation<span class="token operator">&lt;</span>double<span class="token operator">></span> secondaryAnimation<span class="token punctuation">,</span> Widget child<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> begin <span class="token operator">=</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>slideDirection <span class="token operator">==</span> SlideDirection<span class="token punctuation">.</span>right2left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        begin <span class="token operator">=</span> <span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> end <span class="token operator">=</span> Offset<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>      <span class="token keyword">var</span> curve <span class="token operator">=</span> Curves<span class="token punctuation">.</span>ease<span class="token punctuation">;</span>      <span class="token keyword">var</span> tween <span class="token operator">=</span> <span class="token function">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">:</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chain</span><span class="token punctuation">(</span><span class="token function">CurveTween</span><span class="token punctuation">(</span>curve<span class="token punctuation">:</span> curve<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> offsetAnimation <span class="token operator">=</span> animation<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span>tween<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">SlideTransition</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> child<span class="token punctuation">,</span>        position<span class="token punctuation">:</span> offsetAnimation<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>这里利用了Animation + SlideTransition来实现效果,其中SlideTransition用于一个widget从相对于正常位置的一个偏移动画到正常位置.</p><h2 id="源码项目"><a href="#源码项目" class="headerlink" title="源码项目"></a>源码项目</h2><p>[<a href="https://github.com/jiangkang/flutter-system" target="_blank" rel="noopener">https://github.com/jiangkang/flutter-system</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><video src="https://webplus-cn-hangzhou-s-5d0e2c1c3cec684ce2209709.oss-cn-hangzhou.aliyuncs.com/jk/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB.mov" width="300px"      controls="controls" ></video></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Android中专场动画比较常见,就是从一个Activity/Fragment跳转到另一个Activity/Fragment之间的过渡状态.Flutter也提供了对转场动画的支持.&lt;/p&gt;
&lt;h2 id=&quot;路由跳转的一般方式&quot;&gt;&lt;a href=&quot;#路由跳转的一般方式&quot; c
      
    
    </summary>
    
    
      <category term="Flutter" scheme="https://www.jiangkang.tech/categories/Flutter/"/>
    
    
      <category term="动画" scheme="https://www.jiangkang.tech/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程-桌面程序的启动</title>
    <link href="https://www.jiangkang.tech/2020/06/29/android/android-xi-tong-qi-dong-liu-cheng-zhuo-mian-cheng-xu-de-qi-dong/"/>
    <id>https://www.jiangkang.tech/2020/06/29/android/android-xi-tong-qi-dong-liu-cheng-zhuo-mian-cheng-xu-de-qi-dong/</id>
    <published>2020-06-29T11:08:59.000Z</published>
    <updated>2020-07-19T09:52:19.251Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://www.jiangkang.tech/2020/06/26/android/android-xi-tong-qi-dong-liu-cheng-systemserver-fen-xi/">Android启动流程-SystemServer分析</a>中有提到,在SystemServer启动“Other”类型服务的时候,最后阶段会执行ActivityManagerService的<code>systemReady()</code>方法,这里就是启动桌面程序的入口.</p><pre class=" language-java"><code class="language-java">        mActivityManagerService<span class="token punctuation">.</span><span class="token function">systemReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"StartSystemUI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">startSystemUi</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> windowManagerF<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reportWtf</span><span class="token punctuation">(</span><span class="token string">"starting System UI"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Wait for all packages to be prepared</span>            mPackageManagerService<span class="token punctuation">.</span><span class="token function">waitForAppDataPrepared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// It is now okay to let the various system services start their</span>            <span class="token comment" spellcheck="true">// third party code...</span>            <span class="token function">traceBeginAndSlog</span><span class="token punctuation">(</span><span class="token string">"PhaseThirdPartyAppsCanStart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mSystemServiceManager<span class="token punctuation">.</span><span class="token function">startBootPhase</span><span class="token punctuation">(</span>                    SystemService<span class="token punctuation">.</span>PHASE_THIRD_PARTY_APPS_CAN_START<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">traceEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> BOOT_TIMINGS_TRACE_LOG<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityManagerService</code>中的systemReady()方法中有这么一段:</p><pre class=" language-java"><code class="language-java">mAtmInternal<span class="token punctuation">.</span><span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span>currentUserId<span class="token punctuation">,</span> <span class="token string">"systemReady"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>ActivityTaskManagerService</code>中有实现:</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mGlobalLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mRootActivityContainer<span class="token punctuation">.</span><span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>最终会执行到<code>RootActivityContainer</code>中:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">startHomeOnAllDisplays</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> homeStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mActivityDisplays<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> displayId <span class="token operator">=</span> mActivityDisplays<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>mDisplayId<span class="token punctuation">;</span>            homeStarted <span class="token operator">|=</span> <span class="token function">startHomeOnDisplay</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> homeStarted<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">startHomeOnDisplay</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> String reason<span class="token punctuation">,</span> <span class="token keyword">int</span> displayId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowInstrumenting<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> fromHomeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Fallback to top focused display if the displayId is invalid.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>displayId <span class="token operator">==</span> INVALID_DISPLAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            displayId <span class="token operator">=</span> <span class="token function">getTopDisplayFocusedStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mDisplayId<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Intent homeIntent <span class="token operator">=</span> null<span class="token punctuation">;</span>        ActivityInfo aInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>displayId <span class="token operator">==</span> DEFAULT_DISPLAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取Home Intent</span>            homeIntent <span class="token operator">=</span> mService<span class="token punctuation">.</span><span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aInfo <span class="token operator">=</span> <span class="token function">resolveHomeActivity</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> homeIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldPlaceSecondaryHomeOnDisplay</span><span class="token punctuation">(</span>displayId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Pair<span class="token operator">&lt;</span>ActivityInfo<span class="token punctuation">,</span> Intent<span class="token operator">></span> info <span class="token operator">=</span> <span class="token function">resolveSecondaryHomeActivity</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>            aInfo <span class="token operator">=</span> info<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            homeIntent <span class="token operator">=</span> info<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aInfo <span class="token operator">==</span> null <span class="token operator">||</span> homeIntent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canStartHomeOnDisplay</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">,</span> displayId<span class="token punctuation">,</span> allowInstrumenting<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Updates the home component of the intent.</span>        homeIntent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span>aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>packageName<span class="token punctuation">,</span> aInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeIntent<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>homeIntent<span class="token punctuation">.</span><span class="token function">getFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Updates the extra information of the intent.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromHomeKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            homeIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>WindowManagerPolicy<span class="token punctuation">.</span>EXTRA_FROM_HOME_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Update the reason for ANR debugging to verify if the user activity is the one that</span>        <span class="token comment" spellcheck="true">// actually launched.</span>        <span class="token keyword">final</span> String myReason <span class="token operator">=</span> reason <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> UserHandle<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>                aInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> displayId<span class="token punctuation">;</span>        mService<span class="token punctuation">.</span><span class="token function">getActivityStartController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startHomeActivity</span><span class="token punctuation">(</span>homeIntent<span class="token punctuation">,</span> aInfo<span class="token punctuation">,</span> myReason<span class="token punctuation">,</span>                displayId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </code></pre><p>这里会找到桌面程序的Intent:</p><pre class=" language-java"><code class="language-java">    Intent <span class="token function">getHomeIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>mTopAction<span class="token punctuation">,</span> mTopData <span class="token operator">!=</span> null <span class="token operator">?</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>mTopData<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>mTopComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_DEBUG_TRIAGED_MISSING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mFactoryTest <span class="token operator">!=</span> FactoryTest<span class="token punctuation">.</span>FACTORY_TEST_LOW_LEVEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>            intent<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>CATEGORY_HOME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> intent<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>剩下的就是启动桌面程序了.</p><blockquote><p>Launcher的启动流程代码写的不是一般的混乱,启动Launcher的时候会有好几次的防护,针对Launcher启动崩溃也做了相应的处理.</p><p>没有经过debug,可能存在其他的路径启动Launcher,后续如果还有兴趣的话再补充.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://www.jiangkang.tech/2020/06/26/android/android-xi-tong-qi-dong-liu-cheng-systemserver-fen-xi/&quot;&gt;Android启动流程-SystemServer分
      
    
    </summary>
    
    
      <category term="Android" scheme="https://www.jiangkang.tech/categories/Android/"/>
    
    
      <category term="源码分析" scheme="https://www.jiangkang.tech/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Android启动流程" scheme="https://www.jiangkang.tech/tags/Android%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
</feed>
